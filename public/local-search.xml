<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue性能优化——按需引入第三方组件库</title>
    <link href="/2022/09/19/%E3%80%90Vue%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E3%80%91%E2%80%94%E2%80%94%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    <url>/2022/09/19/%E3%80%90Vue%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E3%80%91%E2%80%94%E2%80%94%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Vue按需引入第三方组件库"><a href="#Vue按需引入第三方组件库" class="headerlink" title="Vue按需引入第三方组件库"></a>Vue按需引入第三方组件库</h1><h2 id="为什么按需引入组件库"><a href="#为什么按需引入组件库" class="headerlink" title="为什么按需引入组件库?"></a>为什么按需引入组件库?</h2><p><font color= 'yellow' >为了能够快速开发，提高开发效率，通常都会引入第三方组件库，当把组件库全部导入项目中，最后打包项目后会发现项目的体积过大。实际情况中，整个项目可能才使用整个组件库40%的组件，而剩下60%不用就显得非常浪费。我们可以将这用到的40%的组件按需引入到项目中，不用的组件则不引入到项目，从而达到减少打包体积，提升项目响应速度的目的。</font></p><h2 id="项目打包体积对比："><a href="#项目打包体积对比：" class="headerlink" title="项目打包体积对比："></a>项目打包体积对比：</h2><img src = " https://img1.imgtp.com/2022/09/19/JJyeel3R.png" /><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dist</span>.zip为按需引入组件库，使用了些许标签的打包体积，只有<span class="hljs-number">392</span>KB<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dist</span>(<span class="hljs-number">2</span>).zip为组件库全局引入，使用了些许标签的打包结果，却是达到了<span class="hljs-number">1</span>.<span class="hljs-number">1</span>M<br></code></pre></td></tr></table></figure><p><strong><font color= 'each' >总结：由此可见，按需引入组件库是可以有效减少项目体积的，提高项目线上首屏渲染速度，减少白屏时间，减少流量消耗</font></strong></p><h2 id="组件按需引入的方法【以arco-design-web-vue组件库为例】"><a href="#组件按需引入的方法【以arco-design-web-vue组件库为例】" class="headerlink" title="组件按需引入的方法【以arco-design/web-vue组件库为例】"></a>组件按需引入的方法【以arco-design/web-vue组件库为例】</h2><p><strong><font color= 'sdffwd' >1、安装unplugin-vue-components  和  unplugin-auto-import  插件</font></strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add -D unplugin-vue-components unplugin-auto-import<br><span class="hljs-comment"># 或者使用 npm</span><br>npm install -D unplugin-vue-components unplugin-auto-import<br></code></pre></td></tr></table></figure><p><strong><font color= 'sdffwd' >2、配置vue.config.js文件</font></strong></p><p>vue-cli内部用的就是<a href="https://so.csdn.net/so/search?q=webpack&spm=1001.2101.3001.7020">webpack</a>，所以configureWebpack配置的会被合并</p><p><strong><font color= 'each' >自动引入组件与样式，不需在main.js引入</font></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">AutoImport</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;unplugin-auto-import/webpack&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Components</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;unplugin-vue-components/webpack&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">ArcoResolver</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;unplugin-vue-components/resolvers&#x27;</span>) <span class="hljs-comment">//如果是ElementPlus组件库则是ElementPlusResolver</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">configureWebpack</span>: &#123;<br>    <span class="hljs-attr">plugins</span>: [<br>      <span class="hljs-title class_">AutoImport</span>(&#123;<br>        <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ArcoResolver</span>()]<br>      &#125;),<br>      <span class="hljs-title class_">Components</span>(&#123;<br>        <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ArcoResolver</span>()]<br>      &#125;)<br>    ],<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="组件使用：【使用了组件库的Layout、Button、Space、图片轮播-Carousel组件】"><a href="#组件使用：【使用了组件库的Layout、Button、Space、图片轮播-Carousel组件】" class="headerlink" title="组件使用：【使用了组件库的Layout、Button、Space、图片轮播 Carousel组件】"></a>组件使用：【使用了组件库的Layout、Button、Space、图片轮播 Carousel组件】</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layout-demo&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100vh&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a-layout</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a-layout-header</span>&gt;</span>Header<span class="hljs-tag">&lt;/<span class="hljs-name">a-layout-header</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a-layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a-layout-sider</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;dark&quot;</span>&gt;</span>Sider<span class="hljs-tag">&lt;/<span class="hljs-name">a-layout-sider</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a-layout-content</span></span><br><span class="hljs-tag">          &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>home | <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>about<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a-space</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">a-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Primary<span class="hljs-tag">&lt;/<span class="hljs-name">a-button</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">a-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;dashed&quot;</span>&gt;</span>Dashed<span class="hljs-tag">&lt;/<span class="hljs-name">a-button</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">a-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;outline&quot;</span>&gt;</span>Outline<span class="hljs-tag">&lt;/<span class="hljs-name">a-button</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">a-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">a-button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a-space</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a-carousel</span></span><br><span class="hljs-tag">              <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">                width: &#x27;600px&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">                height: &#x27;240px&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">              &#125;&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">:default-current</span>=<span class="hljs-string">&quot;2&quot;</span></span><br><span class="hljs-tag">              @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;handleChange&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">:auto-play</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">animation-name</span>=<span class="hljs-string">&quot;fade&quot;</span></span><br><span class="hljs-tag">            &gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">a-carousel-item</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;image in images&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;image&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;image&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">                    width: &#x27;100%&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">                  &#125;&quot;</span></span><br><span class="hljs-tag">                /&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">a-carousel-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a-carousel</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a-layout-content</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">a-layout</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a-layout-footer</span>&gt;</span>Footer<span class="hljs-tag">&lt;/<span class="hljs-name">a-layout-footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a-layout</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; defineComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;HelloWorld&quot;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">props</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">msg</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> images = [</span><br><span class="language-javascript">      <span class="hljs-string">&quot;https://p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/cd7a1aaea8e1c5e3d26fe2591e561798.png~tplv-uwbnlip3yd-webp.webp&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-string">&quot;https://p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/6480dbc69be1b5de95010289787d64f1.png~tplv-uwbnlip3yd-webp.webp&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-string">&quot;https://p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/0265a04fddbd77a19602a15d9d55d797.png~tplv-uwbnlip3yd-webp.webp&quot;</span>,</span><br><span class="language-javascript">    ];</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleChange</span> = (<span class="hljs-params">value</span>) =&gt; &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      images,</span><br><span class="language-javascript">      handleChange,</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.layout-demo</span> :<span class="hljs-built_in">deep</span>(.arco-layout-header),</span><br><span class="language-css">.layout-demo :<span class="hljs-built_in">deep</span>(.arco-layout-footer),</span><br><span class="language-css">.layout-demo :<span class="hljs-built_in">deep</span>(.arco-layout-sider-children),</span><br><span class="language-css">.layout-demo :<span class="hljs-built_in">deep</span>(.arco-layout-content) &#123;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">  <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--color-white);</span><br><span class="language-css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">font-stretch</span>: condensed;</span><br><span class="language-css">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.layout-demo</span> :<span class="hljs-built_in">deep</span>(.arco-layout-header),</span><br><span class="language-css">.layout-demo :<span class="hljs-built_in">deep</span>(.arco-layout-footer) &#123;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">64px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-primary-light-<span class="hljs-number">4</span>);</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.layout-demo</span> :<span class="hljs-built_in">deep</span>(.arco-layout-sider) &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">206px</span>;</span><br><span class="language-css">  <span class="hljs-comment">/* height: calc(100% - 128px); */</span></span><br><span class="language-css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--color-primary-light-<span class="hljs-number">3</span>);</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.layout-demo</span> :<span class="hljs-built_in">deep</span>(.arco-layout-content) &#123;</span><br><span class="language-css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-built_in">var</span>(--arcoblue-<span class="hljs-number">6</span>));</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://img1.imgtp.com/2022/09/19/B61ULNRQ.png" />]]></content>
    
    
    <categories>
      
      <category>Vue性能优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pinia菠萝——Vue的最新状态存储库</title>
    <link href="/2022/09/13/%E3%80%90Pinia%E8%8F%A0%E8%90%9D%E3%80%91%E2%80%94%E2%80%94Vue%E6%9C%80%E6%96%B0%E7%9A%84%E7%8A%B6%E6%80%81%E5%AD%98%E5%82%A8%E5%BA%93/"/>
    <url>/2022/09/13/%E3%80%90Pinia%E8%8F%A0%E8%90%9D%E3%80%91%E2%80%94%E2%80%94Vue%E6%9C%80%E6%96%B0%E7%9A%84%E7%8A%B6%E6%80%81%E5%AD%98%E5%82%A8%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="【Pinia-菠萝】——Vue-的最新状态存储库"><a href="#【Pinia-菠萝】——Vue-的最新状态存储库" class="headerlink" title="【Pinia 菠萝】——Vue 的最新状态存储库"></a>【Pinia 菠萝】——Vue 的最新状态存储库</h1><h2 id="Pinia-是什么"><a href="#Pinia-是什么" class="headerlink" title="Pinia 是什么?"></a><strong>Pinia 是什么?</strong></h2><p><font color= 'BrickRed' >Pinia 是一个用于 Vue 的状态管理库，类似 Vuex, 是 Vue 的另一种状态管理方案       Pinia    支持     Vue2 和 Vue3</font></p><h2 id="Pinia-优势"><a href="#Pinia-优势" class="headerlink" title="Pinia 优势"></a>Pinia 优势</h2><p><font color= 'BrickRed' ><em>mutations</em> 不再存在,更加简洁直观，减少代码冗余</font></p><p><font color= 'BrickRed' >不需要嵌套模块，符合 Vue3 的 Composition api ，让代码更加扁平化</font></p><p><font color= 'BrickRed' >完整的 TypeScript 支持</font></p><p><font color= 'BrickRed' >非常的轻量级， 仅有 1 KB</font></p><p><font color= 'BrickRed' >模块化设计，便于拆分状态</font></p><h2 id="安装-Pinia"><a href="#安装-Pinia" class="headerlink" title="安装 Pinia"></a>安装 Pinia</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add pinia<br><span class="hljs-comment"># 或者使用 npm</span><br>npm install pinia<br></code></pre></td></tr></table></figure><p><strong><font color= 'each' >提示</font></strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">如果您的应用使用 Vue 2，您还需要安装组合 API：`@vue/composition-api`。 如果您使用 Nuxt，则应遵循 [这些说明](https://pinia.web3doc.top/ssr/nuxt.html)。<br></code></pre></td></tr></table></figure><p><strong>创建一个 pinia（根存储）并将其传递给应用程序：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>();<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br>app.<span class="hljs-title function_">use</span>(pinia);<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>创建 store 仓库</strong></p><p><strong><font color= 'Peach' >src  -  store 文件夹   -  index.js</font></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&quot;Counter&quot;</span>, &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;郦郦郦&quot;</span>,<br>  &#125;),<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">countPow2</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> (state.<span class="hljs-property">count</span> + <span class="hljs-number">2</span>) ** <span class="hljs-number">2</span>; <span class="hljs-comment">// 9 也可以使用this</span><br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a&quot;</span>, a); <span class="hljs-comment">// 传过来的参数 2</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;b&quot;</span>, b); <span class="hljs-comment">// undefined</span><br>      <span class="hljs-variable language_">this</span>.$patch(&#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> + a,<br>      &#125;);<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="组件内使用："><a href="#组件内使用：" class="headerlink" title="组件内使用："></a>组件内使用：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;hello&quot;&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;<br>    &lt;p&gt;&#123;&#123; count &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;&#123;&#123; name &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;&#123;&#123; countPow2 &#125;&#125;&lt;/p&gt;<br>    &lt;p&gt;&lt;button @click=&quot;add&quot;&gt;+&lt;/button&gt;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; store as useCountStore &#125; from &quot;../store/index.js&quot;;<br>import &#123; computed &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;HelloWorld&quot;,<br>  props: &#123;<br>    msg: String,<br>  &#125;,<br>  setup() &#123;<br>    const store = useCountStore();<br>    const add = () =&gt; &#123;<br>      store.add(2); // 传参<br>      store.$patch(&#123;<br>        name: (store.name = &quot;郦111&quot;),<br>      &#125;);<br>    &#125;;<br>    return &#123;<br>      count: computed(() =&gt; store.count),<br>      countPow2: computed(() =&gt; store.countPow2),<br>      name: computed(() =&gt; store.name),<br>      add,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>初始页面：</strong></p><img src="https://img1.imgtp.com/2022/09/13/l8Dgzphw.png" /><p><strong>使用仓库 actions 方法后的页面：</strong></p><img src="https://img1.imgtp.com/2022/09/13/advDR2km.png" /><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p><strong>Store</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Store 是一个保存状态和业务逻辑的实体，可以自由读取和写入，并通过导入后在 setup 中使用<br></code></pre></td></tr></table></figure><p>Getters</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Pinia</span> 中的 <span class="hljs-title class_">Getters</span> 作用与 <span class="hljs-title class_">Vuex</span> 中的 <span class="hljs-title class_">Getters</span> 相同，但使用略有差异<br><span class="hljs-title class_">Pinia</span> 中的 <span class="hljs-title class_">Getters</span> 直接在 <span class="hljs-title class_">Store</span> 上读取，形似 <span class="hljs-title class_">Store</span>.<span class="hljs-property">xx</span>，就和一般的属性读取一样<br>基本使用<br><span class="hljs-title class_">Getter</span> 第一个参数是 state，是当前的状态，也可以使用 <span class="hljs-variable language_">this</span>.<span class="hljs-property">xx</span> 获取状态<br><span class="hljs-title class_">Getter</span> 中也可以访问其他的 <span class="hljs-title class_">Getter</span>， 或者是其他的 <span class="hljs-title class_">Store</span><br></code></pre></td></tr></table></figure><p>actions</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Pinia</span> 没有 <span class="hljs-title class_">Mutations</span>，统一在 actions 中操作 state，通过<span class="hljs-variable language_">this</span>.<span class="hljs-property">xx</span> 访问相应状态<br>虽然可以直接操作 <span class="hljs-title class_">Store</span>，但还是推荐在 actions 中操作，保证状态不被意外改变<br>action 和普通的函数一样<br>action 同样可以像 <span class="hljs-title class_">Getter</span> 一样访问其他的 <span class="hljs-title class_">Store</span>，同上方式使用其它 <span class="hljs-title class_">Store</span><br></code></pre></td></tr></table></figure><p><strong><font color= 'each' >提示</font></strong></p><p>在 vue 文件中解构 pinia 中的 state 会出现丢失响应式的问题,可以通过 pinia 出的 storeToRefs 去进行解构可以保持变量的响应式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; storeToRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span>;<br><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useCountStore</span>();<br><span class="hljs-keyword">const</span> &#123; count &#125; = <span class="hljs-title function_">storeToRefs</span>(store);<br><span class="hljs-keyword">return</span> &#123; count &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pinia菠萝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitlab 配置 ssh key</title>
    <link href="/2022/09/10/gitlab%E9%85%8D%E7%BD%AEssh%20key/"/>
    <url>/2022/09/10/gitlab%E9%85%8D%E7%BD%AEssh%20key/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="gitlab-配置-ssh-key"><a href="#gitlab-配置-ssh-key" class="headerlink" title="gitlab 配置 ssh key"></a>gitlab 配置 ssh key</h1><p>打开本地 git bash 或者 cmd,使用如下命令生成<a href="https://so.csdn.net/so/search?q=ssh&spm=1001.2101.3001.7020">ssh</a>公钥和私钥对</p><p><code>ssh-keygen -t rsa -C &#39;xxx@xxx.com&#39;</code> 然后一路回车(-C 参数是你的邮箱地址)</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen</span><br></code></pre></td></tr></table></figure><p>Enter 一路回车,遇到 y 选 y</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">C:\<span class="hljs-title">Users</span>\<span class="hljs-title">LL</span>&gt;<span class="hljs-title">ssh</span>-<span class="hljs-title">keygen</span></span><br><span class="hljs-function"><span class="hljs-title">Generating</span> <span class="hljs-title">public</span>/<span class="hljs-title">private</span> <span class="hljs-title">rsa</span> <span class="hljs-title">key</span> <span class="hljs-title">pair</span>.</span><br><span class="hljs-function"><span class="hljs-title">Enter</span> <span class="hljs-title">file</span> <span class="hljs-title">in</span> <span class="hljs-title">which</span> <span class="hljs-title">to</span> <span class="hljs-title">save</span> <span class="hljs-title">the</span> <span class="hljs-title">key</span> (<span class="hljs-title">C</span>:\<span class="hljs-title">Users</span>\<span class="hljs-title">LL</span>/.<span class="hljs-title">ssh</span>/<span class="hljs-title">id_rsa</span>):</span><br><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Users</span>\<span class="hljs-title">LL</span>/.<span class="hljs-title">ssh</span>/<span class="hljs-title">id_rsa</span> <span class="hljs-title">already</span> <span class="hljs-title">exists</span>.</span><br><span class="hljs-function"><span class="hljs-title">Overwrite</span> (<span class="hljs-title">y</span>/<span class="hljs-title">n</span>)? <span class="hljs-title">y</span></span><br><span class="hljs-function"><span class="hljs-title">Enter</span> <span class="hljs-title">passphrase</span> (<span class="hljs-title">empty</span> <span class="hljs-title">for</span> <span class="hljs-title">no</span> <span class="hljs-title">passphrase</span>):</span><br><span class="hljs-function"><span class="hljs-title">Enter</span> <span class="hljs-title">same</span> <span class="hljs-title">passphrase</span> <span class="hljs-title">again</span>:</span><br><span class="hljs-function"><span class="hljs-title">Your</span> <span class="hljs-title">identification</span> <span class="hljs-title">has</span> <span class="hljs-title">been</span> <span class="hljs-title">saved</span> <span class="hljs-title">in</span> <span class="hljs-title">C</span>:\<span class="hljs-title">Users</span>\<span class="hljs-title">LL</span>/.<span class="hljs-title">ssh</span>/<span class="hljs-title">id_rsa</span>.</span><br><span class="hljs-function"><span class="hljs-title">Your</span> <span class="hljs-title">public</span> <span class="hljs-title">key</span> <span class="hljs-title">has</span> <span class="hljs-title">been</span> <span class="hljs-title">saved</span> <span class="hljs-title">in</span> <span class="hljs-title">C</span>:\<span class="hljs-title">Users</span>\<span class="hljs-title">LL</span>/.<span class="hljs-title">ssh</span>/<span class="hljs-title">id_rsa.pub</span>.</span><br><span class="hljs-function"><span class="hljs-title">The</span> <span class="hljs-title">key</span> <span class="hljs-title">fingerprint</span> <span class="hljs-title">is</span>:</span><br><span class="hljs-function"><span class="hljs-title">SHA256:TJf1AiiRDMYxs4bTcjOnIKrGn42s1yZfWIwRbrcIEHw</span> <span class="hljs-title">ll</span>\<span class="hljs-title">ll</span>@<span class="hljs-title">LL</span></span><br><span class="hljs-function"><span class="hljs-title">The</span> <span class="hljs-title">key</span>&#x27;<span class="hljs-title">s</span> <span class="hljs-title">randomart</span> <span class="hljs-title">image</span> <span class="hljs-title">is</span>:</span><br><span class="hljs-function">+---[<span class="hljs-title">RSA</span> 3072]----+</span><br><span class="hljs-function">|.<span class="hljs-title">o</span>..*=.<span class="hljs-title">o</span> .. .    |</span><br><span class="hljs-function">| ..<span class="hljs-title">Eo</span>+= .  + .   |</span><br><span class="hljs-function">|. *.<span class="hljs-title">B</span>+.<span class="hljs-title">o</span>. <span class="hljs-title">o</span> . .  |</span><br><span class="hljs-function">|.. *<span class="hljs-title">o</span>=*<span class="hljs-title">o</span>..   .   |</span><br><span class="hljs-function">|.   .<span class="hljs-title">o</span> +<span class="hljs-title">S</span>        |</span><br><span class="hljs-function">|<span class="hljs-title">o</span>     <span class="hljs-title">o</span>          |</span><br><span class="hljs-function">|.<span class="hljs-title">o</span>  .. .         |</span><br><span class="hljs-function">|. <span class="hljs-title">oo</span>+<span class="hljs-title">o</span>.          |</span><br><span class="hljs-function">| .<span class="hljs-title">o</span>=+<span class="hljs-title">o</span>           |</span><br><span class="hljs-function">+----[<span class="hljs-title">SHA256</span>]-----+</span><br><span class="hljs-function">到此就是完成了！</span><br></code></pre></td></tr></table></figure><p>然后打开<del>/.ssh/id_rsa.pub 文件(</del>表示用户目录，比如我的 windows 就是 C:\Users\LL.ssh)，复制其中的内容</p><p>打开 gitlab,找到 Profile Settings–&gt;SSH Keys—&gt;Add SSH Key,并把上一步中复制的内容粘贴到 Key 所对应的文本框，在 Title 对应的文本框中给这个 sshkey 设置一个名字，点击 Add key 按钮</p><img src="https://img1.imgtp.com/2022/09/10/OFvHa8Bf.jpg" /><p>为啥要设置 ssh 协议呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 我们为什么要使用ssh协议呢？因为ssh更加安全，然后更加方便，比如我们公司的gitlab由http协议换成了https协议，那么如果你是使用http协议管理代码，那么需要修改所有的项目中的git地址变成https，这会把我们给逼疯的！但是如果我们一开始就是用ssh协议，这不需要任何的修改，简直不能再爽一点了。</span><br></code></pre></td></tr></table></figure><h1 id="使用-GitBash-对-GitLab-服务器上的项目进行操作"><a href="#使用-GitBash-对-GitLab-服务器上的项目进行操作" class="headerlink" title="使用 GitBash 对 GitLab 服务器上的项目进行操作"></a>使用 GitBash 对 GitLab 服务器上的项目进行操作</h1><table><thead><tr><th>序号</th><th>命令</th><th>命令说明</th></tr></thead><tbody><tr><td>1</td><td>$ git –version</td><td>检查 Git 的版本</td></tr><tr><td>2</td><td>$ git config –global user.name “Coffee”</td><td>提交信息时添加 Git 用户名</td></tr><tr><td>3</td><td>$ git config –global user.name</td><td>验证输入的用户名</td></tr><tr><td>4</td><td>$ git config –global user.email “<a href="mailto:&#120;&#x78;&#120;&#x78;&#x78;&#x40;&#49;&#x36;&#51;&#x2e;&#99;&#111;&#109;">&#120;&#x78;&#120;&#x78;&#x78;&#x40;&#49;&#x36;&#51;&#x2e;&#99;&#111;&#109;</a>“</td><td>设置电子邮件地址</td></tr><tr><td>5</td><td>$ git config –global user.email</td><td>验证输入的电子邮件地址</td></tr><tr><td>6</td><td>$ git config –global –list</td><td>检查输入的信息</td></tr><tr><td>7</td><td>$ git checkout master</td><td>获取对主分支所做的最新更改</td></tr><tr><td>8</td><td>$ git pull origin <strong>NAME-OF-BRANCH</strong> -u</td><td>获取工作目录的最新更改(<strong><code>NAME-OF-BRANCH</code>可以是’master’或任何其他现有的分支</strong>)</td></tr><tr><td>9</td><td>$ git checkout -b branch-name</td><td>创建一个新的分支</td></tr><tr><td>10</td><td>$git clone 项目的 ssh 地址</td><td>克隆项目到本地</td></tr></tbody></table><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>Git（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1] 也是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git 的作用是用于管理项目的源代码<br>它主要用于管理 开发环境(Dev)下的项目代码</p><p>市面上主要有两类源代码管理工具</p><ol><li>集中式代码管理工具 (svn)</li><li>分布式代码管理工具 (git)</li></ol><p>官网<br><a href="https://git-scm.com/">https://git-scm.com/</a><br>git 是一个跨平台的项目管理工具 可以运行在 Windows Linux Unix OSX</p><h3 id="git-与-github"><a href="#git-与-github" class="headerlink" title="git 与 github"></a>git 与 github</h3><p>git 是目前世界上最先进分布式的版本控制系统<br>github 是一个仓库</p><h3 id="git-基本操作"><a href="#git-基本操作" class="headerlink" title="git 基本操作"></a>git 基本操作</h3><h4 id="全局用户配置"><a href="#全局用户配置" class="headerlink" title="全局用户配置"></a>全局用户配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 每台计算机只需要执行一次配置</span><br>$ git config --global user.name <span class="hljs-string">&#x27;li xxx&#x27;</span><br>$ git config --global user.email <span class="hljs-string">&#x27;xxx@163.com&#x27;</span><br></code></pre></td></tr></table></figure><ol><li>项目构建 在项目的根目录创建文件 (README.md .gitignore)</li><li>在 .gitignore 中 存放需要忽略的文件或目录 (不需要 git 管理的文件或目录)</li><li>在项目的根目录 执行 <code>$ git init</code> 进行仓库初始化操作</li><li>进行项目初始化 <code>$ npm init -y</code></li></ol><h4 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看状态   （查看文件是否被修改 被删除 或者添加）</span><br>$ git status<br><br><span class="hljs-comment"># 查看版本的差别</span><br>$ git diff<br><br><span class="hljs-comment"># 添加管理(将文件或目录添加到git本地仓库的暂存区)</span><br>$ git add filename    <span class="hljs-comment"># 添加文件到暂存区</span><br>$ git add .           <span class="hljs-comment"># 添加当前目录所有内容到暂存区</span><br>$ git add path/       <span class="hljs-comment"># 添加指定目录到暂存区</span><br>$ git add --all       <span class="hljs-comment"># 添加所有内容到暂存区</span><br><br><span class="hljs-comment"># 将文件移出暂存区</span><br>$ git <span class="hljs-built_in">rm</span> --cached filename<br><br><span class="hljs-comment"># 将暂存区的内容提交到本地仓库</span><br>$ git commit -m <span class="hljs-string">&#x27;message&#x27;</span>    //这里的message可以是版本号<br><br><span class="hljs-comment"># 查看提交日志</span><br>$ git <span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># 回退一个版本</span><br>$ git reset HEAD^<br><br><span class="hljs-comment"># 回退到指定版本</span><br>$ git reset --hard 提交记录的前6位<br><br><span class="hljs-comment"># 查看帮助</span><br>$ git --<span class="hljs-built_in">help</span><br><br><span class="hljs-comment"># 恢复文件</span><br>$ git checkout filename<br><br><span class="hljs-comment"># 查看所有历史版本</span><br>$ git reflog<br></code></pre></td></tr></table></figure><h4 id="分支相关操作"><a href="#分支相关操作" class="headerlink" title="分支相关操作"></a>分支相关操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看分支</span><br>$ git branch<br><br><span class="hljs-comment"># 创建分支</span><br>$ git branch 分支名<br><br><span class="hljs-comment"># 切换分支</span><br>$ git checkout 分支名  或者    git switch 分支名<br><br><span class="hljs-comment"># 创建并切换分支</span><br>$ git checkout -b 分支名<br><br><span class="hljs-comment"># 合并分支内容</span><br>$ git merge 分支名<br><br><span class="hljs-comment"># 删除分支</span><br>$ git branch -d 分支名<br><br><span class="hljs-comment"># 查看分支记录</span><br>$ git <span class="hljs-built_in">log</span> --graph --pretty=oneline<br><br><span class="hljs-comment"># 直接拉取数据到对应的分支</span><br>$ git pull origin master<br></code></pre></td></tr></table></figure><h4 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成密钥对 (公钥 / 私钥)</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&#x27;里面输入邮箱地址&#x27;</span><br><br><span class="hljs-comment"># 设置远程仓库地址</span><br>$ git remote add origin https://github.com/jxsrzj0325/suning.com.git<br><br><span class="hljs-comment"># 将本地仓库提交到远程仓库</span><br>$ git push -u origin master<br><br><span class="hljs-comment"># 查看所有源</span><br>$ git remote<br><br><span class="hljs-comment"># 查看源的路径</span><br>$ git remote get-url 名称<br><br><span class="hljs-comment"># 克隆仓库(下载 从无到有)</span><br>$ git <span class="hljs-built_in">clone</span> https://gitee.com/rootbk/suning.com.git<br><br><span class="hljs-comment"># 拉取(已有 更新)</span><br>$ git pull origin master<br></code></pre></td></tr></table></figure><h3 id="组员的流程-（刚拿到项目时）"><a href="#组员的流程-（刚拿到项目时）" class="headerlink" title="组员的流程 （刚拿到项目时）"></a>组员的流程 （刚拿到项目时）</h3><ol><li>git clone xxxxxxxx (获取克隆的地址)</li><li>git checkout -b 分支名 (创建并切换分支)</li><li>git add . (存储内容到暂存区)</li><li>git commit -m “xxx” (将暂存区的内容提交到本地仓库)</li><li>git push –set-upstream origin 分支名 第一次需要如此上传</li></ol><h3 id="组员的流程-（项目开始时）"><a href="#组员的流程-（项目开始时）" class="headerlink" title="组员的流程 （项目开始时）"></a>组员的流程 （项目开始时）</h3><ol><li>git pull origin master 将远程的 master 拉到自己的 master</li><li>git checkout 分支名 (切换回到自己的分支)</li><li>git merge master ( 将自己的 master 合并到自己的分支 让分支是最新的)</li><li>开始写代码 ing</li><li>git add . (存储内容到暂存区)</li><li>git commit -m “xxx2” (将暂存区的内容提交到本地仓库)</li><li>git pull origin master (将远程的最新的代码 拉到自己的分支)</li><li>可能需要解决冲突(如果解决了冲突，需要重新 add 和 commit)</li><li>git push (上传)</li></ol><h3 id="组长"><a href="#组长" class="headerlink" title="组长"></a>组长</h3><hr><p>​ git fetch –all （查看所有分支）</p><p>​ git checkout self （切换到相应组员分支）</p><p>​ 启动项目并检查</p><p>​ git checkout master （切换回主分支）</p><p>​ git merge self （将检查无误的组员分支合并到主分支）</p><p>​ git push (将本地的 master 推送到远程的 master)</p><hr><p>​ git checkout self</p><p>​ git pull (将远程的 self 拉到本地的 self)</p><p>​ 启动项目并检查</p><p>​ git checkout master</p><p>​ git merge self</p><p>​ git push (将本地的 master 推送到远程的 master)</p>]]></content>
    
    
    <categories>
      
      <category>gitlab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>判断密码强度</title>
    <link href="/2022/09/06/%E3%80%90%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E3%80%91%E2%80%94%E2%80%94%E5%88%A4%E6%96%AD%E5%AF%86%E7%A0%81%E5%BC%BA%E5%BA%A6%EF%BC%88%E7%AE%80%E6%98%93%E7%89%88%EF%BC%89/"/>
    <url>/2022/09/06/%E3%80%90%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E3%80%91%E2%80%94%E2%80%94%E5%88%A4%E6%96%AD%E5%AF%86%E7%A0%81%E5%BC%BA%E5%BA%A6%EF%BC%88%E7%AE%80%E6%98%93%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="【前端面试题】——判断密码强度（简易版）"><a href="#【前端面试题】——判断密码强度（简易版）" class="headerlink" title="【前端面试题】——判断密码强度（简易版）"></a>【前端面试题】——判断密码强度（简易版）</h1><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;massge1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">     <span class="hljs-keyword">let</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input&quot;</span>);</span><br><span class="language-javascript">     <span class="hljs-keyword">let</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;massge1&quot;</span>);</span><br><span class="language-javascript">     input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;input&quot;</span>, fn);</span><br><span class="language-javascript">     <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> reg = [<span class="hljs-regexp">/\d+/g</span>, <span class="hljs-regexp">/[a-z]+/g</span>, <span class="hljs-regexp">/[A-Z]+/g</span>, <span class="hljs-regexp">/[^A-z0-9]+/g</span>, <span class="hljs-regexp">/^.&#123;8,&#125;$/</span>]; <span class="hljs-comment">//验证密码的正则数组</span></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> res = reg.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">el</span>) =&gt;</span> el.<span class="hljs-title function_">test</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)); <span class="hljs-comment">//将判断结果组成新数组，5个布尔值</span></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> len = res.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">//删除最后一位布尔结果，返回给len，此时res数组只有4个布尔值</span></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> count = res.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b); <span class="hljs-comment">//将布尔值相加，求得true的数量，布尔值相加自动转成数字</span></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> str = &#123;</span><br><span class="language-javascript">         <span class="hljs-number">1</span>: &#123;</span><br><span class="language-javascript">           <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;密码必须包含,大小写字母,数字,特殊符号中的至少两种类型&quot;</span>,</span><br><span class="language-javascript">           <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>,</span><br><span class="language-javascript">         &#125;,</span><br><span class="language-javascript">         <span class="hljs-number">2</span>: &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;弱&quot;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span> &#125;,</span><br><span class="language-javascript">         <span class="hljs-number">3</span>: &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;中&quot;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;yellow&quot;</span> &#125;,</span><br><span class="language-javascript">         <span class="hljs-number">4</span>: &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;强&quot;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;green&quot;</span> &#125;,</span><br><span class="language-javascript">       &#125;; <span class="hljs-comment">//创建内容对象</span></span><br><span class="language-javascript">       <span class="hljs-keyword">if</span> (len) &#123;  <span class="hljs-comment">// 满足8位数后判断密码强度</span></span><br><span class="language-javascript">         span.<span class="hljs-property">textContent</span> = str[count].<span class="hljs-property">message</span>; <span class="hljs-comment">//根据输入的内容判断内容是否符合</span></span><br><span class="language-javascript">         span.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = str[count].<span class="hljs-property">color</span>;</span><br><span class="language-javascript">       &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">         span.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;密码长度需要8位&quot;</span>;</span><br><span class="language-javascript">         span.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><img src="https://img1.imgtp.com/2022/09/06/ZjAZ6Gdq.png" /><h3 id="ps"><a href="#ps" class="headerlink" title="ps:"></a><strong>ps:</strong></h3><p><strong>这只是简易版，写得不好，或者需要补充的地方，请大佬们在评论区指出</strong>😊</p>]]></content>
    
    
    <categories>
      
      <category>js面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单的数据转换(二)</title>
    <link href="/2022/09/03/%E3%80%90%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E3%80%91%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E4%BA%8C/"/>
    <url>/2022/09/03/%E3%80%90%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E3%80%91%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="【前端面试题】——数据转换二"><a href="#【前端面试题】——数据转换二" class="headerlink" title="【前端面试题】——数据转换二"></a>【前端面试题】——数据转换二</h1><h4 id="初始数据："><a href="#初始数据：" class="headerlink" title="初始数据："></a><strong>初始数据：</strong></h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">const data = <span class="hljs-punctuation">&#123;</span> a<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> b<span class="hljs-punctuation">:</span> <span class="hljs-number">3</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> c<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> d<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span>;<br></code></pre></td></tr></table></figure><p><strong>转换成</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">const data = <span class="hljs-punctuation">&#123;</span>a.b<span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> c<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> d<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">result</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(); <span class="hljs-comment">// 创建Map,用来存放处理的数据</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-comment">// 开始遍历初始对象</span><br>    <span class="hljs-keyword">if</span> (obj[key].<span class="hljs-property">constructor</span>.<span class="hljs-property">name</span> === <span class="hljs-string">&quot;Object&quot;</span>) &#123;<br>      <span class="hljs-comment">//如果对象里有对象类型，开始数据转换后存放进map对象</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j <span class="hljs-keyword">in</span> obj[key]) &#123;<br>        res.<span class="hljs-title function_">set</span>(key + <span class="hljs-string">&quot;.&quot;</span> + j, obj[key][j]); <span class="hljs-comment">// 用new Map().set可以存储数据</span><br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj[key])) &#123;<br>      <span class="hljs-comment">// 同理，判断有木有数组类型的，有就进行数据操作</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> obj[key]) &#123;<br>        res.<span class="hljs-title function_">set</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>[<span class="hljs-subst">$&#123;obj[key][<span class="hljs-number">0</span>]&#125;</span>]`</span>, obj[key][<span class="hljs-number">1</span>]); <span class="hljs-comment">//存放进Map对象</span><br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.<span class="hljs-title function_">set</span>(key, obj[key]); <span class="hljs-comment">// 啥都没匹配到的数据，原封不动存入</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">let</span> obj2 = &#123;&#125;; <span class="hljs-comment">// 创建一个空对象</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> res) &#123;<br>    <span class="hljs-comment">//Map对象转换成普通对象,Map有iterator迭代器，可以用for of 遍历 [key,value]</span><br>    obj2[key] = value; <span class="hljs-comment">// 存放进普通对象，实现转换</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> obj2; <span class="hljs-comment">// 最后进行输出</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">result</span>(data2)); <span class="hljs-comment">// &#123;a.b: 3, c: 10, d[1]: 8&#125;</span><br></code></pre></td></tr></table></figure><p><strong>ps:</strong></p><p><strong>这只是简易版，还有很多判断没有加上，写得不好，或者需要补充的地方，请大佬们在评论区指出</strong>😊</p>]]></content>
    
    
    <categories>
      
      <category>js面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单的数据转换</title>
    <link href="/2022/09/01/%E3%80%90%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E3%80%91%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/"/>
    <url>/2022/09/01/%E3%80%90%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E3%80%91%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="【前端面试题】——数据转换"><a href="#【前端面试题】——数据转换" class="headerlink" title="【前端面试题】——数据转换"></a>【前端面试题】——数据转换</h1><h4 id="初始数据："><a href="#初始数据：" class="headerlink" title="初始数据："></a><strong>初始数据：</strong></h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">const data = <span class="hljs-punctuation">[</span><br>       <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小才&quot;</span><span class="hljs-punctuation">,</span> type<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小俞&quot;</span><span class="hljs-punctuation">,</span> type<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;animal&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小草&quot;</span><span class="hljs-punctuation">,</span> type<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4&quot;</span><span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小马&quot;</span><span class="hljs-punctuation">,</span> type<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5&quot;</span><span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小王&quot;</span><span class="hljs-punctuation">,</span> type<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;animal&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-punctuation">&#123;</span> id<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6&quot;</span><span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小丽&quot;</span><span class="hljs-punctuation">,</span> type<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haha&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-punctuation">]</span>;<br></code></pre></td></tr></table></figure><p><strong>转换成</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">const data = <span class="hljs-punctuation">[</span><br>  fruit<span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">:</span>&#x27;<span class="hljs-number">1</span>&#x27;<span class="hljs-punctuation">,</span>name<span class="hljs-punctuation">:</span>&#x27;小才&#x27;<span class="hljs-punctuation">&#125;</span>，<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">:</span>&#x27;<span class="hljs-number">3</span>&#x27;<span class="hljs-punctuation">,</span>name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小俞&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">:</span>&#x27;<span class="hljs-number">4</span>&#x27;<span class="hljs-punctuation">,</span>name<span class="hljs-punctuation">:</span> &#x27;小马&#x27;<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  animal<span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">:</span>&#x27;<span class="hljs-number">2</span>&#x27;<span class="hljs-punctuation">,</span>name<span class="hljs-punctuation">:</span>&#x27;小俞&#x27;<span class="hljs-punctuation">&#125;</span>，<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">:</span>&#x27;<span class="hljs-number">5</span>&#x27;<span class="hljs-punctuation">,</span>name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小王&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  haha<span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">:</span>&#x27;<span class="hljs-number">6</span>&#x27;<span class="hljs-punctuation">,</span>name<span class="hljs-punctuation">:</span>&#x27;小丽&#x27;<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建数据转换成函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">alterData</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-comment">// 首先声明两个变量，当容器</span><br>  <span class="hljs-keyword">let</span> res = [];<br>  <span class="hljs-keyword">let</span> obj = &#123;&#125;;<br>  <span class="hljs-comment">// 在确保data数据是数组类型的情况下，在此我先不判断了,需要可以isArray判断下</span><br>  <span class="hljs-comment">// 开始第一层解析，用数组的ruduce方法</span><br>  obj = data.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">object, item</span>) =&gt;</span> &#123;<br>    object[item.<span class="hljs-property">type</span>] = res; <span class="hljs-comment">// 让object的key都是data里每个item的type值</span><br>    <span class="hljs-keyword">return</span> object; <span class="hljs-comment">// 记得输出 object 对象</span><br>  &#125;, &#123;&#125;);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">// 打印下， &#123; fruit:[],animal:[], haha:[] &#125;  初始容器搭建好了，只要存值就好了</span><br>  <span class="hljs-comment">// 利用 for in 遍历 obj对象,通过filter方法筛选出原始数据data中type值与obj的key相等的对象，存入res数组中</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    res = data<br>      .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> item.<span class="hljs-property">type</span> === key;<br>      &#125;)<br>      .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 遍历好就已经完成了归类，再用map方法遍历数组，用delete删除对象里的type属性</span><br>        <span class="hljs-keyword">delete</span> item.<span class="hljs-property">type</span>;<br>        <span class="hljs-keyword">return</span> item;<br>      &#125;);<br>    obj[key] = res; <span class="hljs-comment">// 大功告成</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> obj; <span class="hljs-comment">// 输出最后的结果</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">alterData</span>(data)); <span class="hljs-comment">// 打印结果</span><br></code></pre></td></tr></table></figure><p><strong>ps:</strong></p><p><strong>这只是简易版，还有很多判断没有加上，写得不好，或者需要补充的地方，请大佬们在评论区指出</strong>😊</p>]]></content>
    
    
    <categories>
      
      <category>js面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>axios</title>
    <link href="/2022/08/30/%E6%B5%85%E8%B0%88%20axios/"/>
    <url>/2022/08/30/%E6%B5%85%E8%B0%88%20axios/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="浅谈-axios"><a href="#浅谈-axios" class="headerlink" title="浅谈 axios"></a><strong>浅谈 axios</strong></h1><hr><h1 id="什么是-axios？"><a href="#什么是-axios？" class="headerlink" title="什么是 axios？"></a>什么是 axios？</h1><hr><p>Axios 是一个基于 promise 的 异步 ajax 请求库，前端最流行的 ajax 请求库。简单的讲就是可以发送 get、post 请求，负责与后端交互。<br>Vue、React 等框架的出现，促使了 Axios 轻量级库的出现， react/vue 官方都推荐使用 axios 发 ajax 请求。<br>因为 Vue 等，不需要操作 Dom，所以不需要引入 Jquery.js 了</p><hr><h1 id="axios-的特点？"><a href="#axios-的特点？" class="headerlink" title="axios 的特点？"></a>axios 的特点？</h1><hr><ol><li><p>可以<strong>转换请求数据和响应数据</strong>，并对响应回来的内容自动转换成 JSON 类型的数据</p></li><li><p>Axios 是一个<strong>基于 promise 的异步 ajax 请求库</strong>，支持 promise 所有的 API</p></li><li><p><strong>拦截请求和响应</strong>（就是前端发送请求前，可以设置自动拦截请求，相当于给请求加条件）</p></li><li><p>axios.all(promises): <strong>批量发送多个（异步）请求</strong></p></li><li><p><strong>axios 在览器端/node 端都可以使用</strong></p></li><li><p><strong>安全性更高，客户端支持防御 XSRF（</strong>跨站请求伪造<strong>）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//就是让你的每个请求都带一个从cookie中拿到的key, 根据浏览器同源策略，假冒的网站是拿不到你cookie中得key的，这样，后台就可以轻松辨别出这个请求是否是用户在假冒网站上的误导输入，从而采取正确的策略</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="axios-常用的两种请求方式"><a href="#axios-常用的两种请求方式" class="headerlink" title="axios 常用的两种请求方式"></a>axios 常用的两种请求方式</h1><hr><ol><li><p><strong>axios({method:’方法’，url: ‘’baseURL: ‘’，data:{name: ‘cc’, sex: ‘man’} })</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/login&quot;</span>,<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cc&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;man&quot;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p><strong>axios.方法名(url, {name:’cc’, sex:’man’})</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">get</span>(url[, config])   <span class="hljs-comment">//get请求 用于列表和信息查询</span><br>axios.<span class="hljs-title function_">delete</span>(url[, config])  <span class="hljs-comment">//删除</span><br>axios.<span class="hljs-title function_">post</span>(url[, data[, config]])  <span class="hljs-comment">//post请求用与提交数据，添加信息</span><br>axios.<span class="hljs-title function_">put</span>(url[, data[, config]])  <span class="hljs-comment">//更新操作</span><br><br><span class="hljs-comment">//例如</span><br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;man&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure></li></ol><h1 id="说下你了解的-axios-相关配置属性？"><a href="#说下你了解的-axios-相关配置属性？" class="headerlink" title="说下你了解的 axios 相关配置属性？"></a>说下你了解的 axios 相关配置属性？</h1><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">`url`</span>是用于请求的服务器<span class="hljs-variable constant_">URL</span> ；<br><span class="hljs-string">`method`</span>是创建请求时使用的方法,默认是get ；<br><span class="hljs-string">`baseURL`</span>将自动加在<span class="hljs-string">`url`</span>前面，除非<span class="hljs-string">`url`</span>是一个绝对<span class="hljs-variable constant_">URL</span>。它可以通过设置一个<span class="hljs-string">`baseURL`</span>便于为axios实例的方法传递相对<span class="hljs-variable constant_">URL</span> ；<br><span class="hljs-string">`headers`</span>是即将被发送的自定义请求头；<br><span class="hljs-string">`params`</span>是即将与请求一起发送的<span class="hljs-variable constant_">URL</span>参数，必须是一个无格式对象。<span class="hljs-attr">params</span>:&#123;<span class="hljs-attr">ID</span>:<span class="hljs-number">12345</span>&#125;。<br></code></pre></td></tr></table></figure><h1 id="axios-拦截器-【-在请求或响应被-then-或-catch-处理前拦截它们-】"><a href="#axios-拦截器-【-在请求或响应被-then-或-catch-处理前拦截它们-】" class="headerlink" title="axios 拦截器 【 在请求或响应被 then 或 catch 处理前拦截它们 】"></a>axios 拦截器 【 在请求或响应被 then 或 catch 处理前拦截它们 】</h1><hr><h4 id="拦截器分为请求拦截器和响应拦截器："><a href="#拦截器分为请求拦截器和响应拦截器：" class="headerlink" title="拦截器分为请求拦截器和响应拦截器："></a>拦截器分为请求拦截器和响应拦截器：</h4><ul><li><strong>请求拦截器</strong>（interceptors.requst）是指可以<strong>拦截每次或指定 HTTP 请求，并可修改配置项</strong></li><li><strong>响应拦截器</strong>（interceptors.response）可以在每次 HTTP 请求后拦截住每次或指定 HTTP 请求，并可<strong>修改返回结果项</strong></li></ul><h4 id="先创建实例："><a href="#先创建实例：" class="headerlink" title="先创建实例："></a>先创建实例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> axios from <span class="hljs-string">&quot;axios&quot;</span>;<br><br><span class="hljs-comment">// todo 创建实例</span><br><span class="hljs-type">const</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> axios.create(&#123;<br>  baseURL: <span class="hljs-string">&quot;http://www.pudge.wang:3080/api&quot;</span>,<br>  timeout: <span class="hljs-number">10000</span>, <span class="hljs-comment">// 超时时间</span><br>  headers: &#123; <span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span> &#125;, <span class="hljs-comment">// 表单提交 form-data</span><br>  <span class="hljs-comment">// params: &#123;</span><br>  <span class="hljs-comment">//   // 只有get请求会来加params</span><br>  <span class="hljs-comment">//   // ID: 12345,</span><br>  <span class="hljs-comment">//   token: localStorage.getItem(&quot;token&quot;),</span><br>  <span class="hljs-comment">// &#125;,</span><br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="添加请求拦截器"><a href="#添加请求拦截器" class="headerlink" title="添加请求拦截器:"></a>添加请求拦截器:</h1><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// todo 添加请求拦截器</span><br>instance.interceptors.request.use(<br>  function (config) &#123;<br>    <span class="hljs-comment">// console.log(config);</span><br>    <span class="hljs-comment">// 在发送请求之前做些什么</span><br>    <span class="hljs-comment">// config.params.token = localStorage.getItem(&quot;token&quot;);</span><br><br>    <span class="hljs-comment">// 对一些特殊的接口做一些特殊的处理</span><br>    <span class="hljs-comment">// 一个项目很多的请求，绝大部分请求都是数据的请求，请求头application/json</span><br>    <span class="hljs-comment">// 偶尔有个别接口要做表单提交</span><br><br>    <span class="hljs-comment">// if (config.url === &quot;/upload&quot;) &#123;</span><br>    <span class="hljs-comment">//   config.headers = &#123; &quot;content-type&quot;: &quot;form-data&quot; &#125;;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  function (error) &#123;<br>    <span class="hljs-comment">// 对请求错误做些什么</span><br>    <span class="hljs-keyword">return</span> Promise.reject(error);<br>  &#125;<br>);<br><br></code></pre></td></tr></table></figure><h1 id="添加响应拦截器"><a href="#添加响应拦截器" class="headerlink" title="添加响应拦截器:"></a>添加响应拦截器:</h1><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// todo 添加响应拦截器</span><br>instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-comment">// 在刚刚得到数据的时候触发</span><br>    <span class="hljs-comment">// 对响应数据做点什么</span><br>    <span class="hljs-comment">// console.log(response);</span><br><br>    <span class="hljs-comment">// 404是没法判断</span><br>    <span class="hljs-keyword">if</span> (response.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>      <span class="hljs-keyword">return</span> response.<span class="hljs-property">data</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (response.<span class="hljs-property">status</span> === <span class="hljs-number">500</span>) &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;服务端错误&quot;</span>);<br>    &#125;<br>  &#125;,<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// 对响应错误做点什么</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h1 id="axios-简单封装"><a href="#axios-简单封装" class="headerlink" title="axios 简单封装"></a>axios 简单封装</h1><hr><h4 id="创建-http-js："><a href="#创建-http-js：" class="headerlink" title="创建 http.js："></a>创建 http.js：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> axios from <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-comment">// todo 创建实例</span><br><span class="hljs-type">const</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> axios.create(&#123;<br>  baseURL: <span class="hljs-string">&quot;http://www.pudge.wang:3080/api&quot;</span>,<br>  timeout: <span class="hljs-number">10000</span>, <span class="hljs-comment">// 超时时间</span><br>  headers: &#123; <span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span> &#125;, <span class="hljs-comment">// 表单提交 form-data</span><br>&#125;);<br><span class="hljs-type">const</span> <span class="hljs-variable">http</span> <span class="hljs-operator">=</span> &#123;<br>  get(url, params) &#123;<br>    <span class="hljs-keyword">return</span> instance<br>      .get(url, &#123; params &#125;)<br>      .then((res) =&gt; &#123;<br>        <span class="hljs-comment">// console.log(res);</span><br>        <span class="hljs-keyword">return</span> res;<br>      &#125;)<br>      .<span class="hljs-keyword">catch</span>((err) =&gt; &#123;<br>        alert(err.message);<br>      &#125;);<br>  &#125;,<br>&#125;;<br>export <span class="hljs-keyword">default</span> http;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>数据请求</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络请求</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小记【Redux异步库与模块化】</title>
    <link href="/2022/08/30/Redux%E5%BC%82%E6%AD%A5%E5%BA%93%E4%B8%8E%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%88Redux-saga)/"/>
    <url>/2022/08/30/Redux%E5%BC%82%E6%AD%A5%E5%BA%93%E4%B8%8E%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%88Redux-saga)/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Redux-异步库与模块化（Redux-saga"><a href="#Redux-异步库与模块化（Redux-saga" class="headerlink" title="Redux 异步库与模块化（Redux-saga)"></a><strong>Redux 异步库与模块化（Redux-saga)</strong></h1><hr><p><strong>安装初始化后创建 sagas.js 文件（负责协调那些复杂或者异步的操作）【使用了 generator 函数，redux-saga 让你可以用 同步的方式来写异步代码】</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; takeEvery, put, call &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux-saga/effects&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; ratedApi &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../../utils/api&quot;</span>;<br><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">addAction</span>(<span class="hljs-params">action</span>) &#123;<br>  <span class="hljs-comment">// todo put相当于组件的dispatch</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(action);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-title function_">put</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-attr">num</span>: action.<span class="hljs-property">num</span> &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">addload</span>(<span class="hljs-params">action</span>) &#123;<br>  <span class="hljs-comment">// todo put相当于组件的dispatch</span><br>  <span class="hljs-comment">// todo call做数据请求</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(action);<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">call</span>(ratedApi); <span class="hljs-comment">// 同await用法</span><br>  <span class="hljs-keyword">yield</span> <span class="hljs-title function_">put</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;load&quot;</span>, <span class="hljs-attr">payload</span>: res.<span class="hljs-property">result</span> &#125;);<br>&#125;<br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">mySaga</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// todo takeEvery接收两个参数</span><br>  <span class="hljs-comment">// todo 分配type值</span><br>  <span class="hljs-keyword">yield</span> <span class="hljs-title function_">takeEvery</span>(<span class="hljs-string">&quot;takeAdd&quot;</span>, addAction);<br>  <span class="hljs-keyword">yield</span> <span class="hljs-title function_">takeEvery</span>(<span class="hljs-string">&quot;takeload&quot;</span>, addload);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> mySaga;<br></code></pre></td></tr></table></figure><p><strong>index.js 总输出文件：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; legacy_createStore <span class="hljs-keyword">as</span> createStore, applyMiddleware &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>;<br><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./reducer&quot;</span>;<br><span class="hljs-comment">// todo 引入saga</span><br><span class="hljs-keyword">import</span> createSagaMiddleware <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux-saga&quot;</span>;<br><span class="hljs-keyword">import</span> rootSaga <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./sagas&quot;</span>; <span class="hljs-comment">// 引入总的saga.js文件</span><br><span class="hljs-keyword">const</span> sagaMiddleware = <span class="hljs-title function_">createSagaMiddleware</span>(); <span class="hljs-comment">//创建中间件实例</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer, <span class="hljs-title function_">applyMiddleware</span>(sagaMiddleware)); <span class="hljs-comment">//当作第二个参数传入</span><br>sagaMiddleware.<span class="hljs-title function_">run</span>(rootSaga); <span class="hljs-comment">//运行起来</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><p>组件的使用：【useSelector, useDispatch】代替【connect 中间件】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// todo useSelector, useDispatch用于将仓库的属性和方法映射到组件</span><br><span class="hljs-keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">city</span>.<span class="hljs-property">count</span>); <span class="hljs-comment">//调用仓库的数据</span><br><span class="hljs-keyword">const</span> ratedList = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">city</span>.<span class="hljs-property">ratedList</span>); <span class="hljs-comment">//调用仓库的数据</span><br><span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>(); <span class="hljs-comment">// 调用仓库的方法</span><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;takeLoad&quot;</span>, <span class="hljs-attr">payload</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">3</span> &#125; &#125;);<br>  <span class="hljs-comment">// eslint-disable-next-line []报错加上</span><br>&#125;, [dispatch]);<br></code></pre></td></tr></table></figure><h1 id="Redux-模块化"><a href="#Redux-模块化" class="headerlink" title="Redux 模块化"></a>Redux 模块化</h1><hr><p>将大的 store 仓库拆分多个小仓库，每个需要的子组件内部都可以创建 store 小仓库【只需创建 reducer 函数和 saga.js 异步文件】，再合并到总的 reducer 和 rootSaga</p><p><font color='Salmon '>combineReducers    用来合并 reducer</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; combineReducers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>;<br><br><span class="hljs-keyword">import</span> cityReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/city/store/reducer&quot;</span>;<br><br><span class="hljs-keyword">const</span> reducer = <span class="hljs-title function_">combineReducers</span>(&#123;<br>  <span class="hljs-attr">city</span>: cityReducer,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> reducer;<br></code></pre></td></tr></table></figure><p><font color='Salmon '>all 用于合并 sagas</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; all &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux-saga/effects&quot;</span>;<br><br><span class="hljs-keyword">import</span> citySaga <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/city/store/sagas&quot;</span>;<br><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">rootSaga</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-title function_">all</span>([<span class="hljs-title function_">citySaga</span>()]);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> rootSaga;<br></code></pre></td></tr></table></figure><p><strong>子组件使用: 【同 vuex 的模块化一样，使用数据需要加上仓库名，方法不需要】</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> ratedList = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> state.<span class="hljs-property">city</span>.<span class="hljs-property">ratedList</span>; <span class="hljs-comment">// 加上仓库名称</span><br>&#125;);<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小记【immutable与hooks】</title>
    <link href="/2022/08/30/React%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%20%E5%85%AD%20)%20%E3%80%90%20immutable%20%E4%B8%8E%20hooks%20%E3%80%91/"/>
    <url>/2022/08/30/React%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%20%E5%85%AD%20)%20%E3%80%90%20immutable%20%E4%B8%8E%20hooks%20%E3%80%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="React-学习总结-六-【-immutable-与-hooks-】"><a href="#React-学习总结-六-【-immutable-与-hooks-】" class="headerlink" title="React 学习总结( 六 ) 【 immutable 与 hooks 】"></a><strong>React 学习总结( 六 ) 【 immutable 与 hooks 】</strong></h1><hr><h1 id="immutable"><a href="#immutable" class="headerlink" title="immutable"></a><strong>immutable</strong></h1><hr><h4 id="一、什么是-immutable？"><a href="#一、什么是-immutable？" class="headerlink" title="一、什么是 immutable？"></a>一、什么是 immutable？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">immutable，译为<span class="hljs-string">&quot;不可改变的&quot;</span>，是一种持久化数据。它有一旦被创建就不会被修改的特性。<br>当你修改 immutable 对象的时候返回新的 immutable。但是原数据不会改变。<br></code></pre></td></tr></table></figure><h4 id="二、为什么要使用-immutable？"><a href="#二、为什么要使用-immutable？" class="headerlink" title="二、为什么要使用 immutable？"></a>二、为什么要使用 immutable？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//   用处可大了。进行 js 对象的深拷贝对性能的消耗太大时（使用了递归），例如 Redux 中的深拷贝，就需要用到 immutable 来提升性能，从而避免牵一发而动全身。</span><br><span class="hljs-comment">//   当你使用 immutable 后再进行深拷贝的时候，只会拷贝你改变的节点，从而达到了节省性能的目的。</span><br></code></pre></td></tr></table></figure><p><font color='Salmon '><strong>总结：immutable 的不可变性让纯函数更强大，每次都返回新的 immutable 的特性让程序员可以对其进行链式操作，用起来更方便</strong></font></p><h4 id="三、immutable-的简单实用"><a href="#三、immutable-的简单实用" class="headerlink" title="三、immutable 的简单实用"></a>三、immutable 的简单实用</h4><ul><li><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">安装： npm i immutable -S  <span class="hljs-comment">// yarn add immutable</span><br><span class="hljs-comment">// 使用时解构方法</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Map</span>, <span class="hljs-title class_">List</span>, <span class="hljs-title class_">Seq</span>, fromJS, <span class="hljs-title class_">Range</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;immutable&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><h4 id="Map-数据结构"><a href="#Map-数据结构" class="headerlink" title="Map 数据结构"></a>Map 数据结构</h4><p><strong>immutable.Map()<strong>：创建一个类似于 js 中的对象的</strong>Map 对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> map = immutable.<span class="hljs-title class_">Map</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Apple&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map); <span class="hljs-comment">// Map &#123; &quot;name&quot;:&quot;Apple&quot;, &quot;age&quot;:19, &quot;sex&quot;:&quot;男&quot; &#125;</span><br></code></pre></td></tr></table></figure><p><strong>操作 Map：</strong></p><ol><li><p>map.set 【增加数据】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> map1 = map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;sign&quot;</span>, <span class="hljs-string">&quot;呜呜&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map1); <span class="hljs-comment">// Map &#123; &quot;name&quot;:&quot;Apple&quot;, &quot;age&quot;:19, &quot;sex&quot;:&quot;男&quot;, &quot;sign&quot;:&quot;呜呜&quot; &#125;</span><br></code></pre></td></tr></table></figure></li><li><p>map.setIn 【setIn 可以深层操作，第一个参数是个数组，数组中第一个元素是操作的对象的 key 值，第二个元素是 value 值】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> map1 = map.<span class="hljs-title function_">setIn</span>([<span class="hljs-string">&quot;obj&quot;</span>, <span class="hljs-string">&quot;xxx&quot;</span>], <span class="hljs-string">&quot;xxx&quot;</span>); <span class="hljs-comment">// 深层的set</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map1); <span class="hljs-comment">// Map &#123; &quot;name&quot;:&quot;Apple&quot;, &quot;age&quot;:19, &quot;sex&quot;:&quot;男&quot;, &quot;obj&quot;:&#123; &quot;xxx&quot;:&quot;xxx&quot; &#125; &#125;</span><br></code></pre></td></tr></table></figure></li><li><p>map.delete &amp;&amp; map.deleteIn【删除】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">map.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&quot;a&quot;</span>); <span class="hljs-comment">// 删除 a 的值</span><br>map.<span class="hljs-title function_">deleteIn</span>([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>]); <span class="hljs-comment">// 删除 a 中 b 的值</span><br></code></pre></td></tr></table></figure></li><li><p>改</p><p>map.update()</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">参数1：需要更新的值<br>参数2：回调函数，返回一个更新后的值<br></code></pre></td></tr></table></figure><p>map.updateIn() 深层更新</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">参数1：一个数组，第一个元素是父元素，第二个元素为目标子元素<br>参数2：回调函数，参数为目标值的值，返回值为一个更新后的值<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> map1 = map.<span class="hljs-title function_">update</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + <span class="hljs-number">1</span>;<br>&#125;);<br><span class="hljs-keyword">let</span> map2 = map.<span class="hljs-title function_">updateIn</span>([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + <span class="hljs-number">1</span>;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>map.get() 【 查取值】 【 返回的不是 immutable 对象了 而是里边定义的正常值 】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;a&quot;</span>); <span class="hljs-comment">// &#123;a:1&#125; 得到1。</span><br>map.<span class="hljs-title function_">getIn</span>([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>]); <span class="hljs-comment">// &#123;a:&#123;b:2&#125;&#125; 得到2。</span><br></code></pre></td></tr></table></figure></li></ol></li><li><h4 id="List-数据结构："><a href="#List-数据结构：" class="headerlink" title="List 数据结构："></a>List 数据结构：</h4><p><strong>immutable.List()<strong>：创建一个类似于 js 中的数组的</strong>List 对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java">  <span class="hljs-comment">// 创建immutable数组</span><br>  <span class="hljs-type">const</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> List([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]); <span class="hljs-comment">// 创建</span><br>  <span class="hljs-type">const</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> list1.push(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);  <span class="hljs-comment">// 增加</span><br>  <span class="hljs-type">const</span> <span class="hljs-variable">list3</span> <span class="hljs-operator">=</span> list2.unshift(<span class="hljs-number">0</span>); <span class="hljs-comment">//向前增加</span><br>  <span class="hljs-type">const</span> <span class="hljs-variable">list4</span> <span class="hljs-operator">=</span> list1.concat(list2, list3); <span class="hljs-comment">// 合并</span><br>  console.log(list1.size === <span class="hljs-number">2</span>);<br>  console.log(list2.size === <span class="hljs-number">5</span>);<br>  console.log(list3.size === <span class="hljs-number">6</span>);<br>  console.log(list4.size === <span class="hljs-number">13</span>);<br><span class="hljs-comment">// 删</span><br>list.splice(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><span class="hljs-comment">// 改</span><br>list.splice(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)<br><span class="hljs-comment">// 查</span><br>list.getIn([<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure></li><li><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><p>**merge()**：合并 map 对象</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-keyword">let</span> <span class="hljs-attr">newMap</span> = <span class="hljs-built_in">map</span>.merge(map1)<br></code></pre></td></tr></table></figure><p>**toObject()**：immutable 的 map 对象转 JS 对象</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">浅转换，只转换最外层<br></code></pre></td></tr></table></figure><p>**toArray()**：immutable 的 list 对象转 JS 数组</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">浅转换，只转换最外层<br></code></pre></td></tr></table></figure><p>**toJS()**：immutable 的 map 对象/list 对象 转 JS 对象/JS 数组</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">深转换，全部转换，更耗费性能<br></code></pre></td></tr></table></figure><p>**Map()**：JS 对象或数组转换成 immutable</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">浅转换，只转换最外层<br></code></pre></td></tr></table></figure><p>**fromJS()**：JS 对象/JS 数组 转换成 immutable</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">深转换，全部转换，更耗费性能。<br></code></pre></td></tr></table></figure><p><strong>Seq():既可以生成 immutable 对象，也可以生成 immutable 数组,是有惰性的(可以从结果出发)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> oddSquares = <span class="hljs-title class_">Seq</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<br>  .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;filter x:&quot;</span> + x);<br>    <span class="hljs-keyword">return</span> x % <span class="hljs-number">2</span> !== <span class="hljs-number">0</span>;<br>  &#125;)<br>  .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;map x:&quot;</span> + x);<br>    <span class="hljs-keyword">return</span> x * x;<br>  &#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oddSquares.<span class="hljs-title function_">get</span>(<span class="hljs-number">1</span>));<br><span class="hljs-number">9</span>;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> aRange = <span class="hljs-title class_">Range</span>(<span class="hljs-number">1</span>, <span class="hljs-title class_">Infinity</span>) <span class="hljs-comment">// 滑块</span><br>    .<span class="hljs-title function_">skip</span>(<span class="hljs-number">1000</span>) <span class="hljs-comment">// 略过</span><br>    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">n</span>) =&gt;</span> -n)<br>    .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">n</span>) =&gt;</span> n % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>)<br>    .<span class="hljs-title function_">take</span>(<span class="hljs-number">2</span>)<br>    .<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">r, n</span>) =&gt;</span> r * n, <span class="hljs-number">1</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(aRange);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>immutable<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="hooks-【重点】"><a href="#hooks-【重点】" class="headerlink" title="hooks 【重点】"></a><strong>hooks 【重点】</strong></h1><hr><h4 id="useState-【让函数组件可以定义自己的-state】"><a href="#useState-【让函数组件可以定义自己的-state】" class="headerlink" title="useState 【让函数组件可以定义自己的 state】"></a>useState 【让函数组件可以定义自己的 state】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// todo hooks只能给函数组件用</span><br><span class="hljs-comment">// todo hooks可以在不增加组件树层级的情况下增加组件功能</span><br><span class="hljs-comment">// todo hooks可以增加代码可读性，将功能代码聚合，方便阅读维护</span><br><span class="hljs-comment">// todo hooks只能在函数组件的顶层调用</span><br><br><span class="hljs-comment">// todo useState是让函数组件可以定义自己的state</span><br><span class="hljs-comment">// todo useState调用会返回一个数组, 分别是变量和改变变量的方法</span><br><span class="hljs-comment">// todo useState需要接收一个参数，是变量的初始值</span><br><span class="hljs-comment">// todo useState改变数据是异步的</span><br></code></pre></td></tr></table></figure><h4 id="useEffect-噎-faiKs-【用于处理副作用，代替生命周期】"><a href="#useEffect-噎-faiKs-【用于处理副作用，代替生命周期】" class="headerlink" title="useEffect [ 噎 faiKs ]【用于处理副作用，代替生命周期】"></a>useEffect [ 噎 faiKs ]【用于处理副作用，代替生命周期】</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// todo useEffect没有返回值，里面需要传入一个函数作为参数</span><br><span class="hljs-comment">// todo 如果useEffect里面只传入了一个函数，相当于类组件的componentDidMount和componentDidUpdate</span><br><span class="hljs-comment">// todo useEffect还可以接收第二个参数，是一个数组（依赖数组）</span><br><span class="hljs-comment">// todo 如果第二个参数是空数组，相当于类组件的componentDidMount</span><br><span class="hljs-comment">// todo 如果第二个参数有内容，相当于vue的watch</span><br><span class="hljs-comment">// todo 如果第一个函数参数里面返回一个函数，相当于类组件的componentWillUnmount</span><br></code></pre></td></tr></table></figure><h4 id="useLayoutEffect-【跟-useEffect-类似，-同步执行副作用】"><a href="#useLayoutEffect-【跟-useEffect-类似，-同步执行副作用】" class="headerlink" title="useLayoutEffect 【跟 useEffect 类似， 同步执行副作用】"></a>useLayoutEffect 【跟 useEffect 类似， 同步执行副作用】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useLayoutEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// todo useLayoutEffect跟useEffect类似的，会在componentDidMount和componentDidUpdate之后同步调用,会阻塞代码执行, 优先于useEffect执行</span><br><span class="hljs-comment">// todo 只有当加载完毕以后需要改变dom样式的时候用，可以避免页面抖动</span><br><span class="hljs-comment">// todo 绝大部分情况下，推荐使用useEffect</span><br></code></pre></td></tr></table></figure><h4 id="memo-【高阶组件，给函数组件用的，作用和-PureComponent-完全相同】"><a href="#memo-【高阶组件，给函数组件用的，作用和-PureComponent-完全相同】" class="headerlink" title="memo 【高阶组件，给函数组件用的，作用和 PureComponent 完全相同】"></a>memo 【高阶组件，给函数组件用的，作用和 PureComponent 完全相同】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;child render&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>child组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="useCallback-【用于缓存函数】-【一般用在自定义事件】"><a href="#useCallback-【用于缓存函数】-【一般用在自定义事件】" class="headerlink" title="useCallback 【用于缓存函数】 【一般用在自定义事件】"></a>useCallback 【用于缓存函数】 【一般用在自定义事件】</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// todo 第一个参数是需要被缓存的函数，第二个参数是一个依赖数组</span><br><br><span class="hljs-comment">// todo 当有函数要作为自定义事件的时候，这个函数就需要加useCallback</span><br><br></code></pre></td></tr></table></figure><h4 id="useMemo-【当作-vue-的计算属性去理解，缓存的是函数的返回值】"><a href="#useMemo-【当作-vue-的计算属性去理解，缓存的是函数的返回值】" class="headerlink" title="useMemo 【当作 vue 的计算属性去理解，缓存的是函数的返回值】"></a>useMemo 【当作 vue 的计算属性去理解，缓存的是函数的返回值】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> oddArr = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item % <span class="hljs-number">2</span>);<br>&#125;, [arr]);<br></code></pre></td></tr></table></figure><h4 id="useCallback-与-useMemo-区别"><a href="#useCallback-与-useMemo-区别" class="headerlink" title="useCallback 与 useMemo 区别"></a>useCallback 与 useMemo 区别</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&#x27; useCallback和useMemo的区别</span><br><span class="hljs-string">// todo useCallback是真正的缓存函数</span><br><span class="hljs-string">// todo useMemo缓存的是函数的返回值</span><br><span class="hljs-string">&#x27;</span> useCallback和useMemo能否相互转换<br><span class="hljs-comment">// todo 只有useCallback可以写成useMemo，将之前的函数当作返回值，柯里化函数</span><br> <span class="hljs-type">const</span> <span class="hljs-variable">fn2</span> <span class="hljs-operator">=</span> useMemo(() =&gt; &#123;<br>    <span class="hljs-keyword">return</span> () =&gt; &#123;<br>      console.log(<span class="hljs-string">&quot;do something&quot;</span>);<br>    &#125;;<br>  &#125;, []);<br></code></pre></td></tr></table></figure><h4 id="useContext-【代替-Consumer-的作用】"><a href="#useContext-【代替-Consumer-的作用】" class="headerlink" title="useContext 【代替 Consumer 的作用】"></a>useContext 【代替 Consumer 的作用】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; createContext, useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// todo useContext只能代替Consumer的作用</span><br><span class="hljs-comment">// todo 里面需要传入context对象, 返回value对象</span><br><br><span class="hljs-keyword">const</span> context1 = <span class="hljs-title function_">createContext</span>();<br><span class="hljs-keyword">const</span> context2 = <span class="hljs-title function_">createContext</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child2</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; name &#125; = <span class="hljs-title function_">useContext</span>(context1); <span class="hljs-comment">// 传入context对象, 返回value对象 name</span><br>  <span class="hljs-keyword">const</span> &#123; nick &#125; = <span class="hljs-title function_">useContext</span>(context2); <span class="hljs-comment">// 传入context对象, 返回value对象 nick</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      child2组件 - &#123;name&#125; - &#123;nick&#125;</span><br><span class="language-xml">      &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">context1.Consumer</span>&gt;</span></span><br><span class="language-xml">        &#123;(value) =&gt; (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            &#123;value.name&#125; -&#123;&quot; &quot;&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">context2.Consumer</span>&gt;</span></span><br><span class="language-xml">              &#123;(val) =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;val.nick&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">context2.Consumer</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">context1.Consumer</span>&gt;</span> */&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="useReducer-【redux-的阉割版，只能做同步】【返回数组】"><a href="#useReducer-【redux-的阉割版，只能做同步】【返回数组】" class="headerlink" title="useReducer 【redux 的阉割版，只能做同步】【返回数组】"></a>useReducer 【redux 的阉割版，只能做同步】【返回数组】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> defaultState = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">state, action</span>) =&gt; &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;add&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>,<br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;minus&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> - <span class="hljs-number">1</span>,<br>      &#125;;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// todo useReducer需要传入两个参数</span><br>  <span class="hljs-comment">// todo 返回值是一个数组</span><br>  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, defaultState);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>useReducer<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;state.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;add&quot; &#125;)&#125;&gt;btn<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><h4 id="useRef-【来定义变量，可以绕过捕获值的特性】【变量是没有响应式】"><a href="#useRef-【来定义变量，可以绕过捕获值的特性】【变量是没有响应式】" class="headerlink" title="useRef 【来定义变量，可以绕过捕获值的特性】【变量是没有响应式】"></a>useRef 【来定义变量，可以绕过捕获值的特性】【变量是没有响应式】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// todo 还可以用useRef来定义变量，可以绕过捕获值的特性</span><br><span class="hljs-comment">// todo 用useRef定义的变量是没有响应式</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">useRef</span>(<span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">showCount</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;count: &quot;</span> + count.<span class="hljs-property">current</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params">number</span>) =&gt; &#123;<br>    count.<span class="hljs-property">current</span> = count.<span class="hljs-property">current</span> + number;<br>    <span class="hljs-built_in">setTimeout</span>(showCount, <span class="hljs-number">2000</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You clicked &#123;count.current&#125; times<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleClick(1)&#125;&gt;增加 count<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleClick(-1)&#125;&gt;减少 count<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><h4 id="useImperativeHandle-【用于让父组件获取子组件内的索引】"><a href="#useImperativeHandle-【用于让父组件获取子组件内的索引】" class="headerlink" title="useImperativeHandle 【用于让父组件获取子组件内的索引】"></a>useImperativeHandle 【用于让父组件获取子组件内的索引】</h4><h4 id="forwardRef-【创建一个-React-组件-可以把上级-ref-转发-传递-给下级组件-继而可以在上级组件中获取下级目标】"><a href="#forwardRef-【创建一个-React-组件-可以把上级-ref-转发-传递-给下级组件-继而可以在上级组件中获取下级目标】" class="headerlink" title="forwardRef() 【创建一个 React 组件, 可以把上级 ref 转发(传递) 给下级组件, 继而可以在上级组件中获取下级目标】"></a>forwardRef() 【创建一个 React 组件, 可以把上级 ref 转发(传递) 给下级组件, 继而可以在上级组件中获取下级目标】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123;<br>  useRef,<br>  useEffect,<br>  useImperativeHandle,<br>  forwardRef,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ChildInputComponent</span>(<span class="hljs-params">props, ref</span>) &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useImperativeHandle</span>(ref, <span class="hljs-function">() =&gt;</span> inputRef.<span class="hljs-property">current</span>);<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;child input&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ChildInput</span> = <span class="hljs-title function_">forwardRef</span>(<span class="hljs-title class_">ChildInputComponent</span>); <span class="hljs-comment">// 转发ref 节点</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>(); <span class="hljs-comment">// 子组件的Input框聚焦了</span><br>  &#125;, []);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ChildInput</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><h4 id="自定义-hooks-【类似模块化开发，将可以复用的功能方法放在外面】-【相同功能的代码放到了一起，方便阅读和维护】"><a href="#自定义-hooks-【类似模块化开发，将可以复用的功能方法放在外面】-【相同功能的代码放到了一起，方便阅读和维护】" class="headerlink" title="自定义 hooks 【类似模块化开发，将可以复用的功能方法放在外面】 【相同功能的代码放到了一起，方便阅读和维护】"></a>自定义 hooks 【类似模块化开发，将可以复用的功能方法放在外面】 【相同功能的代码放到了一起，方便阅读和维护】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">useCounter</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">fn1</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> v - <span class="hljs-number">1</span>);<br>  &#125;;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">fn2</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">setCount</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> v + <span class="hljs-number">1</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> [count, fn1, fn2]; <span class="hljs-comment">// 组件需要啥就输出啥</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useCounter;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> React from <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">import</span> useCounter from <span class="hljs-string">&quot;./utils/useCounter&quot;</span>;<br><br><span class="hljs-comment">// todo 自定义hooks</span><br><span class="hljs-comment">// todo 相同功能的代码放到了一起，方便阅读和维护</span><br><span class="hljs-comment">// todo 可以复用</span><br><br><span class="hljs-comment">// todo 显示当前事件 / 文件上传功能 / 倒计时</span><br><br><span class="hljs-type">const</span> <span class="hljs-variable">App</span> <span class="hljs-operator">=</span> () =&gt; &#123;<br>  const [count, fn1, fn2] = useCounter();<br>  <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &lt;h2&gt;自定义hooks&lt;/h2&gt;<br>      &lt;button onClick=&#123;fn1&#125;&gt;-&lt;/button&gt;<br>      &lt;span&gt;&#123;count&#125;&lt;/span&gt;<br>      &lt;button onClick=&#123;fn2&#125;&gt;+&lt;/button&gt;<br><br>      &lt;p&gt;当前事件为: &#123;nowTime&#125;&lt;/p&gt;<br>    &lt;/&gt;<br>  );<br>&#125;;<br><br>export <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小记【Router V6】</title>
    <link href="/2022/08/30/React%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%20%E4%BA%94%20)%20%E3%80%90%20%E8%B7%AF%E7%94%B1V6%E7%B3%BB%E5%88%97%E3%80%91/"/>
    <url>/2022/08/30/React%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%20%E4%BA%94%20)%20%E3%80%90%20%E8%B7%AF%E7%94%B1V6%E7%B3%BB%E5%88%97%E3%80%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="React-学习总结-五-【-路由-V6-系列】"><a href="#React-学习总结-五-【-路由-V6-系列】" class="headerlink" title="React 学习总结( 五 ) 【 路由 V6 系列】"></a>React 学习总结( 五 ) 【 路由 V6 系列】</h1><hr><h1 id="react-router-dom-路由-v6-版本"><a href="#react-router-dom-路由-v6-版本" class="headerlink" title="react-router-dom(路由 v6 版本)"></a>react-router-dom(路由 v6 版本)</h1><hr><h1 id="新旧版本区别"><a href="#新旧版本区别" class="headerlink" title="新旧版本区别:"></a>新旧版本区别:</h1><h4 id="一、注册路由的时候-v5-的-Switch-改为了-Routes"><a href="#一、注册路由的时候-v5-的-Switch-改为了-Routes" class="headerlink" title="一、注册路由的时候 v5 的 Switch 改为了 Routes"></a>一、注册路由的时候 v5 的 Switch 改为了 Routes</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Routes</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span> <span class="hljs-comment">//引入react-router</span><br><br>&lt;div&gt;<br>        &#123;<span class="hljs-comment">/* 注册路由（编写路由链接） */</span>&#125;<br>    &lt;<span class="hljs-title class_">Routes</span> &gt;<br>        ......<br>        ......<br>    &lt;/<span class="hljs-title class_">Routes</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="二、v6-不再支持用-Route-标签包裹子组件，可以直接使用-element-属性-注册组件-【默认是精准匹配，排它性路由】"><a href="#二、v6-不再支持用-Route-标签包裹子组件，可以直接使用-element-属性-注册组件-【默认是精准匹配，排它性路由】" class="headerlink" title="二、v6 不再支持用 Route 标签包裹子组件，可以直接使用 element 属性 注册组件 【默认是精准匹配，排它性路由】"></a>二、v6 不再支持用 Route 标签包裹子组件，可以直接使用 element 属性 注册组件 【默认是精准匹配，排它性路由】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Routes</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>; <span class="hljs-comment">//引入react-router</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  &#123;/* 注册路由（编写路由链接） */&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">About</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><h4 id="三、v6-中默认是没有路由信息了，需要使用-hooks-去获取"><a href="#三、v6-中默认是没有路由信息了，需要使用-hooks-去获取" class="headerlink" title="三、v6 中默认是没有路由信息了，需要使用 hooks 去获取"></a>三、v6 中默认是没有路由信息了，需要使用 hooks 去获取</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-comment">/* useLocation, useParams, useMatch依旧可以用，useHistroy没了 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="四、v6-中，Route-先后顺序不再重要，它能够自动找出最优匹配路径-【404-页面还是放最后】"><a href="#四、v6-中，Route-先后顺序不再重要，它能够自动找出最优匹配路径-【404-页面还是放最后】" class="headerlink" title="四、v6 中，Route 先后顺序不再重要，它能够自动找出最优匹配路径 【404 页面还是放最后】"></a>四、v6 中，Route 先后顺序不再重要，它能够自动找出最优匹配路径 【404 页面还是放最后】</h4><h4 id="五、在-v6-中移除了-NavLink-中的-activeClassName-的这个属性-【可以使用三元或者逻辑与运算符的方式实现这个功能】"><a href="#五、在-v6-中移除了-NavLink-中的-activeClassName-的这个属性-【可以使用三元或者逻辑与运算符的方式实现这个功能】" class="headerlink" title="五、在 v6 中移除了 NavLink 中的 activeClassName 的这个属性 【可以使用三元或者逻辑与运算符的方式实现这个功能】"></a>五、在 v6 中移除了 NavLink 中的 activeClassName 的这个属性 【可以使用三元或者逻辑与运算符的方式实现这个功能】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;li&gt;<br>  &#123;<span class="hljs-comment">/* activeClassName被删掉了 */</span>&#125;<br>  &#123;<span class="hljs-comment">/* isActive表示是否匹配的true或者false */</span>&#125;<br>  &lt;<span class="hljs-title class_">NavLink</span><br>    to=<span class="hljs-string">&quot;/home&quot;</span><br>    className=&#123;<span class="hljs-function">(<span class="hljs-params">&#123; isActive &#125;</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> isActive &amp;&amp; <span class="hljs-string">&quot;select&quot;</span>;<br>    &#125;&#125;<br>  &gt;<br>    home<br>  &lt;/<span class="hljs-title class_">NavLink</span>&gt;<br>&lt;/li&gt;<br></code></pre></td></tr></table></figure><h4 id="六、在-v6-中将-Redirect-改为-Navigate"><a href="#六、在-v6-中将-Redirect-改为-Navigate" class="headerlink" title="六、在 v6 中将 Redirect 改为 Navigate"></a>六、在 v6 中将 Redirect 改为 Navigate</h4><p>当匹配不到路由时，需要使用 Redirect 做重定向，跳转到我们定义的组件（页面）中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">Redirect</span> to=<span class="hljs-string">&quot;/home/&quot;</span> /&gt; ==&gt; <span class="hljs-comment">// &lt;Route path=&quot;/&quot; element =&#123;&lt;Navigate replace to=&quot;/home&quot; /&gt;&#125; /&gt;  不加 replace 默认是 push</span><br></code></pre></td></tr></table></figure><h4 id="七、v6-嵌套路由改为相对匹配，不再像-v5-那样必须提供完整路径-，新增-Outelt-组件【index-保持和上一级路由相同的路径】"><a href="#七、v6-嵌套路由改为相对匹配，不再像-v5-那样必须提供完整路径-，新增-Outelt-组件【index-保持和上一级路由相同的路径】" class="headerlink" title="七、v6 嵌套路由改为相对匹配，不再像 v5 那样必须提供完整路径 ，新增 Outelt 组件【index 保持和上一级路由相同的路径】"></a>七、v6 嵌套路由改为相对匹配，不再像 v5 那样必须提供完整路径 ，新增 Outelt 组件【index 保持和上一级路由相同的路径】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-comment">/* 嵌套路由可以在一处渲染, 用Outlet组件渲染，Outlet相当于vue的router-view */</span><br>&#125;<br>&#123;<br>  <span class="hljs-comment">/* index保持和上一级路由相同的路径 */</span><br>&#125;<br>&lt;<span class="hljs-title class_">Routes</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Home</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">About</span> /&gt;</span>&#125;&gt;</span><br><span class="language-xml">    &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;about1&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">About1</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span> */&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">index</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">About1</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;about2&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">About2</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Routes</span>&gt;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">About</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>about页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>about1<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about/about2&quot;</span>&gt;</span>about2<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      &#123;/* 嵌套路由可以在一处渲染, 用Outlet组件渲染，Outlet相当于vue的router-view */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="八、v6-用-useNavigate-实现编程式导航，不再使用-useHistory"><a href="#八、v6-用-useNavigate-实现编程式导航，不再使用-useHistory" class="headerlink" title="八、v6 用 useNavigate 实现编程式导航，不再使用 useHistory"></a>八、v6 用 useNavigate 实现编程式导航，不再使用 useHistory</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>, <span class="hljs-title class_">Routes</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Navigate</span>, useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-comment">// 相当于push方法</span><br>    <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/about&quot;</span>);<br>    <span class="hljs-comment">// 相当于replace方法</span><br>    <span class="hljs-comment">// navigate(&quot;/about&quot;, &#123; replace: true &#125;);</span><br><br>    <span class="hljs-comment">// 直接加数字相当于go方法</span><br>    <span class="hljs-comment">// navigate(2);</span><br>  &#125;;<br>   <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      home页面 - <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;fn&#125;</span>&gt;</span>btn<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br></code></pre></td></tr></table></figure><h4 id="九、v6-目前没有-prompt-组件阻止不期望的导航。"><a href="#九、v6-目前没有-prompt-组件阻止不期望的导航。" class="headerlink" title="九、v6 目前没有 prompt 组件阻止不期望的导航。"></a>九、v6 目前没有 prompt 组件阻止不期望的导航。</h4><p>如果在 v6 中要实现相应的功能，必须自己想办法，这可能是目前 v5 唯一的优势</p><hr>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小记【Router 4.5】</title>
    <link href="/2022/08/30/React%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%20%E5%9B%9B%20)%20%E3%80%90%20%E8%B7%AF%E7%94%B14.5%E7%B3%BB%E5%88%97%E3%80%91/"/>
    <url>/2022/08/30/React%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%20%E5%9B%9B%20)%20%E3%80%90%20%E8%B7%AF%E7%94%B14.5%E7%B3%BB%E5%88%97%E3%80%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="React-学习总结-四-【-路由系列】"><a href="#React-学习总结-四-【-路由系列】" class="headerlink" title="React 学习总结( 四 ) 【 路由系列】"></a>React 学习总结( 四 ) 【 路由系列】</h1><hr><h1 id="react-router-dom-路由-4-5-版本"><a href="#react-router-dom-路由-4-5-版本" class="headerlink" title="react-router-dom(路由 4.5 版本)"></a>react-router-dom(路由 4.5 版本)</h1><hr><h1 id="一、基础路由搭建"><a href="#一、基础路由搭建" class="headerlink" title="一、基础路由搭建"></a>一、基础路由搭建</h1><hr><p><strong>相关技术点：</strong></p><ol><li><p><strong>安装路由，解构出 BrowserRouter 套住需要路由的根组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Router</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br>root.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Router</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure></li><li><p><strong>解构 Link, Route, Switch,j 加入 exact 精确匹配</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//  Link相当于改变url的a标签，对应vue里面router-link</span><br><span class="hljs-comment">//  一个Route表示一个路由</span><br><span class="hljs-comment">//  Switch是将包容性转成排他性路由</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Switch</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-comment">// 路由组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是首页页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是关于页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是我的页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 父组件部分</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>react-router-basic<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>about<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/mine&quot;</span>&gt;</span>mine<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        &#123;/* react路由默认是包容性路由 */&#125;</span><br><span class="language-xml">        &#123;/* exact表示精确匹配,默认是模糊匹配 */&#125;</span><br><span class="language-xml">        &#123;/*设置path跳转路径，compoenet注册路由组件 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> <span class="hljs-attr">exact</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;About&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/mine&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Mine&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure></li></ol><h1 id="二、动态路由-【history-用来做编程式导航-location-用来获取-url-信息-match-用来获取参数】"><a href="#二、动态路由-【history-用来做编程式导航-location-用来获取-url-信息-match-用来获取参数】" class="headerlink" title="二、动态路由 【history 用来做编程式导航, location 用来获取 url 信息, match 用来获取参数】"></a>二、动态路由 【history 用来做编程式导航, location 用来获取 url 信息, match 用来获取参数】</h1><hr><p><strong>核心技术点：路径 / :id 获取路由信息，通过 props 的 match 用来获取参数</strong></p><p>组件部分：</p><p><Route path="/detail/:id/:str" component={Detail}></Route></p><p>组件获取 ID 方法</p><div>这是详情页面 - {this.props.match.params.id}-{this.props.match.params.str}</div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Detail</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>  render() &#123;<br>    <span class="hljs-comment">// todo 当一个组件通过路由引入的时候，props就是一个对象</span><br>    <span class="hljs-comment">// todo history用来做编程式导航, location用来获取url信息, match用来获取参数</span><br>    <span class="hljs-comment">// todo 统称为路由信息</span><br>    <span class="hljs-comment">// todo ?.叫做可选链操作符</span><br>    console.log(<span class="hljs-built_in">this</span>.props?.match?.params?.id);<br>    <span class="hljs-comment">// this.props.history.push?.();</span><br>    <span class="hljs-keyword">return</span> &lt;div&gt;这是详情页面 - &#123;<span class="hljs-built_in">this</span>.props.match.params.id&#125;&lt;/div&gt;;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>  render() &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;&gt;<br>        &lt;h2&gt;react-router-params动态路由&lt;/h2&gt;<br>        &lt;ul&gt;<br>            &lt;Link to=<span class="hljs-string">&quot;/mine&quot;</span>&gt;mine&lt;/Link&gt;<br>          &lt;/li&gt;<br>          &lt;li&gt;<br>            &lt;Link to=<span class="hljs-string">&quot;/detail/234&quot;</span>&gt;detail&lt;/Link&gt;<br>          &lt;/li&gt;<br>        &lt;/ul&gt;<br><br>        &lt;hr /&gt;<br><br>        &lt;Switch&gt;<br>          &lt;Route path=<span class="hljs-string">&quot;/about&quot;</span> component=&#123;About&#125;&gt;&lt;/Route&gt;<br>          &lt;Route path=<span class="hljs-string">&quot;/mine&quot;</span> component=&#123;Mine&#125;&gt;&lt;/Route&gt;<br>          &#123;<span class="hljs-comment">/* 动态路由 */</span>&#125;<br>          &lt;Route path=<span class="hljs-string">&quot;/detail/:id&quot;</span> component=&#123;Detail&#125;&gt;&lt;/Route&gt;<br>        &lt;/Switch&gt;<br>      &lt;/&gt;<br>    );<br>  &#125;<br>&#125;<br><br>export <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><h1 id="三、路由嵌套"><a href="#三、路由嵌套" class="headerlink" title="三、路由嵌套"></a>三、路由嵌套</h1><hr><p>注意点:如果一个组件需要做嵌套路由，不能加 exact 精确匹配属性</p><p>嵌套的方法很简单，直接在要嵌套的组件里继续写 Link 和 switch</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// console.log(this.props);</span><br>    <span class="hljs-keyword">const</span> &#123;<br>      <span class="hljs-attr">match</span>: &#123; url &#125;,<br>    &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>; <span class="hljs-comment">//做了而二次解构，把公共的url结构出来</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是首页页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">url</span>&#125;/<span class="hljs-attr">home1</span>`&#125;&gt;</span>home1<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>&#123;&quot; &quot;&#125;</span><br><span class="language-xml">            //模板字符串是JS表达式，需要加&#123;&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">url</span>&#125;/<span class="hljs-attr">home2</span>`&#125;&gt;</span>home2<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">url</span>&#125;/<span class="hljs-attr">home1</span>`&#125; <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home1&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">url</span>&#125;/<span class="hljs-attr">home2</span>`&#125; <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home2&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、组件的渲染方式"><a href="#四、组件的渲染方式" class="headerlink" title="四、组件的渲染方式"></a>四、组件的渲染方式</h1><hr><p>1.render 属性渲染组件 【主要渲染函数组件】【类组件需要套箭头函数】</p><p>主要作用：函数可以进行逻辑判断，根据条件渲染，路由鉴权等….</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">    &#123;<span class="hljs-comment">/* render属性也可以渲染页面 */</span>&#125;<br>    &#123;<span class="hljs-comment">/* render属性只能渲染函数组件，不能渲染类组件 */</span>&#125;<br>    &#123;<span class="hljs-comment">/* render想渲染类组件，需要使用箭头函数, 但是路由信息是需要传递一下 */</span>&#125;<br>    &#123;<span class="hljs-comment">/* render里面写函数，就可以写逻辑判断 */</span>&#125;<br>    &lt;<span class="hljs-title class_">Route</span><br>      path=<span class="hljs-string">&quot;/about&quot;</span><br>      render=&#123;<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">About</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span>;  <span class="hljs-comment">/// 类组件渲染 &#123;...传递props&#125;</span><br>       &#125;&#125;<br>    &gt;&lt;/<span class="hljs-title class_">Route</span>&gt;<br>-----------<span class="hljs-comment">// withRouter是一个高阶组件，作用就是让那些没有路由信息的组件，拥有路由信息---</span><br>        <span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Switch</span>, withRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br></code></pre></td></tr></table></figure><p>2.children 属性渲染组件 【children 属性在有 Switch 的情况下和 render 是一样的，没有 Swtich 的情况下不管 url 是否匹配都会渲染】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<span class="hljs-comment">/* children属性也可以做渲染 */</span>&#125;<br>&#123;<span class="hljs-comment">/* children属性在有Switch的情况下和render是一样的，没有Swtich的情况下不管url是否匹配都会渲染 */</span>&#125;<br>&lt;Route path=<span class="hljs-string">&quot;/mine&quot;</span> children=&#123;Mine&#125;&gt;&lt;/Route&gt;<br></code></pre></td></tr></table></figure><p>3.插槽渲染 【既能渲染函数组件也能渲染类组件】 【缺点：没有路由信息,可以用 withRouter 高阶组件解决，但是会让组件树套的更深】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<span class="hljs-comment">/* 也可以使用插槽的方式直接写在Route的里面 */</span>&#125;<br>&#123;<span class="hljs-comment">/* 既能渲染函数组件也能渲染类组件 */</span>&#125;<br>&#123;<span class="hljs-comment">/* 但是插槽的方式是没有路由信息的 */</span>&#125;<br>&lt;Route path=<span class="hljs-string">&quot;/classify&quot;</span>&gt;<br>  &lt;Classify /&gt;<br>&lt;/Route&gt;<br> <span class="hljs-comment">// withRouter是一个高阶组件，作用就是让那些没有路由信息的组件，拥有路由信息---</span><br>    <span class="hljs-keyword">import</span> &#123; Link, Route, Switch, withRouter &#125; from <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br>    <span class="hljs-meta">@withRouter</span><br>      <span class="hljs-keyword">class</span> <span class="hljs-title class_">Classify</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>         render() &#123;<br>         console.log(<span class="hljs-built_in">this</span>.props);<br>         <span class="hljs-keyword">return</span> &lt;div&gt;这是分类页面&lt;/div&gt;;<br>         &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><p>4.component 【既能渲染函数组件也能渲染类组件，比较常见的渲染方式】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<span class="hljs-comment">/* 渲染页面比较常用的方式是使用component属性 */</span>&#125;<br>&#123;<span class="hljs-comment">/* component既能渲染函数组件也能渲染类组件 */</span>&#125;<br>&lt;Route path=<span class="hljs-string">&quot;/home&quot;</span> component=&#123;Home&#125;&gt;&lt;/Route&gt;<br></code></pre></td></tr></table></figure><h1 id="五、Redirect-重定向-【是和-Route-并列的地方-使用-Redirect-的时候要加上-exact】"><a href="#五、Redirect-重定向-【是和-Route-并列的地方-使用-Redirect-的时候要加上-exact】" class="headerlink" title="五、Redirect 重定向 【是和 Route 并列的地方 使用 Redirect 的时候要加上 exact】"></a>五、Redirect 重定向 【是和 Route 并列的地方 使用 Redirect 的时候要加上 exact】</h1><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Switch</span>, <span class="hljs-title class_">Redirect</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是首页页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是关于页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是我的页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>react-router-重定向<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>about<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/mine&quot;</span>&gt;</span>mine<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        &#123;/* Redirect表示重定向，是和Route并列的地方 */&#125;</span><br><span class="language-xml">        &#123;/* from类似于path(匹配)的效果 */&#125;</span><br><span class="language-xml">        &#123;/* 使用Redirect的时候要加上exact */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">exact</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Redirect</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;About&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/mine&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Mine&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><h1 id="六、路由鉴权-【运用-withRouter-高阶函数获取路由信息】【缺点：会加深组件树】【可以使用-Hooks-解决】"><a href="#六、路由鉴权-【运用-withRouter-高阶函数获取路由信息】【缺点：会加深组件树】【可以使用-Hooks-解决】" class="headerlink" title="六、路由鉴权 【运用 withRouter 高阶函数获取路由信息】【缺点：会加深组件树】【可以使用 Hooks 解决】"></a>六、路由鉴权 【运用 withRouter 高阶函数获取路由信息】【缺点：会加深组件树】【可以使用 Hooks 解决】</h1><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Switch</span>, <span class="hljs-title class_">Redirect</span>, withRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-comment">// 登录组件，以插槽形式渲染，没有路由信息，用withRouter高阶组件解决</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  fn = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;grthrthrth&quot;</span>);<br>    <span class="hljs-comment">// 编程式导航</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/home&quot;</span>);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        这是登录页面 - <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.fn&#125;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-comment">// ---鉴权组件封装---做到复用功能------</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Auth</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">path</span>=<span class="hljs-string">&#123;this.props.path&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">          if (localStorage.getItem(&quot;token&quot;)) &#123;</span><br><span class="language-xml">            return this.props.children;</span><br><span class="language-xml">          &#125; else &#123;</span><br><span class="language-xml">            return <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&#123;this.props.path&#125;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Redirect</span>&gt;</span>;</span><br><span class="language-xml">          &#125;</span><br><span class="language-xml">        &#125;&#125;</span><br><span class="language-xml">      &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><span class="hljs-comment">// App</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>react-router-路由鉴权<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>about<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/mine&quot;</span>&gt;</span>mine<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">exact</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Redirect</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">          &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;About&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span> */&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Auth</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">About</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Auth</span>&gt;</span></span><br><span class="language-xml">          &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Route</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/mine&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">              if (localStorage.getItem(&quot;token&quot;)) &#123;</span><br><span class="language-xml">                return <span class="hljs-tag">&lt;<span class="hljs-name">Mine</span> /&gt;</span>;</span><br><span class="language-xml">              &#125; else &#123;</span><br><span class="language-xml">                return <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Redirect</span>&gt;</span>;</span><br><span class="language-xml">              &#125;</span><br><span class="language-xml">            &#125;&#125;</span><br><span class="language-xml">          &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span> */&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Auth</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/mine&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Mine</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Auth</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/login&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;withRouter(Login)&#125; //有高阶组件包住，插槽方式渲染就有路由信息了</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="七、-NavLink-组件-【作用是包含了-Link-的全部的功能，除此之外，增加了高亮的作用】【activeClassName-用于替换高亮的类名，exact-精准匹配】"><a href="#七、-NavLink-组件-【作用是包含了-Link-的全部的功能，除此之外，增加了高亮的作用】【activeClassName-用于替换高亮的类名，exact-精准匹配】" class="headerlink" title="七、 NavLink 组件 【作用是包含了 Link 的全部的功能，除此之外，增加了高亮的作用】【activeClassName 用于替换高亮的类名，exact 精准匹配】"></a>七、 NavLink 组件 【作用是包含了 Link 的全部的功能，除此之外，增加了高亮的作用】【activeClassName 用于替换高亮的类名，exact 精准匹配】</h1><hr><p><font color='Salmon '><strong>【不添加 activeClassName 替换类名，默认就加了 className=’active’】</strong></font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavLink</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Switch</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./07-styles.css&quot;</span>; <span class="hljs-comment">//引入css样式</span><br><span class="hljs-comment">// App部分</span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>react-router-路由高亮<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">activeClassName</span>=<span class="hljs-string">&quot;select&quot;</span> <span class="hljs-attr">exact</span>&gt;</span> // 直接使用类名</span><br><span class="language-xml">              home</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">activeClassName</span>=<span class="hljs-string">&quot;select&quot;</span>&gt;</span></span><br><span class="language-xml">              about</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/mine&quot;</span> <span class="hljs-attr">activeClassName</span>=<span class="hljs-string">&quot;select&quot;</span>&gt;</span></span><br><span class="language-xml">              mine</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="八、Prompt-组件-【路由保护】【有-when-和-message-属性控制】"><a href="#八、Prompt-组件-【路由保护】【有-when-和-message-属性控制】" class="headerlink" title="八、Prompt 组件 【路由保护】【有 when 和 message 属性控制】"></a>八、Prompt 组件 【路由保护】【有 when 和 message 属性控制】</h1><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>, <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Switch</span>, <span class="hljs-title class_">Redirect</span>, <span class="hljs-title class_">Prompt</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-comment">// 案例，当input表单有内容的时候，进行跳转提示</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  &#125;;<br>  handleChange = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">value</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是关于页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.value&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Prompt</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">when</span>=<span class="hljs-string">&#123;！！this.state.value&#125;</span> // <span class="hljs-attr">when里面接收</span> <span class="hljs-attr">布尔值</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">message</span>=<span class="hljs-string">&#123;(location)</span> =&gt;</span> // 接收location参数，包含了当前路由信息</span><br><span class="language-xml">          // &#123;pathname: &#x27;/mine&#x27;, search: &#x27;?a=4&amp;b=8&#x27;, hash: &#x27;&#x27;, state: undefined, key: &#x27;7dibvy&#x27;&#125;</span><br><span class="language-xml">            `Are you sure you want to go to $&#123;location.pathname&#125;`// url的跳转路径</span><br><span class="language-xml">          &#125;</span><br><span class="language-xml">        &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Prompt</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br>        &lt;li&gt;<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/mine?a=4&amp;b=8&quot;</span>&gt;</span>mine<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span>   <span class="hljs-comment">///加search直接?x=x&amp;x=x</span><br>          &lt;/li&gt;<br>       <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">exact</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Redirect</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about/:id&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;About&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/mine&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Mine&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="九、404-页面匹配-【必须和-Switch-一起用，只能写在所有-Route-的最后面-】"><a href="#九、404-页面匹配-【必须和-Switch-一起用，只能写在所有-Route-的最后面-】" class="headerlink" title="九、404 页面匹配 【必须和 Switch 一起用，只能写在所有 Route 的最后面 】"></a>九、404 页面匹配 【必须和 Switch 一起用，只能写在所有 Route 的最后面 】</h1><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// App的switch部分</span><br>&lt;<span class="hljs-title class_">Switch</span>&gt;<br>  &#123;<span class="hljs-comment">/* 必须和 Switch一起用，只能写在所有Route的最后面 */</span>&#125;<br>  &lt;<span class="hljs-title class_">Redirect</span> <span class="hljs-keyword">from</span>=<span class="hljs-string">&quot;/&quot;</span> to=<span class="hljs-string">&quot;/home&quot;</span> exact&gt;&lt;/<span class="hljs-title class_">Redirect</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;About&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/mine&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Mine&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;NotFound&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Switch</span>&gt;<br></code></pre></td></tr></table></figure><h1 id="十、params-路由信息-【获取-search-部分信息】"><a href="#十、params-路由信息-【获取-search-部分信息】" class="headerlink" title="十、params 路由信息 【获取 search 部分信息】"></a><strong>十、params 路由信息 【获取 search 部分信息】</strong></h1><hr><p>相关方法：<font color='Salmon '><strong>【const params = new URLSearchParams(search)】</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>  render() &#123;<br>    <span class="hljs-comment">// console.log(this.props);</span><br>    const &#123;<br>      location: &#123; search &#125;,<br>    &#125; = <span class="hljs-built_in">this</span>.props;<br>    <span class="hljs-comment">// console.log(search);</span><br><br>    <span class="hljs-type">const</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(search);<br>    console.log(params.get(<span class="hljs-string">&quot;a&quot;</span>));<br>    console.log(params.get(<span class="hljs-string">&quot;b&quot;</span>));<br><br>    <span class="hljs-keyword">return</span> &lt;div&gt;这是我的页面&lt;/div&gt;;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>  render() &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;&gt;<br>        &lt;h2&gt;react-router-参数&lt;/h2&gt;<br>        &lt;ul&gt;<br>          &lt;li&gt;<br>            &lt;Link to=<span class="hljs-string">&quot;/home&quot;</span>&gt;home&lt;/Link&gt;<br>          &lt;/li&gt;<br>          &lt;li&gt;<br>            &#123;<span class="hljs-comment">/* params传参 */</span>&#125;<br>            &lt;Link to=<span class="hljs-string">&quot;/about/123&quot;</span>&gt;about&lt;/Link&gt;<br>          &lt;/li&gt;<br>          &lt;li&gt;<br>            &#123;<span class="hljs-comment">/* query传参 */</span>&#125;<br>            &lt;Link to=<span class="hljs-string">&quot;/mine?a=3&amp;b=4&quot;</span>&gt;mine&lt;/Link&gt;<br>          &lt;/li&gt;<br>          &lt;li&gt;<br>            &lt;Link<br>              to=&#123;&#123; <span class="hljs-comment">// 写成对象，就是location属性</span><br>                pathname: <span class="hljs-string">&quot;/detail&quot;</span>,<br>                search: <span class="hljs-string">&quot;?x=10&amp;y=20&quot;</span>,<br>                hash: <span class="hljs-string">&quot;#lll&quot;</span>,<br>                <span class="hljs-comment">// state可以写任意对象</span><br>                state: &#123; str: <span class="hljs-string">&quot;hello&quot;</span> &#125;,<br>              &#125;&#125;<br>            &gt;<br>              detail<br>            &lt;/Link&gt;<br>          &lt;/li&gt;<br>        &lt;/ul&gt;<br><br>        &lt;hr /&gt;<br><br>        &lt;Switch&gt;<br>          &lt;Redirect from=<span class="hljs-string">&quot;/&quot;</span> to=<span class="hljs-string">&quot;/home&quot;</span> exact&gt;&lt;/Redirect&gt;<br>          &lt;Route path=<span class="hljs-string">&quot;/home&quot;</span> component=&#123;Home&#125;&gt;&lt;/Route&gt;<br>          &lt;Route path=<span class="hljs-string">&quot;/about/:id&quot;</span> component=&#123;About&#125;&gt;&lt;/Route&gt;<br>          &lt;Route path=<span class="hljs-string">&quot;/mine&quot;</span> component=&#123;Mine&#125;&gt;&lt;/Route&gt;<br>          &lt;Route path=<span class="hljs-string">&quot;/detail&quot;</span> component=&#123;Detail&#125;&gt;&lt;/Route&gt;<br>        &lt;/Switch&gt;<br>      &lt;/&gt;<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十一、Hooks-【useHistory、-useLocation、useParams、useRouteMatch-useSearchParams-】【只能给函数组件用】"><a href="#十一、Hooks-【useHistory、-useLocation、useParams、useRouteMatch-useSearchParams-】【只能给函数组件用】" class="headerlink" title="十一、Hooks 【useHistory、 useLocation、useParams、useRouteMatch, useSearchParams 】【只能给函数组件用】"></a>十一、Hooks 【useHistory、 useLocation、useParams、useRouteMatch, useSearchParams 】【只能给函数组件用】</h1><hr><p>增强函数组件的功能, 不会使组件树变深</p><p>所有的 hooks 都要写在函数组件的顶层</p><p>所有的 hooks 都是函数，都是 use 开头的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">Link</span>,<br>  <span class="hljs-title class_">Switch</span>,<br>  <span class="hljs-title class_">Route</span>,<br>  useHistory,<br>  useLocation,<br>  useParams,<br>  useRouteMatch,<br>  useSearchParams<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> history = <span class="hljs-title function_">useHistory</span>();<br>  <span class="hljs-keyword">const</span> location = <span class="hljs-title function_">useLocation</span>();<br>  <span class="hljs-keyword">const</span> params = <span class="hljs-title function_">useParams</span>();<br>  <span class="hljs-keyword">const</span> match = <span class="hljs-title function_">useRouteMatch</span>();<br>  <span class="hljs-keyword">const</span> [searchParams,setSearchParams] = <span class="hljs-title function_">useSearchParams</span>();<span class="hljs-comment">// 或取url search部分的键值对</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(searchParams.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;id&quot;</span>));可以或许?id=<span class="hljs-string">&#x27;xxxxx&#x27;</span> 部分<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(location);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      这是home组件 - <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;fn&#125;</span>&gt;</span>btn<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="十二、路由表-【类似-vue-的路由表】"><a href="#十二、路由表-【类似-vue-的路由表】" class="headerlink" title="十二、路由表 【类似 vue 的路由表】"></a>十二、路由表 【类似 vue 的路由表】</h1><hr><ol><li><p>建立路由表文件 【将原本的 App 导入，把路由组件写在这边，通过插槽创建路由层级，App proprs.children 接受，再导出到总文件】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App&quot;</span>; <span class="hljs-comment">//引入App父组件</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Route</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./pages/Home&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./pages/About&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home1</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./pages/Home1&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home2</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./pages/Home2&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Router</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Home</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home/home1&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Home1</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home/home2&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Home2</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Home</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">About</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">App</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Router</span>;<br></code></pre></td></tr></table></figure></li><li><p>App 部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>, <span class="hljs-title class_">Switch</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>router5-路由表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>about<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span>&#123;props.children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span> / //类似vue的link-view,显示对应的路由页面</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure></li><li><p>二级嵌套路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>, <span class="hljs-title class_">Switch</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是首页页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/home1&quot;</span>&gt;</span>home1<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/home2&quot;</span>&gt;</span>home2<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span>&#123;props.children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;<br></code></pre></td></tr></table></figure></li></ol><h1 id="十三、Lazy-【-路由懒加载-】-【-lazy-函数、Suspense-包裹懒加载的组件、fallback-加载过程显示内容】"><a href="#十三、Lazy-【-路由懒加载-】-【-lazy-函数、Suspense-包裹懒加载的组件、fallback-加载过程显示内容】" class="headerlink" title="十三、Lazy 【 路由懒加载 】 【 lazy 函数、Suspense 包裹懒加载的组件、fallback 加载过程显示内容】"></a>十三、Lazy 【 路由懒加载 】 【 lazy 函数、Suspense 包裹懒加载的组件、fallback 加载过程显示内容】</h1><hr><ul><li><p>App 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span>, lazy, <span class="hljs-title class_">Suspense</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// todo lazy就是用来做组件懒加载的</span><br><span class="hljs-comment">// todo lazy需要配合Suspense一起使用</span><br><br><span class="hljs-comment">// import Child from &quot;./Child&quot;;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">lazy</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;./Child&quot;</span>)); <span class="hljs-comment">//lazy函数包裹需要做懒加载的子组件</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Loading</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>loading,,,,,<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  fn = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>组件懒加载<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.fn&#125;</span>&gt;</span>btn<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;/* fallback表示组件在加载的过程中显示的内容 */&#125;&#x27;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Loading</span> /&gt;</span>&#125;&gt;</span><br><span class="language-xml">          &#123;this.state.show &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span>&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure></li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小记【Redux】</title>
    <link href="/2022/08/30/React%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%20%E4%B8%89%20)%20%E3%80%90%20Redux%20%E7%B3%BB%E5%88%97%E3%80%91/"/>
    <url>/2022/08/30/React%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%20%E4%B8%89%20)%20%E3%80%90%20Redux%20%E7%B3%BB%E5%88%97%E3%80%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="React-学习总结-三"><a href="#React-学习总结-三" class="headerlink" title="React 学习总结( 三 )"></a>React 学习总结( 三 )</h1><h1 id="1-什么是-redux"><a href="#1-什么是-redux" class="headerlink" title="1.什么是 redux?"></a>1.什么是 redux?</h1><hr><p>Web 应用是一个状态机，视图与状态是一一对应的。</p><p>所有的状态，保存在一个对象里面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Redux是react中进行state状态管理的JS库（并不是react插件），一般是管理多个组件中共享数据状态。这个是和Vuex是一样的。</span><br><br>首先明确一点，<span class="hljs-title class_">Redux</span> 是一个有用的架构，但不是非用不可。事实上，大多数情况，你可以不用它，只用 <span class="hljs-title class_">React</span> 就够了。<br><br>曾经有人说过这样一句话：<br><br><span class="hljs-string">&quot;如果你不知道是否需要 Redux，那就是不需要它。&quot;</span><br><br><span class="hljs-string">&quot;只有遇到 React 实在解决不了的问题，你才需要 Redux 。&quot;</span><br></code></pre></td></tr></table></figure><h1 id="2-Redux-仓库结构【legacy-createStore】"><a href="#2-Redux-仓库结构【legacy-createStore】" class="headerlink" title="2.Redux 仓库结构【legacy_createStore】"></a>2.Redux 仓库结构【legacy_createStore】</h1><hr><p><img src="https://img-blog.csdnimg.cn/img_convert/f26cfee8d5ec298034b914d2c343e73e.png" alt="img"></p><h1 id="3-legacy-createStore（作用和-vue-的-createStore-完全一样，执行可以返回一个仓库实例）"><a href="#3-legacy-createStore（作用和-vue-的-createStore-完全一样，执行可以返回一个仓库实例）" class="headerlink" title="3.legacy_createStore（作用和 vue 的 createStore 完全一样，执行可以返回一个仓库实例）"></a>3.legacy_createStore（作用和 vue 的 createStore 完全一样，执行可以返回一个仓库实例）</h1><hr><h4 id="使用流程："><a href="#使用流程：" class="headerlink" title="使用流程："></a>使用流程：</h4><ul><li><h4 id="首先安装-redux-框架"><a href="#首先安装-redux-框架" class="headerlink" title="首先安装 redux 框架"></a>首先安装 redux 框架</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node">npm install redux --save<br></code></pre></td></tr></table></figure></li><li><h4 id="创建-index-js-文件（需要用-node-js-启动该文件）"><a href="#创建-index-js-文件（需要用-node-js-启动该文件）" class="headerlink" title="创建 index.js 文件（需要用 node.js 启动该文件）"></a>创建 index.js 文件（需要用 node.js 启动该文件）</h4></li><li><h4 id="结构出-legacy-createStore-【用-node-的-CommonJS-语法导入】"><a href="#结构出-legacy-createStore-【用-node-的-CommonJS-语法导入】" class="headerlink" title="结构出 legacy_createStore 【用 node 的 CommonJS 语法导入】"></a>结构出 legacy_createStore 【用 node 的 CommonJS 语法导入】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; legacy_createStore &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;redux&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><h4 id="创建仓库原始数据"><a href="#创建仓库原始数据" class="headerlink" title="创建仓库原始数据"></a>创建仓库原始数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">const</span> <span class="hljs-variable">defaultState</span> <span class="hljs-operator">=</span> &#123;<br>  count: <span class="hljs-number">3</span>,<br>  name: <span class="hljs-string">&quot;zhangmou&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><h4 id="创建-reducer-函数-用于改变-state"><a href="#创建-reducer-函数-用于改变-state" class="headerlink" title="创建 reducer 函数, 用于改变 state"></a>创建 reducer 函数, 用于改变 state</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//todo reducer需要传入两个参数, state,action</span><br><span class="hljs-comment">//todo action是一个带有type属性的对象</span><br><span class="hljs-comment">//todo reducer要满足纯函数的条件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">state = defaultState, action</span>) =&gt; &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;add&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state, <span class="hljs-comment">// state原始数据始终没有被改变，返回一个新的对象覆盖原对象</span><br>        <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>,<br>      &#125;;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;minus&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> - action.<span class="hljs-property">num</span>,<br>      &#125;;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state;<br>  &#125;<br>&#125;;<br><span class="hljs-string">&#x27;纯函数的概念：一个函数的返回结果只依赖其参数，并且执行过程中没有副作用，非异步，入参相同，出场必定相同</span><br><span class="hljs-string"></span><br><span class="hljs-string">//  非纯函数 返回值与a相关，无法预料</span><br><span class="hljs-string">const a = 1</span><br><span class="hljs-string">const foo = (b) =&gt; a + b</span><br><span class="hljs-string">foo(2) // =&gt; 3</span><br><span class="hljs-string"></span><br><span class="hljs-string">// 纯函数 返回结果只依赖于它的参数 x 和 b，foo(1, 2) 只要 foo 代码不改变，你传入的参数是确定的，那么 foo(1, 2) 的值永远是可预料的。</span><br><span class="hljs-string">const a = 1</span><br><span class="hljs-string">const foo = (x, b) =&gt; x + b</span><br><span class="hljs-string">foo(1, 2) // =&gt; 3</span><br></code></pre></td></tr></table></figure></li><li><h4 id="创建-store-仓库实例"><a href="#创建-store-仓库实例" class="headerlink" title="创建 store 仓库实例"></a>创建 store 仓库实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//todo legacy_createStore执行可以返回一个仓库实例</span><br><span class="hljs-comment">//todo 第一个参数是reducer的函数</span><br><span class="hljs-type">const</span> <span class="hljs-variable">store</span> <span class="hljs-operator">=</span> legacy_createStore(reducer);<br>console.log(store); <span class="hljs-comment">//生成了含有方法的对象 [dispath、subscribe、getState]</span><br> &#123;<br>   <span class="hljs-comment">// dispatch用来调用reducer函数</span><br>     dispatch: [Function: dispatch],<br>  <span class="hljs-comment">// subscribe用来监听仓库数据的改变</span><br>    subscribe: [Function: subscribe],<br>   <span class="hljs-comment">// getState用于获取仓库数据</span><br>    getState: [Function: getState],<br>    replaceReducer: [Function: replaceReducer],<br>    <span class="hljs-string">&#x27;@@observable&#x27;</span>: [Function: observable]<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>store.dispatch（{type:xxxx}）<font color='each'>调用 action，里面传入的对象就是 action</font></strong></p></li><li><p><strong>store.subscribe(callback 回调函数) <font color='each'>传入回调函数，用来监听仓库数据的改变</font></strong></p></li><li><p><strong>store.getState( ) <font color='each'>用于获取仓库数据</font></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//todo 表示仓库的原始数据</span><br><span class="hljs-keyword">const</span> defaultState = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;zhangmou&quot;</span>,<br>&#125;;<br><span class="hljs-comment">//dispatch用来调用reducer函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">state = defaultState, action</span>) =&gt; &#123;<br>  <span class="hljs-comment">// switch (action.type) &#123;</span><br>  <span class="hljs-comment">//   case &quot;add&quot;:</span><br>  <span class="hljs-comment">//     return &#123;</span><br>  <span class="hljs-comment">//       ...state,</span><br>  <span class="hljs-comment">//       count: state.count + 1,</span><br>  <span class="hljs-comment">//     &#125;;</span><br>  <span class="hljs-comment">//   case &quot;minus&quot;:</span><br>  <span class="hljs-comment">//     return &#123;</span><br>  <span class="hljs-comment">//       ...state,</span><br>  <span class="hljs-comment">//       count: state.count - action.num,</span><br>  <span class="hljs-comment">//     &#125;;</span><br>  <span class="hljs-comment">//   default:</span><br>  <span class="hljs-comment">//     return state;</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">//用对象字面量代替switch冗杂的语句</span><br>  <span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">add</span>: &#123; ...state, <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> + <span class="hljs-number">1</span> &#125;,<br>    <span class="hljs-attr">minus</span>: &#123; ...state, <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span> - action.<span class="hljs-property">num</span> &#125;,<br>    <span class="hljs-attr">default</span>: state,<br>  &#125;;<br>  <span class="hljs-keyword">return</span> obj[action.<span class="hljs-property">type</span>] || obj[<span class="hljs-string">&quot;default&quot;</span>];<br>&#125;;<br>store.<span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;add&quot;</span> &#125;); <span class="hljs-comment">//&#123; count: 4, name: &#x27;zhangmou&#x27; &#125;</span><br>store.<span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;add&quot;</span> &#125;); <span class="hljs-comment">//&#123; count: 5, name: &#x27;zhangmou&#x27; &#125;</span><br>store.<span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;minus&quot;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">3</span> &#125;); <span class="hljs-comment">// &#123; count: 2, name: &#x27;zhangmou&#x27; &#125;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="4-redux-与-react-结合实战"><a href="#4-redux-与-react-结合实战" class="headerlink" title="4.redux 与 react 结合实战"></a>4.redux 与 react 结合实战</h1><hr><h4 id="一、同步方法"><a href="#一、同步方法" class="headerlink" title="一、同步方法"></a>一、同步方法</h4><ol><li><p><strong>单独创建 store 文件夹【index.js 创建仓库实例，reducer.js 写方法】</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; legacy_createStore <span class="hljs-keyword">as</span> createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>; <span class="hljs-comment">// as重命名</span><br><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./reducer.js&quot;</span>;<span class="hljs-comment">//引入reducer函数</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br><br>--------------<span class="hljs-string">&#x27;创建reducer函数---------</span><br><span class="hljs-string"> //todo 表示仓库的原始数据</span><br><span class="hljs-string">const defaultState = &#123;</span><br><span class="hljs-string">  count: 3,</span><br><span class="hljs-string">  name: &quot;zhangmou&quot;,</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">const reducer = (state = defaultState, action) =&gt; &#123;</span><br><span class="hljs-string">    const obj = &#123;</span><br><span class="hljs-string">    &#x27;</span>add<span class="hljs-string">&#x27;: &#123; ...state, count: state.count + 1 &#125;,</span><br><span class="hljs-string">    &#x27;</span>minus<span class="hljs-string">&#x27;: &#123; ...state, count: state.count - action.num &#125;,</span><br><span class="hljs-string">    &#x27;</span><span class="hljs-keyword">default</span><span class="hljs-string">&#x27;: state</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  return obj[action.type] || obj[&#x27;</span><span class="hljs-keyword">default</span><span class="hljs-string">&#x27;]</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure></li></ol><p>​ <strong>2.组件的 index.js 部分配置</strong> 【<font color='orage'>解构出 provider 提供者，引入 store 仓库实例，挂载到组件上，类似跨组件通信</font>】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>; <span class="hljs-comment">//解构出Provider,提供仓库数据</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./redux-todolist-async/redux&quot;</span>; <span class="hljs-comment">// 将创建好的仓库实例引入</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./redux-todolist-async/App&quot;</span>; <span class="hljs-comment">// App组件</span><br>root.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="language-xml">    &#123;&quot; &quot;&#125;</span><br><span class="language-xml">    // 包裹总组件，可以为所有组件提供服务，传入store数据</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>​ <strong>3.组件如何使用？</strong>【<font color='orage'>哪个组件需要，就在哪个组件解构出 <strong>connect</strong> 函数连通仓库，mapStateToProps 数据，mapDispatchToProps 方法</font>】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// todo connect需要接收两个参数，这两个参数都是函数, mapStateToProps[state数据],mapDispatchToProps[dispatch调用]</span><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mapStateToProps</span> = (<span class="hljs-params">state</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">count</span>: state.<span class="hljs-property">count</span>,<br>  &#125;;<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mapDispatchToProps</span> = (<span class="hljs-params">dispatch</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">num</span>) &#123;<br>      <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;add&quot;</span>, num &#125;);<br>    &#125;, <span class="hljs-comment">// 可以写方法，dispatch调用仓库的reducer函数进行交互，可以从组件接受参数</span><br>    <span class="hljs-title function_">minus</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;minus&quot;</span> &#125;);<br>    &#125;,<br>  &#125;;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>); <span class="hljs-comment">// 将仓库的改变数据的方法映射到组件的props里面</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.props.add(2)&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> //</span><br><span class="language-xml">        this.props.xxx调用方法</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;this.props.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.props.minus()&#125;&gt;-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;connect(mapStateToProps,mapDispatchToProps)(App)&quot;</span>; <span class="hljs-comment">//connect是函数，返回函数，调用后将App当参数传递</span><br></code></pre></td></tr></table></figure><h4 id="二、异步方法"><a href="#二、异步方法" class="headerlink" title="二、异步方法"></a>二、异步方法</h4><h5 id="与同步的不同点-使用-applyMiddleware-中间件接收一个异步库-thunk-异步库需安装"><a href="#与同步的不同点-使用-applyMiddleware-中间件接收一个异步库-thunk-异步库需安装" class="headerlink" title="与同步的不同点: 使用 applyMiddleware 中间件接收一个异步库 thunk,异步库需安装"></a>与同步的不同点: <strong><font color='Salmon '>使用 applyMiddleware 中间件接收一个异步库 thunk,异步库需安装</font></strong></h5><ul><li><p><strong>仓库实例部分</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建仓库实例</span><br><span class="hljs-comment">// todo applyMiddleware中间件用于处理异步</span><br><span class="hljs-keyword">import</span> &#123; legacy_createStore <span class="hljs-keyword">as</span> createStore, applyMiddleware &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux&quot;</span>;<br><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./reducer&quot;</span>;<br><span class="hljs-comment">// todo 异步库</span><br><span class="hljs-keyword">import</span> thunk <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;redux-thunk&quot;</span>;<br><br><span class="hljs-comment">// todo createStore还可以接收第二个参数, 就是中间件的返回值</span><br><span class="hljs-comment">// todo applyMiddleware可以接收一个参数是异步库</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer, <span class="hljs-title function_">applyMiddleware</span>(thunk));<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure></li><li><p><strong>额外创建 actionCreator.js 文件,【动作创建者】</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">minusAction</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 需要暴露一下，需要的地方引入，还可以接收参数</span><br>  <span class="hljs-comment">// todo 使用了中间件以后，action里面就可以返回函数了，由中间件来帮助执行这个函数</span><br>  <span class="hljs-comment">// todo 这个函数可以使用dispatch参数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">dispatch</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;remove&quot;</span>, id &#125;);<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;;<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">addlist</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">dispatch</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://www.pudge.wang:3080/api/rated/list&quot;</span>) <span class="hljs-comment">//进行数据请求</span><br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;load&quot;</span>, <span class="hljs-attr">list</span>: res.<span class="hljs-property">result</span> &#125;); <span class="hljs-comment">//真正的dispatch调用action</span><br>      &#125;);<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>组件如何使用？</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 哪个组件需要直接引入动作创建者文件</span><br><span class="hljs-keyword">import</span> &#123;addlist&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./redux/actionCreator&#x27;</span>；<br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mapDispatchToProps</span> = (<span class="hljs-params">dispatch</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-title function_">addlist</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">addlist</span>()) <span class="hljs-comment">// dispatch调用的是异步函数的方法，不是直接调用action了，需要中转一下</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>总结:</strong></p><p><strong><font color='Salmon '>总的与同步一样，多了中间件引用异步库，第一次 dispatch 调用的是异步库的函数进行中转<br>第二次 dispatch 调用才是真正的 action,用法与同步相同</font></strong></p><hr></li></ul>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小记（二）</title>
    <link href="/2022/08/30/React%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%20%E4%BA%8C%20)/"/>
    <url>/2022/08/30/React%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93(%20%E4%BA%8C%20)/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="React-学习总结-二"><a href="#React-学习总结-二" class="headerlink" title="React 学习总结( 二 )"></a>React 学习总结( 二 )</h1><h1 id="1、HOC-高阶组件"><a href="#1、HOC-高阶组件" class="headerlink" title="1、HOC(高阶组件)"></a>1、HOC(高阶组件)</h1><hr><h4 id="Higher-Order-Components-就是一个函数，传给它一个组件，它返回一个新的组件。"><a href="#Higher-Order-Components-就是一个函数，传给它一个组件，它返回一个新的组件。" class="headerlink" title="Higher-Order Components 就是一个函数，传给它一个组件，它返回一个新的组件。"></a><strong>Higher-Order Components 就是一个函数，传给它一个组件，它返回一个新的组件。</strong></h4><p>作用：<font color='Peach'>可以给组件添加相同的结构,添加相同的属性等等,增强组件的功能，以及进行复用</font></p><p><font color='orange'>温馨提示：一般用 <strong>with xxx.js</strong> 单独放置高阶组件，默认就是高阶组件</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">hoc</span> = (<span class="hljs-params">Comp</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-title function_">render</span>()<br>      <span class="hljs-comment">// todo &#123;...this.props&#125;将这个组件接收到的所有的props，接着往下传</span><br>      <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Comp</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&quot;3&quot;</span> &#123;<span class="hljs-attr">...this.props</span>&#125; /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>      );<br>    &#125;<br>  &#125;;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>); <span class="hljs-comment">// count=3</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>高阶组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// const App2 = hoc(App);</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">hoc</span>(<span class="hljs-title class_">App</span>);<br></code></pre></td></tr></table></figure><h1 id="2、Portal"><a href="#2、Portal" class="headerlink" title="2、Portal"></a>2、Portal</h1><hr><h4 id="Portals-提供了一个最好的在父组件包含的-DOM-结构层级外的-DOM-节点渲染组件的方法。"><a href="#Portals-提供了一个最好的在父组件包含的-DOM-结构层级外的-DOM-节点渲染组件的方法。" class="headerlink" title="Portals 提供了一个最好的在父组件包含的 DOM 结构层级外的 DOM 节点渲染组件的方法。"></a><strong>Portals 提供了一个最好的在父组件包含的 DOM 结构层级外的 DOM 节点渲染组件的方法。</strong></h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReactDOM</span>.</span></span>create<span class="hljs-constructor">Portal(<span class="hljs-params">child</span>,<span class="hljs-params">container</span>)</span>;<br></code></pre></td></tr></table></figure><h5 id="第一个参数-child-是可渲染的-react-子项，比如元素，字符串或者片段等。第二个参数-container-是一个-DOM-元素。"><a href="#第一个参数-child-是可渲染的-react-子项，比如元素，字符串或者片段等。第二个参数-container-是一个-DOM-元素。" class="headerlink" title="第一个参数 child 是可渲染的 react 子项，比如元素，字符串或者片段等。第二个参数 container 是一个 DOM 元素。"></a><strong>第一个参数 child 是可渲染的 react 子项，比如元素，字符串或者片段等。第二个参数 container 是一个 DOM 元素。</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> React, &#123; Component &#125; from <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createPortal &#125; from <span class="hljs-string">&quot;react-dom&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>  render() &#123;<br>    <span class="hljs-keyword">return</span> createPortal(&lt;div&gt;child组件&lt;/div&gt;, document.querySelector(<span class="hljs-string">&quot;body&quot;</span>));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、组件的生命周期-旧版"><a href="#3、组件的生命周期-旧版" class="headerlink" title="3、组件的生命周期(旧版)"></a>3、组件的生命周期(旧版)</h1><hr><h4 id="前提：只有类组件才有生命周期！"><a href="#前提：只有类组件才有生命周期！" class="headerlink" title="前提：只有类组件才有生命周期！"></a><strong>前提</strong>：<font color='red'>只有类组件才有生命周期！</font></h4><h3 id="一、挂载阶段"><a href="#一、挂载阶段" class="headerlink" title="一、挂载阶段"></a>一、挂载阶段</h3><h5 id="constructor就是-react-的第一个生命周期，constructor-是组件被实例化的时候就调用，只调用一次"><a href="#constructor就是-react-的第一个生命周期，constructor-是组件被实例化的时候就调用，只调用一次" class="headerlink" title="constructor就是 react 的第一个生命周期，constructor 是组件被实例化的时候就调用，只调用一次"></a><strong>constructor</strong>就是 react 的第一个生命周期，constructor 是组件被实例化的时候就调用，只调用一次</h5><p><font color='Salmon '>特点：可以将接收 props，当作初始值，达到修改 props 的效果</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// constructor就是react的第一个生命周期，constructor是组件被实例化的时候就调用，只调用一次</span><br> <span class="hljs-comment">// 初始化state，改变事件的this，得到ref变量等等以及处理props</span><br> <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>   <span class="hljs-variable language_">super</span>(props);<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>     <span class="hljs-attr">count</span>: <span class="hljs-number">10</span>+props.属性,<br>     <span class="hljs-attr">list</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>],<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">fn</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fn</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>)<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">ipt</span> = <span class="hljs-title function_">createRef</span>();<br>   &#125;;<br></code></pre></td></tr></table></figure><h4 id="componentWillMount-将被弃用"><a href="#componentWillMount-将被弃用" class="headerlink" title="componentWillMount      将被弃用"></a><font color='red'>componentWillMount      将被弃用</font></h4><h4 id="表示挂载前-已经被废弃了-没啥用，不能做数据请求-因为-fiber-16-版本-算法的存在，有可能导致请求做多次，影响性能"><a href="#表示挂载前-已经被废弃了-没啥用，不能做数据请求-因为-fiber-16-版本-算法的存在，有可能导致请求做多次，影响性能" class="headerlink" title="表示挂载前,已经被废弃了,没啥用，不能做数据请求, 因为 fiber(16 版本)算法的存在，有可能导致请求做多次，影响性能"></a>表示挂载前,已经被废弃了,没啥用，不能做数据请求, 因为 fiber(16 版本)算法的存在，有可能导致请求做多次，影响性能</h4><h3 id="render-：render-也是生命周期，它必须要返回-jsx-页面显示的内容，可以做解构以及对数据的处理-不要在-render-做数据请求"><a href="#render-：render-也是生命周期，它必须要返回-jsx-页面显示的内容，可以做解构以及对数据的处理-不要在-render-做数据请求" class="headerlink" title="render ：render 也是生命周期，它必须要返回 jsx, 页面显示的内容，可以做解构以及对数据的处理, 不要在 render 做数据请求"></a>render ：render 也是生命周期，它必须要返回 jsx, 页面显示的内容，可以做解构以及对数据的处理, 不要在 render 做数据请求</h3><p><font color='Peach'>componentDidMount  用的很多</font></p><h4 id="表示挂载结束-可以做任意的事情，包括数据请求"><a href="#表示挂载结束-可以做任意的事情，包括数据请求" class="headerlink" title="表示挂载结束,可以做任意的事情，包括数据请求"></a>表示挂载结束,可以做任意的事情，包括数据请求</h4><p><font color='Salmon '>特点：可以数据请求，设置定时器</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentDidMount&quot;</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">20</span>,<br>      &#125;);<br>    &#125;, <span class="hljs-number">2000</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="二、更新阶段"><a href="#二、更新阶段" class="headerlink" title="二、更新阶段"></a>二、更新阶段</h3><p><font color='Peach'>shouldComponentUpdate 用的较多</font></p><p>询问是否需要更新， 必须要返回 true 或者 false</p><p>触发时机：<font color='orage'>父级 props 改变和内部的 state 数据改变</font></p><p>参数：nextProps、nextState,更新后的 props 和更新后的 state</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;shouldComponentUpdate&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nextState.<span class="hljs-property">count</span>);<span class="hljs-comment">//20 更新后</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>);<span class="hljs-comment">//10，默认10</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">if</span> (nextState.<span class="hljs-property">count</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>    <span class="hljs-keyword">return</span> nextState.<span class="hljs-property">count</span> !== <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>;<span class="hljs-comment">//优化后</span><br>  &#125;<br></code></pre></td></tr></table></figure><p>扩展：<font color='Peach'>PureComponent，有复杂类型不好判断，所以有了它可以让 react 自己控制是否需要更新，值的类型也不限制,推荐直接写上</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> React, &#123; PureComponent &#125; from <span class="hljs-string">&quot;react&quot;</span>;<span class="hljs-comment">//先结构出来</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PureComponent</span> &#123; <span class="hljs-comment">//直接用</span><br>  render() &#123;<br>    console.log(<span class="hljs-string">&quot;child render&quot;</span>);<br>    <span class="hljs-keyword">return</span> &lt;div&gt;child组件 - &#123;<span class="hljs-built_in">this</span>.props.count&#125;&lt;/div&gt;;<br>  &#125;<br></code></pre></td></tr></table></figure><p><font color='red'>componentWillUpdate 将被弃用</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">UNSAFE_componentWillUpdate() &#123;<br>   <span class="hljs-comment">// 跟vue不同的是，这里是数据是改变之前的数据</span><br>   <span class="hljs-comment">// console.log(this.state.count);</span><br>   console.log(<span class="hljs-string">&quot;componentWillUpdate&quot;</span>);<br> &#125;<br></code></pre></td></tr></table></figure><p><font color='Peach'>componentDidUpdate  更新后  </font><font color='orange'>不要在这里修改数据,会造成死循环</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// componentDidUpdate表示更新后</span><br><span class="hljs-comment">// 不要在这里修改数据,会造成死循环</span><br><span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// this.setState(&#123;</span><br>  <span class="hljs-comment">//   count: 30</span><br>  <span class="hljs-comment">// &#125;)</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentDidUpdate&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、卸载阶段"><a href="#三、卸载阶段" class="headerlink" title="三、卸载阶段"></a>三、卸载阶段</h3><p><font color='Peach'>componentWillUnmount 用的较多</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// todo 卸载阶段</span><br><span class="hljs-comment">// todo 卸载定时器，卸载websocket，移出事件监听，销毁echarts的实例等第三方插件</span><br><span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentWillUnmount&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><font color='Salmon '>父子组件渲染顺序：只要父组件渲染了，子组件默认也必定会渲染</font></strong></p><p><strong><font color='Salmon '>父 render -&gt; 子 render -&gt; 子 componentDidMount -&gt; 父 componentDidMount</font></strong></p><p><img src="C:\Users\LL\AppData\Roaming\Typora\typora-user-images\image-20220805212645645.png" alt="image-20220805212645645"></p><h1 id="4、组件的生命周期-新版-16-3-之后"><a href="#4、组件的生命周期-新版-16-3-之后" class="headerlink" title="4、组件的生命周期(新版 16.3 之后)"></a>4、组件的生命周期(新版 16.3 之后)</h1><hr><p><img src="C:\Users\LL\AppData\Roaming\Typora\typora-user-images\image-20220805214333021.png" alt="image-20220805214333021"></p><p><strong>1.getDerivedStateFromProps</strong> <font color='each'>必须要加 static,不常用</font></p><p>触发时机：<font color='orage'>父级 props 改变和内部的 state 数据改变</font></p><p>此方法适用于<a href="https://react.docschina.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#when-to-use-derived-state">罕见的用例</a>，即 state 的值在任何时候都取决于 props</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// todo getDerivedStateFromProps必须要加static, 需要有state</span><br>  <span class="hljs-comment">// todo 根据props的值得到一个新的state(可以有一个state，让这个state的值一直保持和某个props一致)</span><br>  <span class="hljs-comment">// todo 里面必须要返回一个对象或者null</span><br> state = &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-attr">prevCount</span>: <span class="hljs-number">10</span>,<br>  &#125;;<br><span class="hljs-comment">// 父级初始值为20,设置了定时器，2秒后变成40，每次改变都会触发该生命周期</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFromProps</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;getDerivedStateFromProps&quot;</span>）<br>    <span class="hljs-comment">// todo 1. nextProps.num 20, nextState.prevCount 10 -&gt; count 20 prevCount 20</span><br>    <span class="hljs-comment">// todo 2. nextProps.num 40, nextState.prevCount 20 -&gt; count 40 prevCount 40</span><br>    <span class="hljs-comment">// todo 3. nextProps.num 40, nextState.prevCount 40 -&gt; null //最后一次state的触发结果</span><br>    <span class="hljs-keyword">if</span> (nextProps.<span class="hljs-property">num</span> === nextState.<span class="hljs-property">prevCount</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">count</span>: nextProps.<span class="hljs-property">num</span>,<br>        <span class="hljs-attr">prevCount</span>: nextProps.<span class="hljs-property">num</span>,<br>      &#125;;<br>    &#125;<br>  &#125;<br><span class="hljs-comment">// 修改后触发 static getDerivedStateFromProps</span><br><span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">80</span>,<br>      &#125;);<br>    &#125;, <span class="hljs-number">4000</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>2.getSnapshotBeforeUpdate</strong> <font color='each'>不常用</font></p><p><font color='each'>描述：在更新之前得到一个快照</font> <font color='each'>注意！必须和 componentDidUpdate 一起使用</font></p><p>作用：在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期的任何返回值将作为参数传递给 <code>componentDidUpdate()</code>。</p><p>此用法并不常见，但它可能出现在 UI 处理中，如需要以特殊方式处理滚动位置的聊天线程等。</p><p>应返回 snapshot 的值（或 <code>null</code>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// todo 在更新之前得到一个快照</span><br><span class="hljs-comment">// todo 必须和componentDidUpdate一起使用</span><br><span class="hljs-comment">// todo 可以得到dom更新前的ui信息</span><br><span class="hljs-comment">// todo 此用法并不常见，但它可能出现在 UI 处理中，如需要以特殊方式处理滚动位置的聊天线程等。</span><br><span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params">prevProps, prevState</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;getSnapshotBeforeUpdate&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">123</span>;<br>&#125;<br><span class="hljs-comment">// todo 传递给dom更新以后</span><br><span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState, snapshot</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;componentDidUpdate&quot;</span>, snapshot);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React小记（一）</title>
    <link href="/2022/08/30/React%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/08/30/React%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="React-学习总结（一）"><a href="#React-学习总结（一）" class="headerlink" title="React 学习总结（一）"></a>React 学习总结（一）</h1><h1 id="1、组件中的-DOM-样式"><a href="#1、组件中的-DOM-样式" class="headerlink" title="1、组件中的 DOM 样式"></a>1、组件中的 DOM 样式</h1><hr><h3 id="第一种：行内样式"><a href="#第一种：行内样式" class="headerlink" title="第一种：行内样式"></a>第一种：行内样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">// 注意这里的两个括号，第一个表示我们在要JSX里插入JS了，第二个是对象的括号<br> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:</span>&#x27;<span class="hljs-attr">red</span>&#x27;, <span class="hljs-attr">fontSize:</span>&#x27;<span class="hljs-attr">14px</span>&#x27;&#125;&#125;&gt;</span>Hello world<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="第二种：class-样式引入"><a href="#第二种：class-样式引入" class="headerlink" title="第二种：class 样式引入"></a>第二种：class 样式引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">import &quot;./02-style.css&quot;;//引入写好的样式<br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>class添加样式<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>&#123;/* class属性，要写成className */&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;font&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>hello react!!!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="第三种：styled-components"><a href="#第三种：styled-components" class="headerlink" title="第三种：styled-components"></a>第三种：styled-components</h3><p><strong><code>styled-components</code>是针对 React 写的一套 css-in-js 框架，简单来讲就是在 js 中写 css。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;styled-components&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">BlueBig</span> = styled.<span class="hljs-property">p</span><span class="hljs-string">`</span><br><span class="hljs-string">  color: blue;</span><br><span class="hljs-string">  /* font-size: 50px; */</span><br><span class="hljs-string">  font-size: <span class="hljs-subst">$&#123;(props) =&gt; props.size&#125;</span>px; //可进行处理</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure><h3 id="第四种：classnames【不同的条件添加不同的样式】"><a href="#第四种：classnames【不同的条件添加不同的样式】" class="headerlink" title="第四种：classnames【不同的条件添加不同的样式】"></a>第四种：<strong>classnames</strong>【不同的条件添加不同的样式】</h3><p>有时候需要根据不同的条件添加不同的样式，比如：完成状态，完成是绿色，未完成是红色。那么这种情况下，我们推荐使用<a href="https://www.npmjs.com/package/classnames">classnames</a>这个包：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//! 引入classNames，用于不同的条件添加不同的样式</span><br><span class="hljs-keyword">import</span> classNames <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;classnames/bind&quot;</span>;<br><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./03-style.css&quot;</span>;<br><span class="hljs-keyword">let</span> cx = classNames.<span class="hljs-title function_">bind</span>(styles);<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> className = <span class="hljs-title function_">cx</span>(&#123;<br>    <span class="hljs-comment">// key表示类名，value表示变量或者表达式</span><br>    <span class="hljs-attr">green</span>: props.<span class="hljs-property">num</span> === <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-attr">red</span>: props.<span class="hljs-property">num</span> === <span class="hljs-string">&quot;2&quot;</span>,<br>    <span class="hljs-attr">big</span>: <span class="hljs-literal">true</span>,<br>  &#125;);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">// &lt;div className=&#123;props.num === &quot;1&quot; ? &quot;green&quot; : &quot;red&quot;&#125;&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;className&#125;</span>&gt;</span>hello react!! - &#123;props.num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2、受控组件和非受控组件"><a href="#2、受控组件和非受控组件" class="headerlink" title="2、受控组件和非受控组件"></a>2、受控组件和非受控组件</h1><hr><p><strong>受控组件：</strong>如果将<code>React</code>里的<code>state</code>属性和表单元素的值建立依赖关系，再通过<code>onChange</code>事件与<code>setState()</code>结合更新<code>state</code>属性，就能达到控制用户输入过程中表单发生的操作。被<code>React</code>以这种方式控制取值的表单输入元素就叫做<strong>受控组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;h2&gt;form表单&lt;/h2&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.textVlaue&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange1&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.areaValue&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange2&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.selectValue&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange3&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span>//disabled 不能被选择</span><br><span class="language-xml">            -- 请选择 --</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>未知<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br>        我已阅读&#123;<span class="hljs-string">&quot; &quot;</span>&#125;<br>        &lt;input<br>          type=<span class="hljs-string">&quot;checkbox&quot;</span><br>          checked=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">checked</span>&#125;<br>          onChange=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">handleChange4</span>&#125;<br>        /&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>btn<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>非受控组件：</strong><code>input</code>标签它实际也是一个<code>DOM</code>元素，我们可以用获取<code>DOM</code>元素信息的方式来获取表单元素的值呢？也就是<a href="https://link.zhihu.com/?target=https://zh-hans.reactjs.org/docs/refs-and-the-dom.html">使用 ref</a> 来从 DOM 节点中获取表单数据。【有三种获取 DOM 节点的写法】</p><p>关键代码：<font color='Peach'> ipt = createRef();<br>　　　　　 this.ipt.current 获取 DOM 元素</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span>, createRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br> <span class="hljs-comment">//todo createRef用来做非受控组件的</span><br> <span class="hljs-comment">//todo createRef()返回的是一个地址引用</span><br>  ipt = <span class="hljs-title function_">createRef</span>();<br><span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// console.log(this.ipt.current);是input标签</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">ipt</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>);<span class="hljs-comment">//获取表单的值</span><br>  &#125;<br>   &#123;<span class="hljs-comment">/* 非受控组件的初始值要用defaultValue */</span>&#125;<br>   &lt;input type=<span class="hljs-string">&quot;text&quot;</span> ref=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">ipt</span>&#125; defaultValue=<span class="hljs-string">&quot;abc&quot;</span> /&gt;<br><br>    <span class="hljs-comment">// 箭头函数的写法获取input标签 (工作中用的多)</span><br>     <span class="hljs-keyword">let</span> &#123;inputDom&#125; = <span class="hljs-variable language_">this</span> <span class="hljs-comment">//直接在实例中结构,就可以获取input标签了</span><br>     &lt;input type=<span class="hljs-string">&quot;text&quot;</span> ref=&#123;<span class="hljs-function">(<span class="hljs-params">currentNode</span>) =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">inputDom</span> = currentNode&#125; defaultValue=<span class="hljs-string">&quot;abc&quot;</span> /&gt;<br>    <span class="hljs-comment">//要被废弃的一种,字符串形式ref打标识, 实例属性refs来收集,键值对形式</span><br>     /   <span class="hljs-keyword">let</span> &#123;input1&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span> 获取input1标签<br>     &lt;input type=<span class="hljs-string">&quot;text&quot;</span> ref=<span class="hljs-string">&#x27;input1&#x27;</span> defaultValue=<span class="hljs-string">&quot;abc&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h1 id="3、setState"><a href="#3、setState" class="headerlink" title="3、setState"></a>3、setState</h1><hr><p><strong>接受一个对象的形式</strong>：如果改变后的值不需要依赖上一次的值，最好用对象，更加方便</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//todo 可以接收第一个参数是对象，第二个参数是回调函数，在改变结束以后调用</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<br>  &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">10</span>,<br>  &#125;,<br>  <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p><strong>setState 是可以接收一个函数, 第二个参数是回调函数</strong>：如果改变后的值需要依赖上一次的值，最好用函数，更加安全</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<br>     <span class="hljs-function">(<span class="hljs-params">prevState，props</span>) =&gt;</span> &#123; <span class="hljs-comment">//可以接收上一个数据和props值</span><br>       <span class="hljs-keyword">return</span> &#123;<br>         <span class="hljs-attr">count</span>: prevState.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>,<br>       &#125;;<br>     &#125;,<br>     <span class="hljs-function">() =&gt;</span> &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>);<br>     &#125;<br>   );<br></code></pre></td></tr></table></figure><h1 id="4、状态提升（将公用数据放在父组件）"><a href="#4、状态提升（将公用数据放在父组件）" class="headerlink" title="4、状态提升（将公用数据放在父组件）"></a>4、状态提升（将公用数据放在父组件）</h1><hr><p><strong>理解：</strong><code>React的状态提升就是用户对子组件操作，子组件不改变自己的状态，通过自己的props把这个操作改变的数据传递给父组件，改变父组件的状态，从而改变受父组件控制的所有子组件的状态，这也是React单项数据流的特性决定的</code>。</p><hr><p><font color='Rhodamine'><strong>官方的原话是</strong>：共享 state(状态) 是通过将其移动到需要它的组件的最接近的共同祖先组件来实现的。 这被称为“状态提升(Lifting State Up)”。</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-literal">undefined</span>,<br>  &#125;;<br>  <span class="hljs-title function_">getCount</span>(<span class="hljs-params">count</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      count,<br>    &#125;);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>状态提升 - &#123;this.state.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> <span class="hljs-attr">onGetCount</span>=<span class="hljs-string">&#123;this.getCount.bind(this)&#125;</span> /&gt;</span> 数据方法都放在父组件，子组件调用即</span><br><span class="language-xml">        可使用</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;this.state.count&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5、this-的指向问题"><a href="#5、this-的指向问题" class="headerlink" title="5、this 的指向问题"></a>5、this 的指向问题</h1><hr><p>1、<font color="red">内联地使用 bind, 不是很推荐，bind 会产生新函数，会增加内存消耗</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button onClick=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">handleClick</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>)&#125;&gt;btn&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>2、<font color='each'>在 constructor 里面调用 this.xxx = this.xxx.bind(this); 比较推荐</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleClick</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleClick</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p>3、<font color='Peach'>箭头函数，箭头函数的 this 指向外层, 推荐</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="6、事件传参问题"><a href="#6、事件传参问题" class="headerlink" title="6、事件传参问题"></a>6、事件传参问题</h1><hr><p>1、<font color="red">使用内联的 bind(this, xxx), bind 会产生新函数，新函数不会自动调用，并且 bind 的第二个参数会作为新函数的第一个参数, 不推荐，会增加内存</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">remove = (id, e) =&gt; &#123; <span class="hljs-comment">// e 参数是event</span><br>    console.log(id, e);<br>  &#125;;<span class="hljs-comment">//事件</span><br> &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.remove.bind(<span class="hljs-built_in">this</span>, item.id)&#125;&gt;删除&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>2、<font color='each'>使用内联的箭头函数，多套了一层，触发外层，里层自动执行, 不是特别推荐，因为会产生新函数增加内存, <strong>但是这是项目里面用的最多的方式</strong></font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button onClick=&#123; <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">remove</span>(item.<span class="hljs-property">id</span>, e) &#125;&gt;删除&lt;/button&gt; e 参数是event<br>remove = <span class="hljs-function">(<span class="hljs-params">id, e</span>) =&gt;</span> &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id, e);<br> &#125;;<span class="hljs-comment">//事件</span><br></code></pre></td></tr></table></figure><p>3、<font color='Peach'> 柯里化函数，外层自动调用，里层点击后调用, 最推荐的方式</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">remove = <span class="hljs-function">(<span class="hljs-params">id, num</span>) =&gt;</span> <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  e.<span class="hljs-title function_">stopPropagation</span>(); <span class="hljs-comment">//阻止事件冒泡</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id, e, num); <span class="hljs-comment">// e 为event</span><br>&#125;;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.remove(item.id,</span> <span class="hljs-attr">123</span>)&#125;&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><h1 id="7、createContext-【跨组件通信】"><a href="#7、createContext-【跨组件通信】" class="headerlink" title="7、createContext 【跨组件通信】"></a>7、createContext 【跨组件通信】</h1><hr><p>关键代码：<font color='Peach'>{ Provider, Consumer } = createContext()</font></p><p><font color='each'>在 react 没有类似 vue 中的事件总线来解决这个问题，我们只能借助它们共同的父级组件来实现，将非父子关系装换成多维度的父子关系。react 提供了<code>context</code> api 来实现跨组件通信, React 16.3 之后的<code>context</code>api 较之前的好用。</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// todo 引入createContext，用于跨组件通信</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span>, createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// todo 执行以后会返回context对象</span><br><span class="hljs-keyword">const</span> context = <span class="hljs-title function_">createContext</span>();<br><span class="hljs-comment">// todo  提供者    消费者 export暴露组件，可以给需要的组件用</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Provider</span>, <span class="hljs-title class_">Consumer</span> &#125; = context;<br><span class="hljs-comment">// todo Provider使用的时候需要又一个属性value，包在父级的&lt;&gt;&lt;/&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">count:</span> <span class="hljs-attr">123</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">name:</span> <span class="hljs-attr">this.state.name</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">  &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span>;<br><span class="hljs-comment">// todo Consumer里面需要写一个函数，函数可以接收一个value参数，需要返回jsx</span><br><span class="hljs-comment">// todo import后面的解构用as取别名，普通对象用冒号取别名</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Abc</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App&quot;</span>;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  child组件 -</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Consumer</span>&gt;</span></span><br><span class="language-xml">    &#123;&quot; &quot;&#125;</span><br><span class="language-xml">    //可以用别名，Abc</span><br><span class="language-xml">    &#123;(value) =&gt; (</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        &#123;value.count&#125; - &#123;value.name&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    )&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Consumer</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><p><font color='Peach'>1.父组件将自己的状态传递给子组件，子组件当做属性来接收，当父组件更改自己状态的时候，子组件接收到的属性就会发生改变</font></p><p><font color='orange'>2.父组件利用<code>ref</code>对子组件做标记，通过调用子组件的方法以更改子组件的状态,也可以调用子组件的方法..</font></p><p><strong>子组件与父组件通信</strong></p><p><font color='Salmon '><strong>父组件将自己的某个方法传递给子组件，在方法里可以做任意操作，比如可以更改状态，子组件通过<code>this.props</code>接收到父组件的方法后调用</strong></font></p><h2 id="——–未完待续———"><a href="#——–未完待续———" class="headerlink" title="——–未完待续———-"></a>——–未完待续———-</h2>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Promise实现简单的红绿灯效果</title>
    <link href="/2022/08/30/%E7%94%A8Promise%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%A2%E7%BB%BF%E7%81%AF%E6%95%88%E6%9E%9C/"/>
    <url>/2022/08/30/%E7%94%A8Promise%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%BA%A2%E7%BB%BF%E7%81%AF%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="用-Promise-实现一个简单的红绿灯效果"><a href="#用-Promise-实现一个简单的红绿灯效果" class="headerlink" title="用 Promise 实现一个简单的红绿灯效果"></a>用 Promise 实现一个简单的红绿灯效果</h1><hr><p><strong>JS 部分：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// js部分</span><br><span class="hljs-keyword">const</span> delay = &#123;<br>  <span class="hljs-attr">query</span>: <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(), <span class="hljs-comment">//初始化一个状态为成功的Promise对象</span><br>  <span class="hljs-title function_">wait</span>(<span class="hljs-params">timer</span>) &#123;<br>    <span class="hljs-comment">// this.query.then()返回值是一个状态为成功的Promise对象,重新赋值给query</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(), timer); <span class="hljs-comment">//到达特定时间返回成功的结果</span><br>      &#125;);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>; <span class="hljs-comment">// 将delay作为返回值</span><br>  &#125;,<br>  <span class="hljs-title function_">task</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>.<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">callback</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">//---------------------红绿灯效果------------------</span><br><br><span class="hljs-keyword">let</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#box&quot;</span>);<br>[...box.<span class="hljs-property">children</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">el</span>) =&gt;</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(el, delay));<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(box, delay); <span class="hljs-comment">//box也是对象,可以使用assign合并delay对象,使其有delay方法</span><br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  box<br>    .<span class="hljs-title function_">task</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      box.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>].<span class="hljs-property">style</span> = <span class="hljs-string">`background-color:red`</span>;<br>    &#125;)<br>    .<span class="hljs-title function_">wait</span>(<span class="hljs-number">2000</span>)<br>    .<span class="hljs-title function_">task</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      box.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>].<span class="hljs-property">style</span> = <span class="hljs-string">`background-color:black`</span>;<br>      box.<span class="hljs-property">children</span>[<span class="hljs-number">1</span>].<span class="hljs-property">style</span> = <span class="hljs-string">`background-color:green`</span>;<br>    &#125;)<br>    .<span class="hljs-title function_">wait</span>(<span class="hljs-number">2000</span>)<br>    .<span class="hljs-title function_">task</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      box.<span class="hljs-property">children</span>[<span class="hljs-number">1</span>].<span class="hljs-property">style</span> = <span class="hljs-string">`background-color:black`</span>;<br>      box.<span class="hljs-property">children</span>[<span class="hljs-number">2</span>].<span class="hljs-property">style</span> = <span class="hljs-string">`background-color:yellow`</span>;<br>    &#125;)<br>    .<span class="hljs-title function_">wait</span>(<span class="hljs-number">2000</span>)<br>    .<span class="hljs-title function_">task</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      box.<span class="hljs-property">children</span>[<span class="hljs-number">2</span>].<span class="hljs-property">style</span> = <span class="hljs-string">`background-color:black`</span>;<br>    &#125;);<br>&#125;, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p><strong>html 部分：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">     <span class="hljs-selector-id">#box</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">       <span class="hljs-attribute">justify-content</span>: space-around;</span><br><span class="language-css">       <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">20</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>);</span><br><span class="language-css">       <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">       <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-id">#box</span> &gt; <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">       <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">       <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;</span><br><span class="language-css">       <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br></code></pre></td></tr></table></figure><hr><h3 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h3><img src="https://lcsblogs.com/img2/10001.gif"  alt="图片"  />]]></content>
    
    
    <categories>
      
      <category>js面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于vue3</title>
    <link href="/2022/08/30/vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <url>/2022/08/30/vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px" /><h2 id="1-Vue3-简介"><a href="#1-Vue3-简介" class="headerlink" title="1.Vue3 简介"></a>1.Vue3 简介</h2><ul><li>2020 年 9 月 18 日，Vue.js 发布 3.0 版本，代号：One Piece（海贼王）</li><li>耗时 2 年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个 RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次 PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99 位贡献者</a></li><li>github 上的 tags 地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="2-Vue3-带来了什么"><a href="#2-Vue3-带来了什么" class="headerlink" title="2.Vue3 带来了什么"></a>2.Vue3 带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少 41%</p></li><li><p>初次渲染快 55%, 更新渲染快 133%</p></li><li><p>内存减少 54%</p><p>……</p></li></ul><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p>使用 Proxy 代替 defineProperty 实现响应式</p></li><li><p>重写虚拟 DOM 的实现和 Tree-Shaking</p><p>……</p></li></ul><h3 id="3-拥抱-TypeScript"><a href="#3-拥抱-TypeScript" class="headerlink" title="3.拥抱 TypeScript"></a>3.拥抱 TypeScript</h3><ul><li>Vue3 可以更好的支持 TypeScript</li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li><p>Composition API（组合 API）</p><ul><li>setup 配置</li><li>ref 与 reactive</li><li>watch 与 watchEffect</li><li>provide 与 inject</li><li>……</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment</li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除 keyCode 支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><h1 id="一、创建-Vue3-0-工程"><a href="#一、创建-Vue3-0-工程" class="headerlink" title="一、创建 Vue3.0 工程"></a>一、创建 Vue3.0 工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span><br>vue --version<br><span class="hljs-comment">## 安装或者升级你的@vue/cli</span><br>npm install -g @vue/cli<br><span class="hljs-comment">## 创建</span><br>vue create vue_test<br><span class="hljs-comment">## 启动</span><br><span class="hljs-built_in">cd</span> vue_test<br>npm run serve<br></code></pre></td></tr></table></figure><h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite 官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li>什么是 vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite 构建对比图</li></ul><!-- <img src="https://cn.vitejs.dev/assets/bundler.37740380.png" style="width:500px;height:280px;float:left" /><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:480px;height:280px" /> --><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 创建工程</span><br>npm init vite-app &lt;project-name&gt;<br><span class="hljs-comment">## 进入工程目录</span><br><span class="hljs-built_in">cd</span> &lt;project-name&gt;<br><span class="hljs-comment">## 安装依赖</span><br>npm install<br><span class="hljs-comment">## 运行</span><br>npm run dev<br></code></pre></td></tr></table></figure><h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1-拉开序幕的-setup"><a href="#1-拉开序幕的-setup" class="headerlink" title="1.拉开序幕的 setup"></a>1.拉开序幕的 setup</h2><ol><li>理解：Vue3.0 中一个新的配置项，值为一个函数。</li><li>setup 是所有<strong style="color:#DD5145">Composition API（组合 API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在 setup 中。</li><li>setup 函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与 Vue2.x 配置混用<ul><li>Vue2.x 配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup 中的属性、方法。</li><li>但在 setup 中<strong style="color:#DD5145">不能访问到</strong>Vue2.x 配置（data、methos、computed…）。</li><li>如果有重名, setup 优先。</li></ul></li><li>setup 不能是一个 async 函数，因为返回值不再是 return 的对象, 而是 promise, 模板看不到 return 对象中的属性。（后期也可以返回一个 Promise 实例，但需要 Suspense 和异步组件的配合）</li></ol></li></ol><h2 id="2-ref-函数"><a href="#2-ref-函数" class="headerlink" title="2.ref 函数"></a>2.ref 函数</h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code><ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference 对象，简称 ref 对象）</strong>。</li><li>JS 中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了 Vue3.0 中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h2 id="3-reactive-函数"><a href="#3-reactive-函数" class="headerlink" title="3.reactive 函数"></a>3.reactive 函数</h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy 的实例对象，简称 proxy 对象）</strong></li><li>reactive 定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="4-Vue3-0-中的响应式原理"><a href="#4-Vue3-0-中的响应式原理" class="headerlink" title="4.Vue3.0 中的响应式原理"></a>4.Vue3.0 中的响应式原理</h2><h3 id="vue2-x-的响应式"><a href="#vue2-x-的响应式" class="headerlink" title="vue2.x 的响应式"></a>vue2.x 的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(data, <span class="hljs-string">&quot;count&quot;</span>, &#123;<br>  <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>  <span class="hljs-title function_">set</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0-的响应式"><a href="#Vue3-0-的响应式" class="headerlink" title="Vue3.0 的响应式"></a>Vue3.0 的响应式</h3><ul><li><p>实现原理:</p><ul><li><p>通过 Proxy（代理）: 拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过 Reflect（反射）: 对源对象的属性进行操作。</p></li><li><p>MDN 文档中描述的 Proxy 与 Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(data, &#123;<br>  <span class="hljs-comment">// 拦截读取属性值</span><br>  <span class="hljs-title function_">get</span>(<span class="hljs-params">target, prop</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, prop);<br>  &#125;,<br>  <span class="hljs-comment">// 拦截设置属性值或添加新属性</span><br>  <span class="hljs-title function_">set</span>(<span class="hljs-params">target, prop, value</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, prop, value);<br>  &#125;,<br>  <span class="hljs-comment">// 拦截删除属性</span><br>  <span class="hljs-title function_">deleteProperty</span>(<span class="hljs-params">target, prop</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(target, prop);<br>  &#125;,<br>&#125;);<br><br>proxy.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;tom&quot;</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="5-reactive-对比-ref"><a href="#5-reactive-对比-ref" class="headerlink" title="5.reactive 对比 ref"></a>5.reactive 对比 ref</h2><ul><li>从定义数据角度对比：<ul><li>ref 用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li>reactive 用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li>备注：ref 也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li>ref 通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive 通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref 定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li>reactive 定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup-的两个注意点"><a href="#6-setup-的两个注意点" class="headerlink" title="6.setup 的两个注意点"></a>6.setup 的两个注意点</h2><ul><li>setup 执行的时机<ul><li>在 beforeCreate 之前执行一次，this 是 undefined。</li></ul></li><li>setup 的参数<ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在 props 配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed-函数"><a href="#1-computed-函数" class="headerlink" title="1.computed 函数"></a>1.computed 函数</h3><ul><li><p>与 Vue2.x 中 computed 配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;computed&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br><span class="hljs-comment">//计算属性——简写</span><br>    <span class="hljs-keyword">let</span> fullName = <span class="hljs-title function_">computed</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> person.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + person.<span class="hljs-property">lastName</span><br>    &#125;)<br>    <span class="hljs-comment">//计算属性——完整</span><br>    <span class="hljs-keyword">let</span> fullName = <span class="hljs-title function_">computed</span>(&#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">return</span> person.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + person.<span class="hljs-property">lastName</span><br>        &#125;,<br>        <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>            <span class="hljs-keyword">const</span> nameArr = value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>)<br>            person.<span class="hljs-property">firstName</span> = nameArr[<span class="hljs-number">0</span>]<br>            person.<span class="hljs-property">lastName</span> = nameArr[<span class="hljs-number">1</span>]<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-watch-函数"><a href="#2-watch-函数" class="headerlink" title="2.watch 函数"></a>2.watch 函数</h3><ul><li><p>与 Vue2.x 中 watch 配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视 reactive 定义的响应式数据时：oldValue 无法正确获取、强制开启了深度监视（deep 配置失效）。</li><li>监视 reactive 定义的响应式数据中某个属性时：deep 配置有效。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//情况一：监视ref定义的响应式数据</span><br><span class="hljs-title function_">watch</span>(<br>  sum,<br>  <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;sum变化了&quot;</span>, newValue, oldValue);<br>  &#125;,<br>  &#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> &#125;<br>);<br><br><span class="hljs-comment">//情况二：监视多个ref定义的响应式数据</span><br><span class="hljs-title function_">watch</span>([sum, msg], <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;sum或msg变化了&quot;</span>, newValue, oldValue);<br>&#125;);<br><br><span class="hljs-comment">/* 情况三：监视reactive定义的响应式数据</span><br><span class="hljs-comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span><br><span class="hljs-comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_">watch</span>(<br>  person,<br>  <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;person变化了&quot;</span>, newValue, oldValue);<br>  &#125;,<br>  &#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">deep</span>: <span class="hljs-literal">false</span> &#125;<br>); <span class="hljs-comment">//此处的deep配置不再奏效</span><br><br><span class="hljs-comment">//情况四：监视reactive定义的响应式数据中的某个属性</span><br><span class="hljs-title function_">watch</span>(<br>  <span class="hljs-function">() =&gt;</span> person.<span class="hljs-property">job</span>,<br>  <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;person的job变化了&quot;</span>, newValue, oldValue);<br>  &#125;,<br>  &#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> &#125;<br>);<br><br><span class="hljs-comment">//情况五：监视reactive定义的响应式数据中的某些属性</span><br><span class="hljs-title function_">watch</span>(<br>  [<span class="hljs-function">() =&gt;</span> person.<span class="hljs-property">job</span>, <span class="hljs-function">() =&gt;</span> person.<span class="hljs-property">name</span>],<br>  <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;person的job变化了&quot;</span>, newValue, oldValue);<br>  &#125;,<br>  &#123; <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> &#125;<br>);<br><br><span class="hljs-comment">//特殊情况</span><br><span class="hljs-title function_">watch</span>(<br>  <span class="hljs-function">() =&gt;</span> person.<span class="hljs-property">job</span>,<br>  <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;person的job变化了&quot;</span>, newValue, oldValue);<br>  &#125;,<br>  &#123; <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> &#125;<br>); <span class="hljs-comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-watchEffect-函数"><a href="#3-watchEffect-函数" class="headerlink" title="3.watchEffect 函数"></a>3.watchEffect 函数</h3><ul><li><p>watch 的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect 的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect 有点像 computed：</p><ul><li>但 computed 注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而 watchEffect 更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span><br><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> x1 = sum.<span class="hljs-property">value</span>;<br>  <span class="hljs-keyword">const</span> x2 = person.<span class="hljs-property">age</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;watchEffect配置的回调执行了&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><ul><li>Vue3.0 中可以继续使用 Vue2.x 中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0 也提供了 Composition API 形式的生命周期钩子，与 Vue2.x 中钩子对应关系如下：<ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="9-自定义-hook-函数"><a href="#9-自定义-hook-函数" class="headerlink" title="9.自定义 hook 函数"></a>9.自定义 hook 函数</h2><ul><li><p>什么是 hook？—— 本质是一个函数，把 setup 函数中使用的 Composition API 进行了封装。</p></li><li><p>类似于 vue2.x 中的 mixin。</p></li><li><p>自定义 hook 的优势: 复用代码, 让 setup 中的逻辑更清楚易懂。</p></li></ul><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul><li><p>作用：创建一个 ref 对象，其 value 值指向另一个对象中的某个属性。</p></li><li><p>语法：<code>const name = toRef(person,&#39;name&#39;)</code></p></li><li><p>应用: 要将响应式对象中的某个属性单独提供给外部使用时。</p></li><li><p>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></p></li></ul><h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;input type=&quot;text&quot; v-model=&quot;keyword&quot; /&gt;<br>  &lt;h3&gt;&#123;&#123; keyword &#125;&#125;&lt;/h3&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; ref, customRef &#125; from &quot;vue&quot;;<br>export default &#123;<br>  name: &quot;Demo&quot;,<br>  setup() &#123;<br>    // let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref<br>    //自定义一个myRef<br>    function myRef(value, delay) &#123;<br>      let timer;<br>      //通过customRef去实现自定义<br>      return customRef((track, trigger) =&gt; &#123;<br>        return &#123;<br>          get() &#123;<br>            track(); //告诉Vue这个value值是需要被“追踪”的<br>            return value;<br>          &#125;,<br>          set(newValue) &#123;<br>            clearTimeout(timer);<br>            timer = setTimeout(() =&gt; &#123;<br>              value = newValue;<br>              trigger(); //告诉Vue去更新界面<br>            &#125;, delay);<br>          &#125;,<br>        &#125;;<br>      &#125;);<br>    &#125;<br>    let keyword = myRef(&quot;hello&quot;, 500); //使用程序员自定义的ref<br>    return &#123;<br>      keyword,<br>    &#125;;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><!-- <img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px" /> --><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>......<br>    <span class="hljs-keyword">let</span> car = <span class="hljs-title function_">reactive</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;奔驰&#x27;</span>,<span class="hljs-attr">price</span>:<span class="hljs-string">&#x27;40万&#x27;</span>&#125;)<br>    <span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;car&#x27;</span>,car)<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setup</span>(<span class="hljs-params">props,context</span>)&#123;<br>......<br>    <span class="hljs-keyword">const</span> car = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;car&#x27;</span>)<br>    <span class="hljs-keyword">return</span> &#123;car&#125;<br>......<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统 OptionsAPI 中，新增或者修改一个需求，就需要分别在 data，methods，computed 里修改 。</p><span style="width:600px;height:300px;overflow:hidden">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left" /></span><span style="width:300px;height:400px;overflow:hidden;">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left" /> </span><h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><span style="width:300px;height:340px;overflow:hidden" title="点击查看">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"style="height:200px"/></span><span style="width:300px;height:340px;overflow:hidden;" title="点击查看">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"style="height:200px"/></span><h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在 Vue2 中: 组件必须有一个根标签</li><li>在 Vue3 中: 组件可以没有根标签, 内部会将多个标签包含在一个 Fragment 虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是 Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件 html 结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;teleport to=&quot;移动位置&quot;&gt;<br>&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;<br>&lt;div class=&quot;dialog&quot;&gt;<br>&lt;h3&gt;我是一个弹窗&lt;/h3&gt;<br>&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/teleport&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineAsyncComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;./components/Child.vue&quot;</span>));<br></code></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;h3&gt;我是App组件&lt;/h3&gt;<br>    &lt;Suspense&gt;<br>      &lt;template v-slot:default&gt;<br>        &lt;Child /&gt;<br>      &lt;/template&gt;<br>      &lt;template v-slot:fallback&gt;<br>        &lt;h3&gt;加载中.....&lt;/h3&gt;<br>      &lt;/template&gt;<br>    &lt;/Suspense&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局-API-的转移"><a href="#1-全局-API-的转移" class="headerlink" title="1.全局 API 的转移"></a>1.全局 API 的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//注册全局组件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;MyButton&#x27;</span>, &#123;<br>  <span class="hljs-attr">data</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;),<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">//注册全局指令</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;<br>  <span class="hljs-attr">inserted</span>: <span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.<span class="hljs-title function_">focus</span>()<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0 中对这些 API 做出了调整：</p><ul><li><p>将全局的 API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data 选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x 写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.v-enter</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.v-leave</span>,<br><span class="hljs-selector-class">.v-enter-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Vue3.x 写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.v-enter-from</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.v-leave-from</span>,<br><span class="hljs-selector-class">.v-enter-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode 作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;my-component<br>  v-on:close=&quot;handleComponentEvent&quot;<br>  v-on:click=&quot;handleNativeClickEvent&quot;<br>/&gt;<br></code></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  emits: [&quot;close&quot;],<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote><hr></li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于vue2</title>
    <link href="/2022/08/30/%E5%85%B3%E4%BA%8Evue%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/30/%E5%85%B3%E4%BA%8Evue%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MVVM-的理解"><a href="#MVVM-的理解" class="headerlink" title="MVVM 的理解"></a>MVVM 的理解</h1><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">MVVM</span><span class="hljs-string">` 表示的是 `</span><span class="hljs-title class_">Model</span>-<span class="hljs-title class_">View</span>-<span class="hljs-title class_">ViewModel</span><br><span class="hljs-number">1</span>：<span class="hljs-variable constant_">MVVM</span> 是<span class="hljs-title class_">Model</span>-<span class="hljs-title class_">View</span>-<span class="hljs-title class_">ViewModel</span> 的缩写，它是一种基于前端开发的架构模式。<br><br><span class="hljs-number">2</span>：其核心是提供对<span class="hljs-title class_">View</span> 和 <span class="hljs-title class_">ViewModel</span> 的双向数据绑定，这使得<span class="hljs-title class_">ViewModel</span> 的状态改变可以自动传递给 <span class="hljs-title class_">View</span>，即所谓的数据双向绑定。<br><br><span class="hljs-number">3</span>：以<span class="hljs-title class_">Vue</span>.<span class="hljs-property">js</span> 为例。<span class="hljs-title class_">Vue</span>是一个提供了 <span class="hljs-variable constant_">MVVM</span> 风格的双向数据绑定的 <span class="hljs-title class_">Javascript</span> 库，专注于<span class="hljs-title class_">View</span> 层。<br><br><span class="hljs-number">4</span>：它的核心是 <span class="hljs-variable constant_">MVVM</span> 中的 <span class="hljs-variable constant_">VM</span>，也就是 <span class="hljs-title class_">ViewModel</span>。 <span class="hljs-title class_">ViewModel</span>负责连接 <span class="hljs-title class_">View</span> 和 <span class="hljs-title class_">Model</span>，保证视图和数据的一致性，这种轻量级的架构让前端开发<br>更加高效、便捷。<br></code></pre></td></tr></table></figure><p>Model：模型层，负责处理业务逻辑以及和服务器进行交互。<br>View：视图层，负责将数据模型转化为 UI 显示出来，可以简单的理解为 HTML 页面。<br>ViewModel：试图模型层，用来连接 Model 和 View ，是 Model 和 View 之间的桥梁。每当 V 层获取或者保存数据的时候，都要由 VM 层做中间的处理，从而交给 M 层。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">MVVM 模式简化了界面和业务的依赖，解决了数据频繁更新。MVVM 在使用当中，利用了双向绑定技术，使得 Model 在变化时，ViewModel 会自动更新，而 ViewModel 变化时，<span class="hljs-keyword">View</span> 也会自动变化。<br></code></pre></td></tr></table></figure><h1 id="vue-的优缺点"><a href="#vue-的优缺点" class="headerlink" title="vue 的优缺点"></a>vue 的优缺点</h1><hr><h4 id="vue2-优点："><a href="#vue2-优点：" class="headerlink" title="vue2 优点："></a>vue2 优点：</h4><p>1**.轻量级框架（渐进式框架）**：只关注视图层，是一个构建数据的视图集合，大小只有几十 kb</p><p>2**.简单易学（尤雨溪）**：国人开发，中文文档，不存在语言障碍，易于理解和学习</p><p>3.<strong>双向数据绑定</strong>：双向是指 ViewModel 中的 data 部分和 View 之间的双向关系。</p><p>​ 正向：数据驱动页面 反向：页面更新数据</p><p>​ 绑定是指自动化处理，data 改变了 view 随之改变，反之也是。</p><hr><h1 id="v-for-为什么要加-key"><a href="#v-for-为什么要加-key" class="headerlink" title="v-for 为什么要加 key"></a>v-for 为什么要加 key</h1><p>给属性一个唯一值，找到相同的元素，直接进行复用 （<strong>使用 key 属性可以让 diff 算法更高效，提高渲染效率）</strong></p><p><strong>vue 中使用 v-for 时为什么不能用 index 作为 key</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//当以数组为下标的index作为key值时，其中一个元素(例如增删改查)发生了变化就有可能导致所有的元素的key值发生改变diff算法时比较同级之间的不同，以key来进行关联，当对数组进行下标的变换时，比如删除第一条数据，那么以后所有的index都会发生改变，那么key自然也跟着全部发生改变，所以index作为key值是不稳定的，而这种不稳定性有可能导致性能的浪费，导致diff无法关联起上一次一样的数据。因此，能不使用index作为key就不使用index。</span><br></code></pre></td></tr></table></figure><hr><h1 id="v-if-和-v-show-的区别"><a href="#v-if-和-v-show-的区别" class="headerlink" title="v-if 和 v-show 的区别"></a>v-if 和 v-show 的区别</h1><p><strong>v-for</strong>比<strong>v-if</strong>有<strong>更高</strong>的<strong>优先级，</strong>所以两个不能一起使用（vue3 解决了这个问题)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// v-show，无论初始条件是什么元素都会渲染，它是基于简单地css渲染（给元素添加display：none）</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// v-if，是真正的条件渲染，在切换过程中条件块内事件监听和子组件适当地被销毁和重建</span><br></code></pre></td></tr></table></figure><p>总结：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;  一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好</span><br></code></pre></td></tr></table></figure><hr><h1 id="vue-常用修饰符（事件、按键、v-model）"><a href="#vue-常用修饰符（事件、按键、v-model）" class="headerlink" title="vue 常用修饰符（事件、按键、v-model）"></a>vue 常用修饰符（事件、按键、v-model）</h1><p><strong>事件修饰符</strong></p><p>.stop 阻止事件继续传播<br>.prevent 阻止标签默认行为<br>.capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理<br>.self 只当在 event.target 是当前元素自身时触发处理函数<br>.once 事件将只会触发一次<br>.passive 告诉浏览器你不想阻止事件的默认行为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;a v-<span class="hljs-attr">on</span>:click.<span class="hljs-property">stop</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;&lt;/a&gt;<br></code></pre></td></tr></table></figure><p><strong>v-model 修饰符</strong></p><ul><li><strong>.lazy</strong> - <strong>将 oninput 事件 切换成 onchange 事件</strong></li><li><strong>.numbe</strong>r - <strong>输入字符串转为有效的数字</strong></li><li><strong>.trim</strong> - <strong>输入首尾空格过</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input v-model.<span class="hljs-property">trim</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>键盘事件的修饰符</strong></p><p><strong>enter 回车键</strong><br><strong>.tab 制表键</strong><br><strong>.esc 返回键</strong><br><strong>.space 空格键</strong><br><strong>.up 向上键</strong><br><strong>.down 向下键</strong><br><strong>.left 向左建</strong><br><strong>.right 向右键</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input @keyup.<span class="hljs-property">enter</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>修饰键：(也叫系统修饰符)</strong></p><p><strong>.ctrl</strong><br><strong>.alt</strong><br><strong>.shift</strong><br><strong>.meta （就是 ctrl 旁边的 window 图标键</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>&lt;!-- 按下<span class="hljs-title class_">Ctrl</span> + enter时触发 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keydown.ctrl.13</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>v-bind 修饰符</strong></p><p>.sync .<a href="https://so.csdn.net/so/search?q=sync&spm=1001.2101.3001.7020">sync</a>修饰符，它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;comp :foo.<span class="hljs-property">sync</span>=<span class="hljs-string">&quot;bar&quot;</span>&gt;&lt;/comp&gt;<br>扩展成<br>&lt;comp :foo=<span class="hljs-string">&quot;bar&quot;</span> @<span class="hljs-attr">update</span>:foo=<span class="hljs-string">&quot;val =&gt; bar = val&quot;</span>&gt;&lt;/comp&gt;<br></code></pre></td></tr></table></figure><h1 id="keep-alive-的作用是什么？原理是什么"><a href="#keep-alive-的作用是什么？原理是什么" class="headerlink" title="keep-alive 的作用是什么？原理是什么"></a>keep-alive 的作用是什么？原理是什么</h1><p>Vue 的内置组件，当它包裹动态组件时，会缓存不活动的组件实例</p><p><strong>作用：</strong> 在组件切换过程中将状态保留在<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>中，防止重复渲染 DOM，减少加载时间及性能消耗，提高用户体验性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 将缓存 name 为 test 的组件(基本）</span><br>&lt;keep-alive include=<span class="hljs-string">&#x27;test&#x27;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span></span><br>&lt;/keep-alive&gt;<br><span class="hljs-comment">// 2. 将缓存 name 为 a 或者 b 的组件，结合动态组件使用</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">include</span>=<span class="hljs-string">&#x27;a,b&#x27;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="hljs-comment">// 3. 使用正则表达式，需使用 v-bind</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">:include</span>=<span class="hljs-string">&#x27;/a|b/&#x27;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="hljs-comment">// 4.动态判断</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">:include</span>=<span class="hljs-string">&#x27;includedComponents&#x27;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="hljs-comment">// 5. 将不缓存 name 为 test 的组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">exclude</span>=<span class="hljs-string">&#x27;test&#x27;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>生命周期函数</strong></p><ol><li><strong>activated</strong>:在组件被激活时调用，在组件第一次渲染时也会被调用，之后每次 keep-alive 激活时被调用。</li><li><strong>deactivated</strong>：在组件被停用时调用。</li></ol><p><strong>注意：</strong> 只有组件被 keep-alive 包裹时，这两个生命周期才会被调用，如果作为正常组件使用</p><p><strong>应用场景</strong></p><p>如果未使用 keep-alive 组件，则在页面回退时仍然会重新渲染页面，触发 created 钩子，使用体验不好。</p><p>在以下场景中使用 keep-alive 组件会显著提高用户体验，菜单存在多级关系（如：主页 -&gt; 列表页 -&gt; 详情页）的场景：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1.当从主页跳转列表页时，列表页组件重新渲染；</span><br><span class="hljs-comment">//2.当从详情页返回列表页时，列表页组件缓存 不重新请求数据</span><br></code></pre></td></tr></table></figure><p><strong>我们还可以通过路由中的 meta 属性来控制，是否需要缓存</strong></p><p>将 test 路由中的 meta 添加 keepAlive 属性为 true，表示当前路由组件要进行缓存。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../views/home.vue&#x27;</span>)<br>&#125;,<br>&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/test&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test&#x27;</span>,<br>  <span class="hljs-attr">meta</span>:&#123;<br>    <span class="hljs-attr">keepAlive</span>:<span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../views/test.vue&#x27;</span>)<br></code></pre></td></tr></table></figure><p>keep-alive 代码可以结合 v-if 进行包裹，如果 meta 中的 keepAlive 为 true 进行缓存，否侧不进行缓存。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;keep-alive&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;$route.meta.keepAlive&quot;</span> /&gt;</span></span><span class="hljs-comment">//缓存显示</span><br>&lt;/keep-alive&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!$route.meta.keepAlive&quot;</span> /&gt;</span></span> <span class="hljs-comment">//不缓存显示</span><br></code></pre></td></tr></table></figure><p>实际开发中，我们可以结合路由守卫来实现需要缓存组件的缓存。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">beforeRouteLeave</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) &#123;<br>    to.<span class="hljs-property">meta</span>.<span class="hljs-property">keepAlive</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-title function_">next</span>();<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="虚拟-DOM-的理解"><a href="#虚拟-DOM-的理解" class="headerlink" title="虚拟 DOM 的理解"></a>虚拟 DOM 的理解</h1><hr><p>可以那么说：</p><p>比方说有一段 html 代码，不是直接渲染，而是将 html 代码转成一个 js 的对象，这个对象存在浏览器内存中。当我们要去修改这个 html 的时候，不是不是修改，而是修改那个 js 对象，等待所有的修改都结束了，再一次性地转回成 html，渲染出来。</p><p>什么是 diff 算法？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 同级比较：目的是较少的比较次数，减低时间复杂度</span><br><span class="hljs-comment">// key的比较：目的找到相同的元素，直接进行复用</span><br></code></pre></td></tr></table></figure><hr><h1 id="vue-中组件的传值方式"><a href="#vue-中组件的传值方式" class="headerlink" title="vue 中组件的传值方式"></a>vue 中组件的传值方式</h1><hr><p><strong>父传子</strong>:</p><ol><li><p>在父组件的子组件标签上面添加自定义属性；在子组件里面添加 props 选项用于接受自定义属性</p></li><li><p>使用插槽 接收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template #abc&gt;<br>    &lt;span&gt;名字&lt;span&gt;<br>&lt;/template&gt;<br>&lt;template #default&gt;<br>    &lt;span&gt;具名插槽 --默认（default）&lt;span&gt;<br>&lt;/template&gt;<br>接收<br>&lt;slot name=&quot;abc&quot;&gt;&lt;/slot&gt;<br>&lt;slot&gt;&lt;/slot&gt;<br></code></pre></td></tr></table></figure></li><li><p>使用 this.$root访问根实例，使用this.$parent 访问父组件实例</p></li><li><p>依赖注入（vue2 没有响应式）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// provide提供者，依赖</span><br>       <span class="hljs-comment">// 向所有的子孙组件传递一个msg属性</span><br>       <span class="hljs-title function_">provide</span>(<span class="hljs-params"></span>) &#123;<br>         <span class="hljs-keyword">return</span> &#123;<br>           <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;hello&quot;</span>,<br>           <span class="hljs-attr">a</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>,<br>         &#125;;<br>       &#125;,<br><span class="hljs-comment">// inject注入</span><br>       <span class="hljs-attr">inject</span>: [<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>],<br></code></pre></td></tr></table></figure></li></ol><p><strong>子传父</strong>:</p><ol><li><p>在父组件的子组件标签上面添加自定义事件；在子组件里面调用 this.$emit(“事件名称”, “值”)去传递</p></li><li><p>使用 this.refs.xxx 来访问子组件实例</p></li><li><p>作用域插槽</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template #default=&quot;&#123; abc &#125;&quot;&gt;<br>  // 只能单取<br>  &lt;span&gt;&#123;&#123; abc &#125;&#125;&lt;/span&gt;<br>&lt;/template&gt;<br><br>&lt;template slot-scope=&quot;scope&quot;&gt;<br>  // scope 代表该作用域范围所有参数<br>  &lt;div&gt;&#123;&#123; scope.tit &#125;&#125;&lt;/div&gt;<br>  &lt;div&gt;&#123;&#123; scope.msg &#125;&#125;&lt;/div&gt;<br>  &lt;div&gt;&#123;&#123; scope.names &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>// 子组件 data() &#123; return &#123; count: 10, name:&#x27;ahha&#x27; &#125;; &#125;,<br>&lt;slot :abc=&quot;count&quot;&gt;&lt;/slot&gt;<br>&lt;slot :names=&quot;name&quot;&gt;&lt;/slot&gt;<br></code></pre></td></tr></table></figure></li></ol><p><strong>兄弟传值</strong>:</p><p>通过中央通信 let bus = new Vue()</p><p>A：methods :{ 函数{bus.$emit(‘自定义事件名’，数据)} 发送</p><p>B：created （）{bus.$on(‘A 发送过来的自定义事件名’，函数)} 进行数据接收</p><p>通过中间件</p><p><strong>传值：this.parent.$emit</strong>(“事件名”，”值”)或者<strong>this.root.$emit(</strong>(“事件名”，”值”**)**，</p><p><strong>接收</strong>：<strong>this.parent.$on</strong>(“事件名”，（“值”)=&gt;{}）或者<strong>this.root.$on</strong>(“事件名”，（“值”)=&gt;{})</p><hr><h1 id="vue-组件中的-data-为什么是个函数"><a href="#vue-组件中的-data-为什么是个函数" class="headerlink" title="vue 组件中的 data 为什么是个函数"></a>vue 组件中的 data 为什么是个函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//  对象为引用类型，当复用组件时，由于数据对象都指向同一个data对象，当在一个组件中修改data时，其他重用的组件中的data会同时被修改；而使用返回对象的函数，由于每次返回的都是一个新对象（Object的实例），引用地址不同，则不会出现这个问题。</span><br></code></pre></td></tr></table></figure><hr><h1 id="computed-和-watch-的区别"><a href="#computed-和-watch-的区别" class="headerlink" title="computed 和 watch 的区别"></a><strong>computed 和 watch 的区别</strong></h1><hr><p>computed(计算属性)：</p><ol><li><p>有缓存，他是被动的，只有当它依赖的响应数据改变，才会改变</p></li><li><p>计算属性可以同时依赖多个值</p></li><li><p><strong>根据 data 里的值加工计算出新的返回值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">computed</span>:&#123;<br>                <span class="hljs-title function_">getMoney</span>(<span class="hljs-params"></span>)&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;$&#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">money</span>+<span class="hljs-string">&quot;!&quot;</span><br>                &#125;,<br>                <span class="hljs-title function_">reverseStr</span>(<span class="hljs-params"></span>)&#123;   <span class="hljs-comment">//缓存</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">str</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>)+<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()<br>                &#125;<br>            &#125;<br>   data里的值变化了，会重新计算，值不变，会缓存<br></code></pre></td></tr></table></figure></li><li><p><strong>计算属性默认是只读的，也可以修改</strong>（通过 get 和 set 修改）<img src="C:\Users\LL\AppData\Roaming\Typora\typora-user-images\image-20220816091914677.png" alt="image-20220816091914677"></p></li></ol><p>watch(监听属性)：</p><ol><li><p>没有缓存，他是主动的，自己发生了改变，从而执行其他的事情</p></li><li><p>侦听属性只能侦听一个值</p></li><li><p>监听的函数接收两个参数，第一个是最新的值；第二个是输入之前的值</p></li><li><p>可以写成<strong>handler</strong>形式 【高级用法】</p></li><li><p>有两个属性：</p><p><strong>immediate</strong>：组件加载立即触发回调函数执行</p><p><strong>deep:</strong> deep 的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样性能开销就会非常大了，任何修改<strong>obj</strong>里面任何一个属性都会触发这个监听器里的 handler</p><p>一般监听<strong>对象</strong>和<strong>数组 （</strong>对<strong>复杂类型</strong>进行<strong>深度监听</strong></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;123&#x27;</span>,<br>             <span class="hljs-attr">from</span>:&#123; <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;333&#x27;</span>&#125;<br>&#125;;<br>&#125;,<br><span class="hljs-attr">watch</span>: &#123;<br><span class="hljs-title function_">name</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;newVal&#x27;</span>, newVal);<span class="hljs-comment">// 1234</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;oldVal&#x27;</span>, oldVal);<span class="hljs-comment">// 123</span><br>&#125;,<br>        <span class="hljs-attr">form</span>: &#123;<br><span class="hljs-title function_">handler</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;newVal&#x27;</span>, newVal);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;oldVal&#x27;</span>, oldVal);<br>&#125;,<br><span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>  <span class="hljs-comment">//深度监听，复杂类型，以监听到对象内部属性的改变</span><br>             <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 组件加载立即触发回调函数执行,false就是值变化才发生</span><br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="immediate-监听的时候是否可以获取-dom-元素"><a href="#immediate-监听的时候是否可以获取-dom-元素" class="headerlink" title="immediate 监听的时候是否可以获取 dom 元素"></a><strong>immediate 监听的时候是否可以获取 dom 元素</strong></h2><p><strong>不能</strong>（测试出来结果是 undefined），可以在$nextTick 里面获取，或者在 mounted 获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 当数据改变（改变数据时同步） 视图刷新（更新dom，异步 中间要通知观察者，调用render生成虚拟dom，比较两个虚拟dom用diff算法，在更新）</span><br><span class="hljs-comment">// 所有 我们无法 立即获取，数据改变后生成最新的dom</span><br><span class="hljs-comment">// vue 提供了一个watcher(观察每一次的dom更新，更新完成后，回调触发，在回调中获取最新的dom)</span><br><span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">()=&gt;</span>&#123;<br>  &lt;!-- 在这里获取最新的dom --&gt;<br>&#125;)<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">nextTick</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  &lt;!-- 在这里获取最新的dom --&gt;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Watch-和-computed-的区别"><a href="#Watch-和-computed-的区别" class="headerlink" title="Watch 和 computed 的区别"></a>Watch 和 computed 的区别</h2><p>computed 支持缓存，只有依赖数据发生改变,才会重新进行计算;而 watch 不支持缓存，数据变,直接会触发相应的操作</p><p>computed 不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化，而 watch 支持异步</p><p>computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于 data 中声明过或者父组件传递的 props 中的数据通过计算得到的值;而 watch 监听的函数接收两个参数，第一个参数是最新的值，第二个参数是输入之前的值</p><p>如果一个属性是由其它属性计算而来的，这个属性依赖其它属性，多对一或者一对一，一般用 computed；而当一个属性发生变化时，需要执行对应的操作，一对多，一般用 watch。</p><p><img src="C:\Users\LL\AppData\Roaming\Typora\typora-user-images\image-20220816103853851.png" alt="image-20220816103853851"></p><h1 id="nextTick-的使用"><a href="#nextTick-的使用" class="headerlink" title="$nextTick 的使用"></a>$nextTick 的使用</h1><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">异步更新队列<br>将里面的内容放到下一次事件轮询里面执行<br>等待页面渲染完再执行<br>vue并不是数据改变后dom立即更新，而是等所有数据修改之后才会更新，所以$nextTick可以在页面渲染完成之后再执行<br></code></pre></td></tr></table></figure><p>经典运用场景： better-scroll 滚动插件，请求到数据后高度撑开后页面未渲染而失效</p><p>在使用某个第三方插件时 ，希望在 vue 生成的某些 dom 动态发生变化时重新应用该插件，也会用到该方法，这时候就需要在 $nextTick 的回调函数中执行重新应用插件的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">testMsg</span>:<span class="hljs-string">&quot;原始值&quot;</span>,<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-attr">changeTxt</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">let</span> that=<span class="hljs-variable language_">this</span>;<br>      that.<span class="hljs-property">testMsg</span>=<span class="hljs-string">&quot;修改后的文本值&quot;</span>;  <span class="hljs-comment">//修改dom结构</span><br><br>      that.$nextTick(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;  <span class="hljs-comment">//使用vue.$nextTick()方法可以dom数据更新后延迟执行</span><br>        <span class="hljs-keyword">let</span> domTxt=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;h&#x27;</span>).<span class="hljs-property">innerText</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(domTxt);  <span class="hljs-comment">//输出可以看到vue数据修改后并没有DOM没有立即更新，</span><br>        <span class="hljs-keyword">if</span>(domTxt===<span class="hljs-string">&quot;原始值&quot;</span>)&#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文本data被修改后dom内容没立即更新&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文本data被修改后dom内容被马上更新了&quot;</span>);<br>        &#125;<br>      &#125;);<br>  &#125;<br></code></pre></td></tr></table></figure><hr><h1 id="vue-中-bus-的使用弊端-【事件总线】"><a href="#vue-中-bus-的使用弊端-【事件总线】" class="headerlink" title="vue 中 bus 的使用弊端 【事件总线】"></a>vue 中 bus 的使用弊端 【事件总线】</h1><p><strong>优点：</strong> 传递数据较为方便，可以进行兄弟之间，父子之间的传递<br><strong>缺点：</strong> 必须先 on<a href="https://so.csdn.net/so/search?q=%E7%9B%91%E5%90%AC&spm=1001.2101.3001.7020">监听</a>才能进行 emit 触发,<strong>$on 事件是不会自动销毁的。需要我们手动来销毁。</strong></p><p>创建 Bus.js 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//抛出Bus 供传输数据的组件引用  代码--&gt;&gt;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">const</span> bus = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>();<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> bus;<br></code></pre></td></tr></table></figure><p><strong>引用组件</strong><br>谁用谁引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Bus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../common/bus.js&quot;</span>;<br><span class="hljs-comment">//触发，“changeCurrentMsg”为触发的信号名</span><br><span class="hljs-title class_">Bus</span>.$emit(<span class="hljs-string">&quot;changeCurrentPage&quot;</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>接受信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Bus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../common/bus.js&#x27;</span>;<br><span class="hljs-comment">//创建时就要监听，也可以在created中监听</span><br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title class_">Bus</span>.$on(<span class="hljs-string">&quot;changeCurrentPage&quot;</span>,<span class="hljs-function">(<span class="hljs-params">val</span>)=&gt;</span>&#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span>=val;<br>       &#125;);<br>&#125;<br><br><span class="hljs-comment">//记得销毁，不然会叠加调用监听</span><br> beforDestroy（）&#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$off(<span class="hljs-string">&quot;vaPage&quot;</span>);  <span class="hljs-comment">//当这个组件销毁的时候bus也跟着一起销毁</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用 vue-bus 公共组件</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-number">1</span>、安装：<span class="hljs-built_in">npm</span> install vue-bus<br><span class="hljs-number">2</span>、在main.js中引入vue-bus<br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> VueBus <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-bus&#x27;</span>;<br>Vue.use(VueBus);<br></code></pre></td></tr></table></figure><p>在组件中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//触发事件</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;changeCurrentPage&quot;</span>,<span class="hljs-number">1</span>)；<br><span class="hljs-comment">//接受事件</span><br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;changeCurrentPage&quot;</span>,<span class="hljs-function">(<span class="hljs-params">val</span>)=&gt;</span>&#123;<br>           <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span>=val;<br>    &#125;);<br>&#125;<br><span class="hljs-comment">//组件销毁接触事件绑定</span><br><span class="hljs-attr">destroyed</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>　　<span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.<span class="hljs-title function_">off</span>(<span class="hljs-string">&quot;changeCurrentPage&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="vue-的生命周期的理解和各个钩子的实际使用场景"><a href="#vue-的生命周期的理解和各个钩子的实际使用场景" class="headerlink" title="vue 的生命周期的理解和各个钩子的实际使用场景"></a>vue 的生命周期的理解和各个钩子的实际使用场景</h1><hr><p>Vue2.0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">beforeCreated<br><span class="hljs-comment">// 在实例初始化之后,进行数据侦听和事件/侦听器的配置之前同步调用。  不能访问数据</span><br>created<br><span class="hljs-comment">// 在实例创建完成后被立即同步调用  可以访问数据，但是拿不到真实的dom节点</span><br>beforeMount<br><span class="hljs-comment">// 在挂载开始之前被调用</span><br>mounted<br><span class="hljs-comment">// 实例被挂载后调用  既可以拿到数据也可以拿到节点  可以拿到真的dom节点可以进行dom操作</span><br>通过ref拿到节点<br>&lt;p ref=<span class="hljs-string">&quot;parogram&quot;</span>&gt;&lt;/p&gt;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">parogram</span> 拿到节点<br>beforeUpdate<br><span class="hljs-comment">// 在数据发生改变后，DOM 被更新之前被调用</span><br>updated<br><span class="hljs-comment">// 在数据更改导致的虚拟 DOM 重新渲染和更新完毕之后被调用</span><br>beforeDestroy<br><span class="hljs-comment">// 实例销毁之前调用。在这一步，实例仍然完全可用。 清理资源，防止内存泄露</span><br>destroyed<br><span class="hljs-comment">// 实例销毁后调用</span><br>缓存阶段<br>activated.<br><span class="hljs-comment">// 被 keep-alive 缓存的组件激活时调用。</span><br>deactivated.<br><span class="hljs-comment">// 被 keep-alive 缓存的组件失活时调用。</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>创建前/后</th><th align="left">在<strong>beforeCreate</strong>阶段，vue 实例的挂载元素 el 和数据对象 data 都为 undefined（<strong>拿不到 data，不能做数据请求</strong>），还未初始化。在<strong>created</strong>阶段，vue 实例的数据对象 data 有了（<strong>能拿到 data，可以做数据请求</strong>），el 为 undefined，还未初始化</th></tr></thead><tbody><tr><td>载入前/后</td><td align="left">在<strong>beforeMount</strong>阶段，vue 实例的$el 和 data 都初始化了，但还是挂载之前为虚拟的 dom 节点，data.message 还未替换（<strong>可以做数据请求）</strong>。在<strong>mounted</strong>阶段，vue 实例挂载完成，data.message 成功渲染（<strong>可以做数据请求，获取 dom 节点）</strong></td></tr><tr><td>更新前/后</td><td align="left">当 data 变化时，会触发 beforeUpdate 和 updated 方法<strong>（数据改变后触发，数据得用，不能在 updataed 修改数据，会造成死循环）</strong></td></tr><tr><td>销毁前/后</td><td align="left">在执行 destroy 方法后，对 data 的改变不会再触发周期函数，说明此时 vue 实例已经解除了事件监听以及和 dom 的绑定，但是 dom 结构依然存在<strong>（beforeDestroy——关闭定时器、事件监听、第三方插件、websocket, destroyed 不做事情）</strong></td></tr><tr><td>错误处理阶段</td><td align="left">errorCaptured ， 用于捕获子组件的错误，然后显示回退 UI[就是一个界面，错误处理钩子函数是写在 父组件中，触发条件： 子组件出问题了</td></tr></tbody></table><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p><strong>created</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">可以访问获取数据<br>修改数据不会触发 <span class="hljs-keyword">beforeUpdate,updated钩子函数</span><br><span class="hljs-keyword"></span>可以正常向后端发起请求获取数据<br></code></pre></td></tr></table></figure><p><strong>mounted</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">可以访问获取数据<br>修改数据会触发 beforeUpdate,updated钩子函数<br><span class="hljs-keyword">this</span>.$<span class="hljs-built_in">ref</span>s找到 <span class="hljs-built_in">ref</span> 表示的节点<br>可以正常向后端发起请求获取数据<br></code></pre></td></tr></table></figure><h3 id="updated"><a href="#updated" class="headerlink" title="updated:"></a>updated:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">生命周期 - 更新阶段<br>    <span class="hljs-number">1.</span> 触发条件： 数据改变【 数据得用 】 &lt;br&gt;<br>    <span class="hljs-number">2.</span> 触发次数： 多次 &lt;hr&gt;<br>    <span class="hljs-number">3.</span> <span class="hljs-attr">updated</span>:  可以做真实<span class="hljs-variable constant_">DOM</span>操作，可以发送数据请求 &lt;hr&gt;<br></code></pre></td></tr></table></figure><p><em>特别注意:不要在 <strong>update</strong> <strong>beforeUpdate</strong> 修改数据，否则会引起死循环</em></p><h3 id="相关面试题："><a href="#相关面试题：" class="headerlink" title="相关面试题："></a>相关面试题：</h3><h3 id="初始化阶段，我们哪里拿到了虚拟-DOM-呢？"><a href="#初始化阶段，我们哪里拿到了虚拟-DOM-呢？" class="headerlink" title="初始化阶段，我们哪里拿到了虚拟 DOM 呢？"></a>初始化阶段，我们哪里拿到了虚拟 DOM 呢？</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">created之后，beforeMount前<br></code></pre></td></tr></table></figure><h3 id="初始化阶段，我们哪里拿到了真实-DOM-呢？"><a href="#初始化阶段，我们哪里拿到了真实-DOM-呢？" class="headerlink" title="初始化阶段，我们哪里拿到了真实 DOM 呢？"></a>初始化阶段，我们哪里拿到了真实 DOM 呢？</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mounted</span><br></code></pre></td></tr></table></figure><h3 id="如果有两个组件，是父子组件，父子组件的初始化阶段是如何执行顺序"><a href="#如果有两个组件，是父子组件，父子组件的初始化阶段是如何执行顺序" class="headerlink" title="如果有两个组件，是父子组件，父子组件的初始化阶段是如何执行顺序"></a>如果有两个组件，是父子组件，父子组件的初始化阶段是如何执行顺序</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3.1</span> 父组件： beforeCreate created  befo<span class="hljs-comment">reMount</span><br><span class="hljs-number">3.2</span> 子组件： beforeCreate created  befo<span class="hljs-comment">reMount  mounted</span><br><span class="hljs-number">3.3</span> 父组件： mounted<br></code></pre></td></tr></table></figure><h3 id="更新阶段真实-DOM-哪里可以拿到？"><a href="#更新阶段真实-DOM-哪里可以拿到？" class="headerlink" title="更新阶段真实 DOM 哪里可以拿到？"></a>更新阶段真实 DOM 哪里可以拿到？</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">updated</span><br></code></pre></td></tr></table></figure><h3 id="父组件更新阶段触发了，子组件是否会重新渲染"><a href="#父组件更新阶段触发了，子组件是否会重新渲染" class="headerlink" title="父组件更新阶段触发了，子组件是否会重新渲染"></a>父组件更新阶段触发了，子组件是否会重新渲染</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">父子组件是否有通信<span class="hljs-selector-attr">[恰好就是通信的数据改了]</span>，<br>  有的话应该会的<br>  没有的话就不会了<br></code></pre></td></tr></table></figure><h3 id="子组件更新阶段触发了，父组件是否会重新渲染"><a href="#子组件更新阶段触发了，父组件是否会重新渲染" class="headerlink" title="子组件更新阶段触发了，父组件是否会重新渲染"></a>子组件更新阶段触发了，父组件是否会重新渲染</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">父子组件是否有通信<span class="hljs-selector-attr">[恰好就是通信的数据改了]</span>，，<br>  有的话应该会的<br>  没有的话就不会了<br></code></pre></td></tr></table></figure><hr><h1 id="vue-中从-created-和-mouthed-中发送请求的区别是什么"><a href="#vue-中从-created-和-mouthed-中发送请求的区别是什么" class="headerlink" title="vue 中从 created 和 mouthed 中发送请求的区别是什么"></a>vue 中从 created 和 mouthed 中发送请求的区别是什么</h1><p>created</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// created在模板渲染成html前调用，此时的data已经准备完毕，el仍然是underfined，因此没有渲染成html，所以不能操作dom节点，它主要用来初始化一些数据；</span><br><br><span class="hljs-comment">// 即使created中的方法没有执行完，mounted也会被调用</span><br></code></pre></td></tr></table></figure><p>mounted</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// mounted在模板渲染成真实的html之后调用的，此时data，el都已经准备好了，可以操作html的dom节点，可以通过id之类的查找元素，也可以加载一些组件等。</span><br><br><span class="hljs-comment">// 挂载到阶段上的初始化方法通常用mounted去操作，主动调起的用methods里面封装方法</span><br></code></pre></td></tr></table></figure><hr><h1 id="router-和-route-区别"><a href="#router-和-route-区别" class="headerlink" title="$router 和 $route 区别"></a>$router 和 $route 区别</h1><hr><p><strong>$ router</strong> <strong>路由操作对象 ，只写对象</strong></p><p><strong>$ route <strong>是用来</strong>获取路由信息</strong>的,只读对象</p><p><strong>$router 是 VueRouter 的一个实例</strong></p><p>他包含了所有的路由，包括路由的跳转方法，<a href="https://so.csdn.net/so/search?q=%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">钩子函数</a>等，也包含一些子对象（例如 history）</p><p>常用的跳转连接的方法： **this.$router.push( ) ** <strong>this.$router.replace( )</strong> <strong>tihs.$router.go( )</strong></p><p><strong>thi.$router.push( )</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/login&quot;</span>);<br><span class="hljs-comment">//使用对象的形式 不带参数</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/login&quot;</span> &#125;);<br><span class="hljs-comment">//使用对象的形式，参数为地址栏上的参数</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-attr">query</span>:&#123;<span class="hljs-attr">username</span>:<span class="hljs-string">&quot;jack&quot;</span>&#125; &#125;);<br>使用对象的形式 ，参数为params 不会显示在地址栏<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;user&#x27;</span> , <span class="hljs-attr">params</span>: &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">123</span>&#125; &#125;);<br></code></pre></td></tr></table></figure><p><strong>this.$router.replace( )</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">push方法会向 history 栈添加一个新的记录，而replace方法是替换当前的页面，<br>不会向 history 栈添加一个新的记录<br><br>一般使用replace来做<span class="hljs-number">404</span>页面<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">replace</span>(’/’)<br></code></pre></td></tr></table></figure><p><strong>tihs.$router.go( )</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 页面路由跳转 前进或者后退</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>); <span class="hljs-comment">// 后退</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">go</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 前进</span><br></code></pre></td></tr></table></figure><p><strong>$ route</strong>是用来<strong>获取路由信息</strong>的</p><p><img src="https://img-blog.csdnimg.cn/20200924182516695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FnMjI3Njg3OTM3OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1</span>、$route.<span class="hljs-property">path</span><br><span class="hljs-comment">// 字符串，对应当前路由的路径，总是解析为绝对路径，如 “/foo/bar”。</span><br><br><span class="hljs-number">2</span>、$route.<span class="hljs-property">params</span><br><span class="hljs-comment">// 一个 key/value 对象，包含了 动态片段 和 全匹配片段，</span><br><span class="hljs-comment">// 如果没有路由参数，就是一个空对象。</span><br><br><span class="hljs-number">3.</span>$route.<span class="hljs-property">query</span><br>一个 key/value 对象，表示 <span class="hljs-variable constant_">URL</span> 查询参数。<br><span class="hljs-comment">// 例如，对于路径 /foo?user=1，则有 $route.query.user == 1，</span><br><span class="hljs-comment">// 如果没有查询参数，则是个空对象。</span><br><br><span class="hljs-number">4.</span>$route.<span class="hljs-property">hash</span><br>当前路由的 hash 值 (不带 #) ，如果没有 hash 值，则为空字符串。锚点<br><br><span class="hljs-number">5.</span>$route.<span class="hljs-property">fullPath</span><br><span class="hljs-comment">// 完成解析后的 URL，包含查询参数和 hash 的完整路径。</span><br><br><span class="hljs-number">6.</span>$route.<span class="hljs-property">matched</span><br><span class="hljs-comment">// 数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。</span><br><br><span class="hljs-number">7.</span>$route.<span class="hljs-property">name</span> 当前路径名字<br><span class="hljs-number">8.</span>$route.<span class="hljs-property">meta</span> 路由元信息<br></code></pre></td></tr></table></figure><hr><h1 id="路由传参的方式有几种？区别是什么"><a href="#路由传参的方式有几种？区别是什么" class="headerlink" title="路由传参的方式有几种？区别是什么"></a>路由传参的方式有几种？区别是什么</h1><hr><p>一、在路由表配置<strong>动态路由 “：id（名字）</strong>” 设置<strong>props 为 true</strong> 在组件那边用<strong>props 接收</strong></p><p>​ <strong>或者</strong> 使用<strong>this.$route.params.id</strong>取值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>   <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login/:id/:name&#x27;</span>, <span class="hljs-comment">// 这里用动态路由的方式</span><br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;login&#x27;</span>,<br>   <span class="hljs-attr">props</span>:<span class="hljs-literal">true</span>,<br>   <span class="hljs-attr">component</span>: <span class="hljs-title class_">Login</span><br>&#125;<br></code></pre></td></tr></table></figure><p>二、在路由表设置**命名路由 name:”abc” ,**params 传参 [ 不会显示在地址栏 ]</p><p>三、使用 path 来配置路由，通过 query 来传递参数，参数会在 url 后边的?id=?中显示</p><p><strong>query 和 params</strong>的区别总结：</p><ol><li>params 传参，必须使用命名路由的方式传参；</li><li>params 传参，不会显示在地址栏上，会保存在内存中，刷新会丢失，可以配合本地存储进行使用;</li><li>query 的参数会显示在地址栏上，刷新不会丢失；</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//使用对象的形式，参数为地址栏上的参数</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/login&quot;</span>,<span class="hljs-attr">query</span>:&#123;<span class="hljs-attr">username</span>:<span class="hljs-string">&quot;jack&quot;</span>&#125; &#125;);<br><span class="hljs-comment">// 使用对象的形式 ，参数为params 不会显示在地址栏</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;user&#x27;</span> , <span class="hljs-attr">params</span>: &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">123</span>&#125; &#125;);<br><br><span class="hljs-comment">//  router-link 标签传参</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; name: &#x27;login&#x27;, query: &#123; name:&#x27;zs&#x27;,age: &#x27;19&#x27; &#125;&#125;&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; path: &#x27;/login&#x27;, parmas: &#123; name:&#x27;zs&#x27;, age: &#x27;19&#x27; &#125;&#125;&quot;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h1 id="vue-的导航守卫有哪些"><a href="#vue-的导航守卫有哪些" class="headerlink" title="vue 的导航守卫有哪些"></a>vue 的导航守卫有哪些</h1><hr><p><strong>全局前置守卫</strong> <strong>router.beforeEach</strong> 主要用来路由鉴权</p><p>to:即将要进入的路由对象；</p><p>from:当前路由正要离开的路由对象；</p><p>next:一定要调用该方法来解析这个钩子，否则在导航跳转时没有任何效果。执行效果依赖 next 方法的调用参数；</p><p>next()：进行管道的下一个钩子；</p><p>next(false)：中断当前的导航；</p><p>next(’/’) 或者 next({ path: ‘/’ })：跳转到一个不同的地址，在导航到一个界面时，如果不满足跳转条件，使用该方法跳转到另一个界面，代码示例如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// to: Route: 即将要进入的目标路由对象</span><br>  <span class="hljs-comment">// from: Route: 当前导航正要离开的路由</span><br>  <span class="hljs-comment">// next: Function: 一定要调用该方法来resolve这个钩子。执行效果依赖next方法的调用参数</span><br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200911093646859.png#pic_center" alt="img"></p><p><strong>全局后置守卫 —— router.afterEach()</strong></p><p>可以使用 router.afterEach() 注册一个全局后置守卫，和其他守卫(包括组单个路由独享的守卫以及组件中的守卫)不同的是，全局后置守卫不会接受 next() 函数，也不会改变导航本身；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// to: Route: 即将要进入的目标路由对象</span><br>  <span class="hljs-comment">// from: Route: 当前导航正要离开的路由</span><br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="路由独享的守卫-beforeEnter"><a href="#路由独享的守卫-beforeEnter" class="headerlink" title="路由独享的守卫 beforeEnter"></a>路由独享的守卫 beforeEnter</h5><p>与全局的 beforeEach 完全相同，如果都设置则在 beforeEach 之后紧随执行，参数 to、from、next</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/foo&quot;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Foo</span>,<br>      <span class="hljs-attr">beforeEnter</span>: <span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">//</span><br>      &#125;,<br>    &#125;,<br>  ],<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h3><p><strong>beforeRouteEnter</strong><br><strong>beforeRouteUpdate(2.2 新增)</strong><br><strong>beforeRouteLeave</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>beforeRouteEnter (to, <span class="hljs-keyword">from</span>, next) &#123;<br>   <span class="hljs-comment">// 在渲染该组件的对应路由被 confirm 前调用</span><br>   <span class="hljs-comment">// 不！能！获取组件实例 `this`</span><br>   <span class="hljs-comment">// 因为当守卫执行前，组件实例还没被创建</span><br>   <span class="hljs-comment">// next（）里面可以写成回调函数，提供vm（相当于this）参数 来访问组件的属性</span><br>    <span class="hljs-title function_">next</span>(<span class="hljs-function">(<span class="hljs-params">vm</span>) =&gt;</span> &#123;vm.<span class="hljs-property">detailInfo</span> = res.<span class="hljs-property">result</span>;&#125;);<br> &#125;,<br> beforeRouteUpdate (to, <span class="hljs-keyword">from</span>, next) &#123;<br>   <span class="hljs-comment">// 在当前路由改变，但是该组件被复用时调用</span><br>   <span class="hljs-comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span><br>   <span class="hljs-comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br>   <span class="hljs-comment">// 可以访问组件实例 `this`</span><br> &#125;,<br> beforeRouteLeave (to, <span class="hljs-keyword">from</span>, next) &#123;<br>   <span class="hljs-comment">// 导航离开该组件的对应路由时调用</span><br>   <span class="hljs-comment">// 可以访问组件实例 `this`</span><br></code></pre></td></tr></table></figure><hr><h1 id="vue-路由模式，hash-模式-和-history-模式区别"><a href="#vue-路由模式，hash-模式-和-history-模式区别" class="headerlink" title="vue 路由模式，hash 模式 和 history 模式区别"></a>vue 路由模式，hash 模式 和 history 模式区别</h1><hr><p>原理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hash —— 即地址栏 <span class="hljs-variable constant_">URL</span> 中的 <span class="hljs-comment">// # 符号（此 hash 不是密码学里的散列运算）。比如这个 URL：http://www.abc.com/#/hello，hash 的值为 #/hello。</span><br>它的特点在于：hash 虽然出现在 <span class="hljs-variable constant_">URL</span> 中，但不会被包括在 <span class="hljs-variable constant_">HTTP</span> 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。<br><br><span class="hljs-comment">// history ——  利用了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。</span><br>（需要特定浏览器支持）这两个方法应用于浏览器的历史记录栈，在当前已有的 back、forward、go 的基础之上，它们提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前的 <span class="hljs-variable constant_">URL</span>，但浏览器不会立即向后端发送请求。<br><br><span class="hljs-comment">// 因此可以说，hash 模式和 history 模式都属于浏览器自身的特性，Vue-Router 只是利用了这两个特性（通过调用浏览器提供的接口）来实现前端路由.</span><br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th>hash</th><th align="left">history</th></tr></thead><tbody><tr><td>url 显示</td><td>有#，很 Low</td><td align="left">无#，好看</td></tr><tr><td>回车刷新</td><td>可以加载到 hash 值对应页面</td><td align="left">一般就是 404 掉了</td></tr><tr><td>支持版本</td><td>支持低版本浏览器和 IE 浏览器</td><td align="left">HTML5 新推出的 API</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">history.<span class="hljs-title function_">replaceState</span>(&#123;&#125;, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;/b&#x27;</span>) <span class="hljs-comment">// 替换路由</span><br>history.<span class="hljs-title function_">pushState</span>(&#123;&#125;, <span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;/a&#x27;</span>) <span class="hljs-comment">// 路由压栈 替换当前地址 被替换地址进入访问历史</span><br>history.<span class="hljs-title function_">back</span>() <span class="hljs-comment">// 返回</span><br>history.<span class="hljs-title function_">forward</span>() <span class="hljs-comment">// 前进</span><br>history.<span class="hljs-title function_">go</span>(-<span class="hljs-number">2</span>) <span class="hljs-comment">// 后退2次</span><br><br>hash模式优缺点:<br>优点<br>只需要前端配置路由表, 不需要后端的参与<br>兼容性好, 浏览器都能支持<br>hash值改变不会向后端发送请求, 完全属于前端路由<br>缺点<br>hash值前面需要加#, 不符合url规范,也不美观<br><br>history 模式的优缺点：<br>优点：<br>符合url地址规范, 不需要#, 使用起来比较美观<br>缺点：<br>兼容性不如 hash，且需要服务端支持重定向，否则一刷新页面就<span class="hljs-number">404</span>了<br>兼容性比较差, 利用了 <span class="hljs-title class_">HTML5</span> <span class="hljs-title class_">History</span>对象中新增的 <span class="hljs-title function_">pushState</span>() 和 <span class="hljs-title function_">replaceState</span>() 方法,需要特定浏览器的支持.<br><br></code></pre></td></tr></table></figure><hr><h1 id="vue-的路由懒加载是什么"><a href="#vue-的路由懒加载是什么" class="headerlink" title="vue 的路由懒加载是什么"></a>vue 的路由懒加载是什么</h1><hr><p>文件中包含了所有的用户组件的 js 以及 css 代码，但用户可能根本不会浏览器到某些页面，也就是说根本不需要渲染某些组件，所以 vue-router 提供了一种路由懒加载机制，就是当某个路由规则匹配时，才会去加载下载并加载某个组件，此时可以提升首页的渲染速度.</p><p>路由懒加载实现的基础是组件引入方式的变化，需要使用 如下方式引入组件才可以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br>  <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>&#125;,<br>&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../page/home/HomeView.vue&#x27;</span>),<br> &#125;<br></code></pre></td></tr></table></figure><hr><h1 id="vue-中怎么动态劫持属性"><a href="#vue-中怎么动态劫持属性" class="headerlink" title="vue 中怎么动态劫持属性"></a>vue 中怎么动态劫持属性</h1><hr><p><strong>在 vue2.0 中使用 Object.defineProperty( ) 来实现 vue 数据劫持这一行为.</strong></p><p><strong>数据劫持</strong>:指的是在访问或者修改对象的某个属性时，通过一段代码拦截这个行为，进行额外的操作或者修改返回结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> vm = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>&#125;;<br><span class="hljs-keyword">let</span> vm = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(vm, <span class="hljs-string">&quot;name&quot;</span>, &#123;<br>  <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;get...&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>  &#125;,<br>  <span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;set...&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;新值&quot;</span>, newValue);<br>  &#125;,<br>&#125;);<br><span class="hljs-comment">// 多个属性 遍历数组</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(vm).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> value = vm[key];<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(vm, key, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;get....&quot;</span>);<br>      <span class="hljs-keyword">return</span> value;<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">newV</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;set....&quot;</span>);<br>      <span class="hljs-keyword">if</span> (newV !== value) &#123;<br>        value = newV;<br>      &#125;<br>    &#125;,<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>修改对象总结：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>() 可以监测到属性的获取、修改，但是新增、删除监测不到<br></code></pre></td></tr></table></figure><p><strong>修改数组总结：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//若执行的方法修改了原数组， Object.defineProperty() 监测不到数组的变化，但是若该方法不</span><br>修改原数组;<br><span class="hljs-comment">//返回一个新数组的时候， Object.defineProperty()就可以检测到数组的变化。</span><br></code></pre></td></tr></table></figure><h3 id="Proxy："><a href="#Proxy：" class="headerlink" title="Proxy："></a>Proxy：</h3><p>在 Vue3.0 中将会通过 <strong>Proxy</strong> 来替换原本的 Object.defineProperty() 来实现数据响应式。Proxy 是 ES6 中新增的功能，它可以用来自定义对象中的操作。可以说 Proxy 是 defineProperty 的升级版。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> newVm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(vm, &#123;<br>  <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;get.....&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target);<br>    <span class="hljs-keyword">return</span> target[key];<br>  &#125;,<br>  <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, newV</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;set.....&quot;</span>);<br>    <span class="hljs-keyword">if</span> (target[key] !== newV) &#123;<br>      target[key] = newV;<br>    &#125;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><p><strong>proxy 不需要对数组、对象进行比遍历，性能上比较好，而且可以完美的监听到任何方式的数据改变，唯一的缺陷就是浏览器的兼容性不好。</strong></p><hr><h1 id="Vue2-的数据响应式缺陷"><a href="#Vue2-的数据响应式缺陷" class="headerlink" title="Vue2 的数据响应式缺陷"></a>Vue2 的数据响应式缺陷</h1><hr><h3 id="修改对象："><a href="#修改对象：" class="headerlink" title="修改对象："></a>修改对象：</h3><p>Vue 无法检测 property 的添加或移除。由于 Vue 会在初始化实例时对 property 执行 getter/setter 转化，所以 property 必须在 <code>data</code> 对象上存在才能让 Vue 将它转换为响应式的。</p><p>可以使用 <code>Vue.set(object, propertyName, value)</code> 方法向嵌套对象添加响应式 property</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">set</span>(要修改的对象, 要修改的值, 修改值);<br><span class="hljs-variable language_">this</span>.$set(<span class="hljs-variable language_">this</span>.<span class="hljs-property">someObject</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>修改数组：【</p><p>1、vue 对于数组项是简单数据类型的情况没有劫持,这也导致了 vue 数组使用的一个问题，当数组项是简单数据类型时，修改数据项时视图并不会更新。</p><p>2、通过索引修改简单数据类型没有响应式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">Vue.<span class="hljs-keyword">set</span>(要修改的数组, 要修改的值, 修改值)<br><span class="hljs-keyword">this</span>.$<span class="hljs-keyword">set</span>((<span class="hljs-keyword">this</span>.数组, 要修改的值, 修改值)<br></code></pre></td></tr></table></figure><p><img src="C:\Users\LL\AppData\Roaming\Typora\typora-user-images\image-20220822171913416.png" alt="image-20220822171913416"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">因为es5的object.defineProperty无法监听对象属性的删除和添加<br>不能监听数组的变化，除了<span class="hljs-keyword">push</span><span class="hljs-regexp">/pop/</span>shift<span class="hljs-regexp">/unshift/</span>splice<span class="hljs-regexp">/spObject.definert/</span><span class="hljs-keyword">reverse</span>，其他都不行<br>Object.defineProperty只能遍历对象属性直接修改(需要深拷贝进行修改)<br></code></pre></td></tr></table></figure><hr><h1 id="vue2-的双向数据绑定的原理是什么"><a href="#vue2-的双向数据绑定的原理是什么" class="headerlink" title="vue2 的双向数据绑定的原理是什么"></a>vue2 的双向数据绑定的原理是什么</h1><hr><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 <span class="hljs-keyword">setter</span>，<span class="hljs-keyword">getter</span>，在数据变动时发布消息给订阅者，触发相应的监听回调。<br></code></pre></td></tr></table></figure><h2 id="vue3-0-怎么实现的双向数据绑定"><a href="#vue3-0-怎么实现的双向数据绑定" class="headerlink" title="vue3.0 怎么实现的双向数据绑定"></a>vue3.0 怎么实现的双向数据绑定</h2><h2 id="何为双向数据流，单向数据流呢？"><a href="#何为双向数据流，单向数据流呢？" class="headerlink" title="何为双向数据流，单向数据流呢？"></a>何为双向数据流，单向数据流呢？</h2><p>单向数据流</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">顾名思义，数据流是单向的。数据流动方向可以跟踪，流动单一，追查问题的时候可以更快捷。缺点就是写起来不太方便。要使 UI 发生变更就必须创建各种 action 来维护对应的 <span class="hljs-keyword">state</span><br></code></pre></td></tr></table></figure><p>双向数据绑定</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">数据之间是相通的，将数据变更的操作隐藏在框架内部。优点是在表单交互较多的场景下，会简化大量与业务无关的代码。缺点就是无法追踪局部状态的变化，增加了出错时 <span class="hljs-built_in">debug</span> 的难度。<br></code></pre></td></tr></table></figure><h2 id="proxy-和-object-definepropoty-的区别"><a href="#proxy-和-object-definepropoty-的区别" class="headerlink" title="proxy 和 object.definepropoty 的区别"></a>proxy 和 object.definepropoty 的区别</h2><p>（1）Object.defineProperty 监听的是对象的每个属性，而 Proxy 监听的是对象本身。</p><p>（2）使用 Object.defineProperty 需要遍历对象的每个属性，而 Proxy 则直接代理对象，不需要遍历操作。</p><p>（3）Proxy 对新增属性也可以监听，Object.defineProperty 不可。</p><p>（4）Proxy 可以监听到数组的变化。</p><h2 id="proxy-为什么可以劫持到动态绑定的属性"><a href="#proxy-为什么可以劫持到动态绑定的属性" class="headerlink" title="proxy 为什么可以劫持到动态绑定的属性"></a>proxy 为什么可以劫持到动态绑定的属性</h2><hr><h1 id="mixin-混入的使用情况"><a href="#mixin-混入的使用情况" class="headerlink" title="mixin 混入的使用情况"></a>mixin 混入的使用情况</h1><hr><p><strong>什么是 Mixin 混入</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">混入 (<span class="hljs-keyword">mixin</span>) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。<br></code></pre></td></tr></table></figure><p><strong>场景运用：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">有两个非常相似的组件，他们的基本功能是一样的，但他们之间又存在着足够的差异性。他们可能会公用一部分业务逻辑，但是他们的页面结构又不相同。这个时候就可以使用<span class="hljs-keyword">mixin</span>来让代码复用。（类似于JS库，暴露出来的方法达到函数复用的效果。又区别于JS库，它继承了vue中script所有对象，包括生命周期，data，methods）<br></code></pre></td></tr></table></figure><hr><h2 id="vue-项目的性能优化"><a href="#vue-项目的性能优化" class="headerlink" title="vue 项目的性能优化"></a>vue 项目的性能优化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1</span>、v-<span class="hljs-keyword">if</span> 和 v-show 区分使用场景<br><span class="hljs-number">2.</span>computed 和 watch 区分使用场景<br><span class="hljs-number">3.</span>v-<span class="hljs-keyword">for</span> 遍历必须为 item 添加 key，且避免同时使用 v-<span class="hljs-keyword">if</span><br><span class="hljs-number">4.</span>事件及销毁<br><span class="hljs-number">5.</span>长列表以及不需要数据劫持的场景<br></code></pre></td></tr></table></figure><hr><h1 id="vuex-的使用流程"><a href="#vuex-的使用流程" class="headerlink" title="vuex 的使用流程"></a>vuex 的使用流程</h1><hr><h3 id="vuex-官方解释："><a href="#vuex-官方解释：" class="headerlink" title="vuex 官方解释："></a>vuex 官方解释：</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Vuex 是一个专为 Vue.<span class="hljs-keyword">js </span>应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br></code></pre></td></tr></table></figure><p><strong>什么时候使用它？</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。<br><br>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 <span class="hljs-keyword">store</span> 模式就足够您所需了。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。<br></code></pre></td></tr></table></figure><p>一、创建 store 仓库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><span class="hljs-comment">// ts声明接口</span><br><span class="hljs-keyword">export</span> interface <span class="hljs-title class_">CountState</span> &#123;<br>  <span class="hljs-attr">n</span>: number;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-comment">// 最好用模块，好管理</span><br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-attr">count</span>: &#123;<br>      <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启命名空间</span><br>      <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">n</span>: <span class="hljs-number">1</span>,<br>      &#125;,<br>      <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-title function_">add</span>(<span class="hljs-params">&#123; commit &#125;, &#123; payload &#125;</span>) &#123;<br>          <span class="hljs-comment">//todo &#123; commit &#125;是store解构出来   &#123;payload&#125; 时传过来的参数，需要结构</span><br>          <span class="hljs-keyword">const</span> action = &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;addcount&quot;</span>,<br>            payload,<br>          &#125;;<br>          <span class="hljs-title function_">commit</span>(action);<br>        &#125;,<br>      &#125;,<br>      <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">addcount</span>(<span class="hljs-params">state, action</span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(action); <span class="hljs-comment">//todo  &#123;type: &#x27;count/add&#x27;, payload: &#x27;23&#x27;&#125;</span><br>          state.<span class="hljs-property">n</span> += <span class="hljs-title class_">Number</span>(action.<span class="hljs-property">payload</span>);<br>          <span class="hljs-comment">// state.n++</span><br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>main.js 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store&quot;</span>;<br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">use</span>(store).<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Antd</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><p>组件内使用：</p><p>vue2.o 用法：辅助函数： mapState 获取值 mapMutations 获取同步方法 mapActions 调用异步方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapState, mapActions, mapMutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br><br><span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&quot;count&quot;</span>, &#123;<br>      <span class="hljs-attr">n</span>: <span class="hljs-function">(<span class="hljs-params">state: any</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> state.<span class="hljs-property">n</span>;<br>      &#125;,<br>    &#125;),<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    ...<span class="hljs-title function_">mapMutations</span>(<span class="hljs-string">&quot;count&quot;</span>, [<span class="hljs-string">&quot;addcount&quot;</span>]),  <span class="hljs-comment">// ...展开预算符</span><br>    ...<span class="hljs-title function_">mapActions</span>(<span class="hljs-string">&quot;count&quot;</span>, [<span class="hljs-string">&quot;add&quot;</span>]),<br>  &#125;,<br></code></pre></td></tr></table></figure><p>vue3.o 用法 使用 useStore hooks</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>();<br>   <span class="hljs-comment">//todo computed 获取仓库值  不要忘记加上仓库名</span><br>    <span class="hljs-keyword">const</span> n = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> store.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>.<span class="hljs-property">n</span>);<br>   <span class="hljs-comment">//todo 调用 store的 mutations 方法  store.commit(&#123;type:&#x27;仓库名/方法名&#x27;&#125;)</span><br>     <span class="hljs-keyword">const</span> <span class="hljs-title function_">addcount</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      store.<span class="hljs-title function_">commit</span>(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;count/addcount&quot;</span>,<br>      &#125;);<br>    &#125;;<br>    <span class="hljs-comment">//todo 调用 store的 mutations 方法  store.dispath(&#123; type:&#x27;仓库名/方法名&#x27;,payload:要传的参数 &#125;)</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      store.<span class="hljs-title function_">dispatch</span>(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;count/add&quot;</span>,<br>        <span class="hljs-attr">payload</span>: num.<span class="hljs-property">value</span>,<br>      &#125;);<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>数据渲染: 在挂载结束阶段调用仓库的 Actions 异步方法请求数据 - 在 commit mutations 改变数据</p><hr><h1 id="组件化和模块化的区别"><a href="#组件化和模块化的区别" class="headerlink" title="组件化和模块化的区别"></a>组件化和模块化的区别</h1><hr><p>模块化：给同一个功能业务的代码起一个模块名,然后负责对应的部分</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">模块化是从代码逻辑角度划分，把一些可复用的代码，抽离为单个模块，以便于项目的维护和开发保证职能化的单一。 比如登录模块，他的功能就是登录，注册功能又是一个模块<br></code></pre></td></tr></table></figure><p>组件化：将可以复用的代码封成组件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">组件化是从<span class="hljs-type">UI界面角度划分的，从页面上每看到一个独立的区域，都可以看作一个组件</span><span class="hljs-operator">。</span>前端组件化开发是便于组件的复用，把一些可复用的<span class="hljs-type">UI元素，抽离出来不断复用便于减少代码的书写</span><br></code></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20201109161212372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1OTUzOTM3,size_16,color_FFFFFF,t_70#pic_center" alt="img" style="zoom:50%;" /><h1 id="webpack-的作用是什么"><a href="#webpack-的作用是什么" class="headerlink" title="webpack 的作用是什么"></a>webpack 的作用是什么</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack是一种前端资源构建工具，一个静态模块打包器</span><br><span class="hljs-comment">// 由于浏览器解析不了es6及以上的语法，无法编译less/sacc等，所以我们需要各种插件去es6编译es5、将less编译成css，比较杂乱，所以就有了webpack将这些插件组合在一起</span><br></code></pre></td></tr></table></figure><h1 id="webpack-的打包流程是什么"><a href="#webpack-的打包流程是什么" class="headerlink" title="webpack 的打包流程是什么"></a>webpack 的打包流程是什么</h1><p>1.初始化一个管理包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">yarn init<br></code></pre></td></tr></table></figure><p>2 、安装使用 webpack 所需要的依赖包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">yarn add webpack webpack-cli -D<br></code></pre></td></tr></table></figure><p>3、 在 package.json 文件中配置 scripts(自定义命令)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">scripts</span>: &#123;<br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>4、将新建的打包文件引入 webpack 的默认打包入口 src/index.js 中</p><p>5、在根目录下执行 yarn build 命令打包</p><hr><h1 id="axios-是怎么封装的"><a href="#axios-是怎么封装的" class="headerlink" title="axios 是怎么封装的"></a>axios 是怎么封装的</h1><hr><p><strong>封装的好处</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 统一数据请求的处理</span><br><span class="hljs-comment">// 2. 考虑底层库将来可能会切换</span><br><span class="hljs-comment">// 3. 数据请求可能设计到一些业务逻辑</span><br></code></pre></td></tr></table></figure><p>整体思维：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-number">1</span>. timeout  + baseURL<br><span class="hljs-number">2</span>. 拦截器<br><span class="hljs-number">3</span>. request函数的封装<br>    <span class="hljs-number">1</span>. 对参数的类型，对返回值的类型做约定<br>    <span class="hljs-number">2</span>. 通过<span class="hljs-keyword">method</span>不同，做对应的<span class="hljs-title function_">switch</span>操作<br></code></pre></td></tr></table></figure><p>创建 index 文件 【cookie 封装】用到了 cookie：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">setCookie</span>(<span class="hljs-params">name: string, value: string | number, n: number</span>): <span class="hljs-keyword">void</span> &#123;<br>  <span class="hljs-keyword">var</span> oDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  oDate.<span class="hljs-title function_">setDate</span>(oDate.<span class="hljs-title function_">getDate</span>() + n);<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = name + <span class="hljs-string">&quot;=&quot;</span> + value + <span class="hljs-string">&quot;;expires=&quot;</span> + oDate;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCookie</span>(<span class="hljs-params">name: string</span>): string | <span class="hljs-literal">undefined</span> &#123;<br>  <span class="hljs-keyword">var</span> str = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>;<br>  <span class="hljs-keyword">var</span> arr = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;; &quot;</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-comment">//console.log(arr[i]);</span><br>    <span class="hljs-keyword">var</span> newArr = arr[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>);<br>    <span class="hljs-keyword">if</span> (newArr[<span class="hljs-number">0</span>] == name) &#123;<br>      <span class="hljs-keyword">return</span> newArr[<span class="hljs-number">1</span>];<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeCookie</span>(<span class="hljs-params">name: string</span>): <span class="hljs-keyword">void</span> &#123;<br>  <span class="hljs-title function_">setCookie</span>(name, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">People</span>(<span class="hljs-params">name: string</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><br><span class="hljs-keyword">export</span> &#123; getCookie, setCookie, removeCookie, <span class="hljs-title class_">People</span> &#125;;<br></code></pre></td></tr></table></figure><p>创建请求 request 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">import</span> axios, &#123; <span class="hljs-title class_">AxiosInstance</span>, <span class="hljs-title class_">AxiosRequestConfig</span>, <span class="hljs-title class_">AxiosResponse</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;qs&#x27;</span>; <span class="hljs-comment">// 主要用于post请求，把请求参数转从 json换成 form date数据</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> cookie <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index&#x27;</span>;<br><br><span class="hljs-comment">//todo 创建自定义请求实例</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">ins</span>: <span class="hljs-title class_">AxiosInstance</span> = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">20000</span>,<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://59.110.226.77:5000/api/private/v1/&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">//todo 拦截器 发送请求时做操作</span><br>ins.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>((<span class="hljs-attr">config</span>: <span class="hljs-title class_">AxiosRequestConfig</span>): <span class="hljs-function"><span class="hljs-params">AxiosRequestConfig</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//todo 携带token</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">token</span>: string | <span class="hljs-literal">undefined</span> = cookie.<span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&#x27;token&#x27;</span>)<br>    config.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">&#x27;Authorization&#x27;</span>] = token; <span class="hljs-comment">// 请求头配置token.方便后端验证</span><br>    <span class="hljs-keyword">return</span> config;<br>&#125;, (<span class="hljs-attr">error</span>: any): <span class="hljs-title class_">Promise</span>&lt;any&gt; =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>&#125;)<br><span class="hljs-comment">//todo 拦截器  接收到请求时做操作</span><br>ins.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>((<span class="hljs-attr">res</span>: <span class="hljs-title class_">AxiosResponse</span>&lt;any&gt;): <span class="hljs-title class_">AxiosResponse</span>&lt;any&gt; =&gt; &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-property">data</span>;<br>&#125;, (<span class="hljs-attr">error</span>: any): <span class="hljs-title class_">Promise</span>&lt;any&gt; =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>&#125;)<br><br>interface <span class="hljs-title class_">IConfig</span> &#123;<br>    <span class="hljs-attr">url</span>: string;<br>    method?: string;<br>    data?: &#123;<br>        [<span class="hljs-attr">key</span>: string]: any;<br>    &#125;,<br>    postType?: string;<br>&#125;<br><span class="hljs-keyword">const</span> request = (&#123;<br>    url,<br>    method = <span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-comment">//请求方法</span><br>    data,<br>    postType = <span class="hljs-string">&#x27;form&#x27;</span>  <span class="hljs-comment">// formData请求方式</span><br>&#125;: <span class="hljs-title class_">IConfig</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">AxiosResponse</span>&lt;any&gt;&gt; =&gt; &#123;<br>    <span class="hljs-comment">// 根据请求的类型来进行划分</span><br>    <span class="hljs-keyword">switch</span> (method.<span class="hljs-title function_">toLocaleLowerCase</span>()) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;post&#x27;</span>: <span class="hljs-comment">// 一般作于增加</span><br>             <span class="hljs-comment">// formData请求方式</span><br>            <span class="hljs-keyword">if</span> (postType === <span class="hljs-string">&#x27;file&#x27;</span>) &#123;<br>                <span class="hljs-keyword">const</span> <span class="hljs-attr">p</span>: <span class="hljs-title class_">FormData</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>(); <span class="hljs-comment">//文件</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> data) &#123; <span class="hljs-comment">// 将data的所有参数全部给了p</span><br>                    p.<span class="hljs-title function_">append</span>(key, data[key])<br>                &#125;<br>                <span class="hljs-keyword">return</span> ins.<span class="hljs-title function_">post</span>(url, p)<br>            &#125;<br>             <span class="hljs-comment">// 普通post请求方式</span><br>            <span class="hljs-keyword">return</span> ins.<span class="hljs-title function_">post</span>(url, qs.<span class="hljs-title function_">stringify</span>(data))<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;put&#x27;</span>: <span class="hljs-comment">// 一般作于修改</span><br>            <span class="hljs-keyword">return</span> ins.<span class="hljs-title function_">put</span>(url, data)<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;delete&#x27;</span>: <span class="hljs-comment">// 删除</span><br>            <span class="hljs-keyword">return</span> ins.<span class="hljs-title function_">delete</span>(url, &#123; data &#125;)<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;patch&#x27;</span>:  <span class="hljs-comment">// 更新数据</span><br>            <span class="hljs-keyword">return</span> ins.<span class="hljs-title function_">patch</span>(url, data);<br>        <span class="hljs-attr">default</span>: <span class="hljs-comment">// get 查询</span><br>            <span class="hljs-keyword">return</span> ins.<span class="hljs-title function_">get</span>(url,&#123;<span class="hljs-attr">params</span>: data&#125;)<br>    &#125;<br>&#125;<br>get：获取数据<br>post：提交数据（表单提交+文件上传）<br>put：更新数据（所有数据推送到后端）<br>patch：更新数据（只将更改的数据推送到后端）<br><span class="hljs-keyword">delete</span>：删除数据<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> request<br></code></pre></td></tr></table></figure><hr><h1 id="vue-怎么做反向代理跨域-vue-config-js-配置跨域"><a href="#vue-怎么做反向代理跨域-vue-config-js-配置跨域" class="headerlink" title="vue 怎么做反向代理跨域 vue.config.js 配置跨域"></a>vue 怎么做反向代理跨域 vue.config.js 配置跨域</h1><hr><p><strong>主要流程：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">前端跨域 --- 反向代理 &lt;hr&gt;<br>   <span class="hljs-number">1.</span> 首先反向代理要写在  vue.<span class="hljs-property">config</span>.<span class="hljs-property">js</span>  文件中  &lt;br&gt;<br>   <span class="hljs-number">2.</span> 报什么错就是跨域问题  &lt;hr&gt;<br>   <span class="hljs-number">3.</span> 易犯错地方 &lt;br&gt;<br>     <span class="hljs-number">3.1</span> 代理标识 会起 &lt;br&gt;<br>     <span class="hljs-number">3.2</span> 改了配置文件要重启项目  &lt;br&gt;<br>     <span class="hljs-number">3.3</span> 请求的url要去掉域名和协议 &lt;br&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;send&quot;</span>&gt;</span> 发送数据请求 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>创建 vue.config.js 文件： 【项目配置文件改了，必须重启项目】</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> 项目配置文件改了，必须重启项目<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">lintOnSave</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-comment">//todo proxy就是反省代理配置</span><br>    <span class="hljs-comment">// https://m.maoyan.com/ajax/movieOnInfoList?token=&amp;optimus_uuid=70CFC3A08B7911EB8E337BEC41DC7263F6E47DC364A54B0891A2A3D261F1FCD0&amp;optimus_risk_level=71&amp;optimus_code=10</span><br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-comment">// 代理路径【域名后的第一个路径】: 代理配置</span><br>      <span class="hljs-string">&#x27;/ajax&#x27;</span>: &#123;<br>        <span class="hljs-comment">// 目标源</span><br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;https://m.maoyan.com&#x27;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//使用我们当前的服务器源来代替目标源</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="如何在相应拦截器中处理-token"><a href="#如何在相应拦截器中处理-token" class="headerlink" title="如何在相应拦截器中处理 token"></a>如何在相应拦截器中处理 token</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//todo 拦截器 发送请求时做操作</span><br>ins.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  (<span class="hljs-attr">config</span>: <span class="hljs-title class_">AxiosRequestConfig</span>): <span class="hljs-function"><span class="hljs-params">AxiosRequestConfig</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//todo 携带token</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">token</span>: string | <span class="hljs-literal">undefined</span> = cookie.<span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&quot;token&quot;</span>); <span class="hljs-comment">//获取token</span><br>    config.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">&quot;Authorization&quot;</span>] = token; <span class="hljs-comment">// 请求头配置token.方便后端验证</span><br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  (<span class="hljs-attr">error</span>: any): <span class="hljs-title class_">Promise</span>&lt;any&gt; =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br><span class="hljs-comment">//todo 拦截器  接收到请求时做操作</span><br>ins.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  (<span class="hljs-attr">res</span>: <span class="hljs-title class_">AxiosResponse</span>&lt;any&gt;): <span class="hljs-title class_">AxiosResponse</span>&lt;any&gt; =&gt; &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-property">data</span>;<br>  &#125;,<br>  (<span class="hljs-attr">error</span>: any): <span class="hljs-title class_">Promise</span>&lt;any&gt; =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h2 id="项目："><a href="#项目：" class="headerlink" title="项目："></a>项目：</h2><h3 id="图片地址变成变量注意点-：require"><a href="#图片地址变成变量注意点-：require" class="headerlink" title="图片地址变成变量注意点;：require"></a><strong>图片地址变成变量注意点;：require</strong></h3><p>需要 import 引入 或者 require（图片路径）</p><p><img src="C:\Users\LL\AppData\Roaming\Typora\typora-user-images\image-20220822212304519.png" alt="image-20220822212304519"></p><h3 id="amfe-flexible-可伸缩布局方案-postcss-pxtorem-进行移动端适配"><a href="#amfe-flexible-可伸缩布局方案-postcss-pxtorem-进行移动端适配" class="headerlink" title="amfe-flexible(可伸缩布局方案) postcss-pxtorem 进行移动端适配"></a>amfe-flexible(可伸缩布局方案) postcss-pxtorem 进行移动端适配</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>介绍amfe-flexible<br><span class="hljs-comment">// amfe-flexible是配置可伸缩布局方案，主要是将1rem设为viewWidth/10。</span><br><span class="hljs-number">2.</span>介绍postcss-pxtorem<br><span class="hljs-comment">// postcss-pxtorem是postcss的插件，用于将像素（px）单元生成rem单位。</span><br></code></pre></td></tr></table></figure><p>具体步骤：<br><strong>1. 安装两个插件</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install amfe-flexible <span class="hljs-comment">--save</span><br>npm install postcss-pxtorem <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p><strong>2. 在 main.js 导入 amfe-flexible</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;amfe-flexible&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>在安装 postcss-pxtorem 的时候会生成一个文件.postcssrc.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>          <span class="hljs-comment">// 按照设计稿750px 的 1/2</span><br>        <span class="hljs-attr">plugins</span>: [<br>         <span class="hljs-string">&quot;postcss-pxtorem&quot;</span>：&#123;<br>             <span class="hljs-attr">rootValue</span>: <span class="hljs-number">37.5</span>, <span class="hljs-comment">//根据设计稿宽度除以10进行设置，假设设计稿为375，即rootValue设为37.5</span><br>             <span class="hljs-attr">propList</span>: [<span class="hljs-string">&#x27;*&#x27;</span>], <span class="hljs-comment">//设置需要转换的属性，*为所有都进行转换</span><br>              <span class="hljs-comment">// 该项仅在使用 Circle 组件时需要</span><br>            <span class="hljs-comment">// 原因参见 https://github.com/youzan/vant/issues/1948</span><br>            <span class="hljs-attr">selectorBlackList</span>: [<span class="hljs-string">&#x27;van-circle__layer&#x27;</span>]<br>            &#125;<br>         ]<br>&#125;<br><br><span class="hljs-number">5</span>、在index.<span class="hljs-property">html</span>头部加入手机端自适应meta<br>在首页中(项目中-public-index.<span class="hljs-property">html</span>)中添加以下meta标签<br>&lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br><br></code></pre></td></tr></table></figure><hr><p>5、在 index.html 头部加入手机端自适应 meta<br>在首页中(项目中-public-index.html)中添加以下 meta 标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\LL\AppData\Roaming\Typora\typora-user-images\image-20220822211329549.png" alt="image-20220822211329549"></p><h3 id="vue-lazyload-图片资源懒加载"><a href="#vue-lazyload-图片资源懒加载" class="headerlink" title="vue-lazyload 图片资源懒加载"></a>vue-lazyload 图片资源懒加载</h3><p>对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。这样对于页面加载性能上会有很大的提升，也提高了用户体验。我们在项目中使用 Vue 的 vue-lazyload 插件：</p><p>（1）安装插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install vue-lazyload --save-dev<br></code></pre></td></tr></table></figure><p>（2）在入口文件 man.js 中引入并使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueLazyload</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-lazyload&quot;</span>;<br></code></pre></td></tr></table></figure><p>然后再 vue 中直接使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueLazyload</span>);<br></code></pre></td></tr></table></figure><p>或者添加自定义选项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueLazyload</span>, &#123;<br>  <span class="hljs-attr">preLoad</span>: <span class="hljs-number">1.3</span>,<br>  <span class="hljs-attr">error</span>: <span class="hljs-string">&quot;dist/error.png&quot;</span>,<br>  <span class="hljs-attr">loading</span>: <span class="hljs-string">&quot;dist/loading.gif&quot;</span>,<br>  <span class="hljs-attr">attempt</span>: <span class="hljs-number">1</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>（3）在 vue 文件中将 img 标签的 src 属性直接改为 v-lazy ，从而将图片显示方式更改为懒加载显示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;img v-lazy=<span class="hljs-string">&quot;/static/img/1.png&quot;</span>&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="第三方插件的按需引入"><a href="#第三方插件的按需引入" class="headerlink" title="第三方插件的按需引入"></a>第三方插件的按需引入</h3><p>我们在项目中经常会需要引入第三方插件，如果我们直接引入整个插件，会导致项目的体积太大，我们可以借助 babel-plugin-component ，然后可以只引入需要的组件，以达到减小项目体积的目的。以下为项目中引入 element-ui 组件库为例：</p><p>（1）首先，安装 babel-plugin-component ：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span><span class="hljs-keyword">babel-plugin-component </span>-D<br></code></pre></td></tr></table></figure><p>（2）然后，将 .babelrc 修改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [[<span class="hljs-string">&quot;es2015&quot;</span>, &#123; <span class="hljs-string">&quot;modules&quot;</span>: <span class="hljs-literal">false</span> &#125;]],<br>  <span class="hljs-string">&quot;plugins&quot;</span>: [<br>    [<br>      <span class="hljs-string">&quot;component&quot;</span>,<br>      &#123;<br>        <span class="hljs-string">&quot;libraryName&quot;</span>: <span class="hljs-string">&quot;element-ui&quot;</span>,<br>        <span class="hljs-string">&quot;styleLibraryName&quot;</span>: <span class="hljs-string">&quot;theme-chalk&quot;</span><br>      &#125;<br>    ]<br>  ]<br>&#125;<br><br></code></pre></td></tr></table></figure><p>（3）在 main.js 中引入部分组件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> Vue from <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Button, Select &#125; from <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><br>Vue.use(Button)<br>Vue.use(Select)<br></code></pre></td></tr></table></figure><hr><p><strong>二，Webpack 层面的优化</strong></p><h3 id="2-1、Webpack-对图片进行压缩"><a href="#2-1、Webpack-对图片进行压缩" class="headerlink" title="2.1、Webpack 对图片进行压缩"></a>2.1、Webpack 对图片进行压缩</h3><p>在 vue 项目中除了可以在 webpack.base.conf.js 中 url-loader 中设置 limit 大小来对图片处理，对小于 limit 的图片转化为 base64 格式，其余的不做操作。所以对有些较大的图片资源，在请求资源的时候，加载会很慢，我们可以用 image-webpack-loader 来压缩图片：</p><p>（1）首先，安装 image-webpack-loader ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install image-webpack-loader --save-dev<br></code></pre></td></tr></table></figure><p>（2）然后，在 webpack.base.conf.js 中进行配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,<br>  <span class="hljs-attr">use</span>:[<br>    &#123;<br>    <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>    <span class="hljs-attr">options</span>: &#123;<br>      <span class="hljs-attr">limit</span>: <span class="hljs-number">10000</span>,<br>      <span class="hljs-attr">name</span>: utils.<span class="hljs-title function_">assetsPath</span>(<span class="hljs-string">&#x27;img/[name].[hash:7].[ext]&#x27;</span>)<br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;image-webpack-loader&#x27;</span>,<br>      <span class="hljs-attr">options</span>: &#123;<br>        <span class="hljs-attr">bypassOnDebug</span>: <span class="hljs-literal">true</span>,<br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>用 element-ui 最新版 2.15.9 引入 form 表单 里面的 el-date-picker 【日期选择器】组件会报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Avoid</span> mutating a prop directly since the value will be overwritten whenever the parent component re-renders.<br><span class="hljs-title class_">Instead</span>, use a data or computed property based on the prop<span class="hljs-string">&#x27;s value. Prop being mutated: &quot;value&quot;</span><br><span class="hljs-string">从报错内容上来看，我们改动了子组件中引用的父组件的变量，也就是 props 中的数据，是不能这么操作的；</span><br><span class="hljs-string">因为Vue的单项数据流，子组件不能改动父组件props传过来的值</span><br></code></pre></td></tr></table></figure><p>解决：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">锁定组件，发现是 el-date-picker 组件抛出的警告。通过在 github 上搜索，最终找到了答案<br><br>问题出在了这个 <span class="hljs-variable constant_">PR</span> <span class="hljs-number">21806</span> 增加了 props placement 用来适应位置，但是之前的代码 created 时有给 placement 赋值。<br><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">placement</span> = <span class="hljs-variable constant_">PLACEMENT_MAP</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">align</span>] || <span class="hljs-variable constant_">PLACEMENT_MAP</span>.<span class="hljs-property">left</span>;<br><br>说白了之前 placement 是 data 的对象，现在变成 props 了，然后修改就报错了<br><br>降级<br>先卸载最新版<br>将最新版<span class="hljs-number">2.15</span><span class="hljs-number">.9</span> 降级到 <span class="hljs-number">2.15</span><span class="hljs-number">.8</span><br></code></pre></td></tr></table></figure><p>优化总结：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//代码包优化</span><br><br>屏蔽sourcemap，vue.<span class="hljs-property">config</span>.<span class="hljs-property">js</span>里面设置productionSourceMap为<span class="hljs-literal">false</span><br><br>对项目代码中的js,css,svg,ico文件进行gzip压缩，在vue-cli脚手架的配置信息中，有对代码进行压缩的配置项，例如index.<span class="hljs-property">js</span>的通用配置，productionGzip设置为<span class="hljs-literal">true</span>，但是首先需要对compress-webpack-plugin支持<br><br>对路由组件进行懒加载，在router.<span class="hljs-property">js</span>里面对组件进行按需加载<br><br><span class="hljs-comment">//2.源码优化</span><br><br>v-<span class="hljs-keyword">if</span>和v-show的选择性调用。对频繁调用的，不需要权限的显示隐藏，可以选择v-show，减少系统开销。<br><br>对item设置唯一的key值<br><br>细分vuejs组件，尽可能组件化<br><br>减少watch的数据，有些情况可用vuex取代<br><br>内容类系统的图片资源按需加载<br><br><span class="hljs-comment">//3.用户体验优化</span><br><br>防抖节流实现（按钮点击，下拉刷新，下拉搜索，上拉加载，页面滚动等情况）<br><br>骨架屏加载<br><br><span class="hljs-comment">//4.cdn资源调用</span><br><br>引入的js,css,image用cdn地址来实现<br></code></pre></td></tr></table></figure><h2 id="better-scroll-插件做滚动"><a href="#better-scroll-插件做滚动" class="headerlink" title="better-scroll 插件做滚动"></a>better-scroll 插件做滚动</h2><p>安装 better-scroll</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i <span class="hljs-string">&#x27;better-scroll&#x27;</span><br></code></pre></td></tr></table></figure><p>页面引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">import BScroll from &#x27;better-scroll&#x27;;<br></code></pre></td></tr></table></figure><p>创建实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"> bs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BScroll</span>(<span class="hljs-string">&#x27;.scroll-wrapper&#x27;</span>, &#123;<br>                pullUpLoad: &#123;  <span class="hljs-comment">// 触底</span><br>                threshold: <span class="hljs-number">100</span>,<br>                &#125;,<br>                scrollX: <span class="hljs-literal">false</span>,<br>                scrollY: <span class="hljs-literal">true</span>,<br>                click: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 不阻止点击事件</span><br>               <span class="hljs-comment">//  bounce: true, //回弹动画</span><br>              &#125;);<br>bs.on(<span class="hljs-string">&#x27;pullingUp&#x27;</span>, () =&gt; &#123;<br>               console.log(<span class="hljs-string">&quot;触底了&quot;</span>) <span class="hljs-comment">// 监听下拉是否到底，到底后就执行一次函数，可以获取新的数据</span><br>                 <span class="hljs-built_in">this</span>.moreListAsync().then((res) =&gt; &#123;<br>                 <span class="hljs-built_in">this</span>.finishMore(res)<br>                &#125;)<br>             &#125;)<br>  bs.refresh();<span class="hljs-comment">// 重新计算高度</span><br> bs.finishPullUp();<span class="hljs-comment">//告诉bs已经结束下拉行为，可以重新下拉；</span><br></code></pre></td></tr></table></figure><p>项目可说难点： 【 <strong>vue 组件中 click 事件失效</strong> 】</p><p>解决：使用了 bette-<a href="https://so.csdn.net/so/search?q=scroll&spm=1001.2101.3001.7020">scroll</a>插件做滚动。发现 better-scroll 的配置中没有设置 click：true，设置过之后 click 事件成功。</p><hr><h1 id="Vue-中组件的封装"><a href="#Vue-中组件的封装" class="headerlink" title="Vue 中组件的封装"></a>Vue 中组件的封装</h1><hr><h3 id="注册和使用一个组件"><a href="#注册和使用一个组件" class="headerlink" title="注册和使用一个组件"></a>注册和使用一个组件</h3><p>在 componet 下创建一个 button.vue 的文件，放置 button 组件代码。创建一个组建的 button 组件，，并且指定 name 为 oneButton。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one-button&quot;</span>&gt;</span>按钮组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;oneButton&quot;</span>, <span class="hljs-comment">//todo 设置名字方便注册</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.one-button</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">70</span>, <span class="hljs-number">130</span>, <span class="hljs-number">241</span>);</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>创建组件完成后，不能在项目中直接使用，需要到 main.js 中注册才可以使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一步：导入button组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">OneButton</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/button.vue&quot;</span>;<br><br><span class="hljs-comment">// 第二步：注册组件,设置(组件名，组件)</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-title class_">OneButton</span>.<span class="hljs-property">name</span>, <span class="hljs-title class_">OneButton</span>);<br></code></pre></td></tr></table></figure><p>注册完成后，组件就可以在项目中使用了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">one-button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">one-button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="封装一个-element-ui-风格的按钮"><a href="#封装一个-element-ui-风格的按钮" class="headerlink" title="封装一个 element-ui 风格的按钮"></a>封装一个 element-ui 风格的按钮</h3><p>需要使用到的知识：</p><ol><li><strong>组件通讯</strong></li><li><strong>组件插槽</strong></li><li><strong>props 校验</strong></li></ol><p>参数支持：</p><table><thead><tr><th>参数名</th><th>参数描述</th><th>参数类型</th><th>默认值</th></tr></thead><tbody><tr><td>type</td><td>按钮类型（primary/success/warning/danger/info）</td><td>string</td><td>default</td></tr><tr><td>plain</td><td>是否是朴素按钮</td><td>boolean</td><td>false</td></tr><tr><td>round</td><td>是否是圆角按钮</td><td>boolean</td><td>false</td></tr><tr><td>circle</td><td>是否是圆形按钮</td><td>boolean</td><td>false</td></tr><tr><td>disabled</td><td>是否禁用按钮</td><td>boolean</td><td>false</td></tr><tr><td>icon</td><td>图标类名</td><td>string</td><td>无</td></tr></tbody></table><p>事件支持：</p><table><thead><tr><th>事件名</th><th>事件描述</th></tr></thead><tbody><tr><td>click</td><td>点击事件</td></tr></tbody></table><p>使用<a href="https://so.csdn.net/so/search?q=%E6%8F%92%E6%A7%BD&spm=1001.2101.3001.7020">插槽</a>：</p><p>为何？ 凡是希望组件中内容可以灵活设置的地方，都需要用到 slot 插槽来自定义内容</p><p>按钮组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;template&gt;<br>  &lt;button class=&quot;one-button&quot;&gt;<br>   &lt;span&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/span&gt; //父组件可以随便定义内容了<br>  &lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>在使用时就可以直接输入文本，定义按钮文本内容了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">one-button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">one-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">one-button</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">one-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">one-button</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">one-button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="设置-button-组件的-type-属性-【让按钮支持-type-属性，使得按钮支持不同样式：】"><a href="#设置-button-组件的-type-属性-【让按钮支持-type-属性，使得按钮支持不同样式：】" class="headerlink" title="设置 button 组件的 type 属性 【让按钮支持 type 属性，使得按钮支持不同样式：】"></a>设置 button 组件的 type 属性 【让按钮支持 type 属性，使得按钮支持不同样式：】</h4><p>第一步:父组件组件传递 type 属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">one-button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">one-button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">one-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>primary按钮<span class="hljs-tag">&lt;/<span class="hljs-name">one-button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">one-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>success按钮<span class="hljs-tag">&lt;/<span class="hljs-name">one-button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">one-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>info按钮<span class="hljs-tag">&lt;/<span class="hljs-name">one-button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">one-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>danger按钮<span class="hljs-tag">&lt;/<span class="hljs-name">one-button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">one-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span>warning按钮<span class="hljs-tag">&lt;/<span class="hljs-name">one-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二步：子组件接收负组件传递的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;oneButton&#x27;</span>,<br>  <span class="hljs-comment">// 此时对props进行校验，值接收string类型的type值</span><br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">type</span>:&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>，<br>      <span class="hljs-comment">// 设置默认值：如果不传值，那么使用default</span><br>      <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;default&#x27;</span><br>    &#125;<br>  &#125;,<br>  created () &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span>)<span class="hljs-comment">//defalut primary success info danger warning</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="button-组件的-plain-属性-【添加多类名】"><a href="#button-组件的-plain-属性-【添加多类名】" class="headerlink" title="button 组件的 plain 属性 【添加多类名】"></a>button 组件的 plain 属性 【添加多类名】</h3><p>第三步:通过绑定类名的方法动态控制样式，由于 plain 类型是布尔值，所以在类型中我们使用对象的形式来控制样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one-button&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[`one-button-$&#123;type&#125;`,&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">    &#x27;is-plain&#x27;:plain</span></span><br><span class="hljs-string"><span class="hljs-tag">  &#125;]&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第四步：设置不同类型的样式，由于 plain 类型是以对象的形式在类中定义的，所以使用获取属性的方法定义样式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br><span class="hljs-comment">// 朴素按钮样式</span><br><span class="hljs-selector-class">.one-button</span>.is-plain&#123;<br>  <span class="hljs-selector-pseudo">&amp;:hover</span>,<br>  &amp;:focus&#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#489eff</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#409eff</span>;<br>  &#125;<br>&#125;<br><span class="hljs-selector-class">.one-button-primary</span>.is-plain&#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#409eff</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#ecf5ff</span>;<br>  <span class="hljs-selector-pseudo">&amp;:hover</span>,<br>  &amp;:focus&#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#409eff</span>;<br>    <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#409eff</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  &#125;<br>&#125;<br><span class="hljs-selector-class">.one-button-success</span>.is-plain&#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#67c23a</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#c2e7b0</span>;<br>  <span class="hljs-selector-pseudo">&amp;:hover</span>,<br>  &amp;:focus&#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#67c23a</span>;<br>    <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#67c23a</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="button-组件的-round-属性-button-组件的-circle-属性"><a href="#button-组件的-round-属性-button-组件的-circle-属性" class="headerlink" title="button 组件的 round 属性 button 组件的 circle 属性"></a>button 组件的 round 属性 button 组件的 circle 属性</h3><p>设置 round 属性和之前的相似，只要在组件中定义好了样式，动态获取属性值即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">circle: &#123; type: Boolean, default: false &#125;<br></code></pre></td></tr></table></figure><h3 id="button-组件中使用字体图标"><a href="#button-组件中使用字体图标" class="headerlink" title="button 组件中使用字体图标"></a>button 组件中使用字体图标</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs vue">首先需要有字体图标，我们可以去阿里巴巴矢量图标库下载。<br><br>在asset目录下新建一个fonts目录，存放我们下载到的字体图标<br><br>在main.js中引入字体图标<br>import &#x27;./assets/fonts/iconfont.css&#x27;<br><br>将下载的字体图标css文件中的类名做修改，我将icon全部改为了one-icon，并且将初始的iconfont类改为了[class*=&#x27;one-icon&#x27;]，当类名中有one-icon时使用，如下<br><br>[class*=&#x27;one-icon&#x27;] &#123;<br>  font-family: &quot;iconfont&quot; !important;<br>  font-size: 16px;<br>  font-style: normal;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>&#125;<br>.one-icon-bluetoothoff:before &#123;<br>  content: &quot;\e697&quot;;<br>&#125;<br><br>父组件传递图标名，子组件接收并且放到图标中<br>父组件传值：<br>      &lt;one-button icon=&quot;bluetoothon&quot;&gt;&lt;/one-button&gt;<br>      &lt;one-button type=&quot;primary&quot; icon=&quot;camera&quot;&gt;照相机&lt;/one-button&gt;<br>      &lt;one-button type=&quot;success&quot; icon=&quot;course&quot;&gt;&lt;/one-button&gt;<br>      &lt;one-button type=&quot;info&quot; icon=&quot;bluetooth_link&quot;&gt;&lt;/one-button&gt;<br>子组件接收：<br> icon: &#123;<br>      type: String,<br>      default: &#x27;&#x27;<br>    &#125;<br>使用接收到的字体图标。在没有传入icon时隐藏&lt;i&gt;标签，在slot插槽没有传入值时，不显示&lt;span&gt;标签<br> &lt;button class=&quot;one-button&quot; :class=&quot;[`one-button-$&#123;type&#125;`,&#123;<br>    &#x27;is-plain&#x27;:plain,<br>    &#x27;is-round&#x27;:round,<br>    &#x27;is-circle&#x27;:circle,<br>  &#125;]&quot;&gt;<br>  &lt;i v-if=&quot;icon&quot; :class=&quot;`one-icon-$&#123;icon&#125;`&quot;&gt;&lt;/i&gt;<br>  &lt;!-- 如果没传入文本插槽，则不显示span内容 --&gt;<br>   &lt;span v-if=&quot;$slots.default&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/span&gt;<br>  &lt;/button&gt;<br><br>  设置icon配套样式，使图标和文字之间有一定间隔<br>  .one-button [class*=one-icon-]+span&#123;<br>  margin-left: 5px;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h3 id="button-组件中的点击事件"><a href="#button-组件中的点击事件" class="headerlink" title="button 组件中的点击事件"></a>button 组件中的点击事件</h3><p>我们在使用组件时，直接给组件定义事件是不会被触发的。我们需要在组件中定义一个点击事件，这个点击事件不进行其他操作，只出发父组件中的点击事件。</p><p>组件中的定义点击事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one-button&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[`one-button-$&#123;type&#125;`,&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">    &#x27;is-plain&#x27;:plain,</span></span><br><span class="hljs-string"><span class="hljs-tag">    &#x27;is-round&#x27;:round,</span></span><br><span class="hljs-string"><span class="hljs-tag">    &#x27;is-circle&#x27;:circle,</span></span><br><span class="hljs-string"><span class="hljs-tag">  &#125;]&quot;</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClick&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;`one-icon-$&#123;icon&#125;`&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 如果没传入文本插槽，则不显示span内容 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;$slots.default&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>定义一个点击事件，这个点击事件的作用是调用父组件中的点击事件，并且回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>: &#123;<br>    handleClick (e) &#123;<br>      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;click&#x27;</span>, e)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>父组件在使用时定义自己的点击事件，其本质是子组件中的点击事件触发父组件中的点击事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">one-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;getInfo&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">one-button</span>&gt;</span></span><br>&lt;/div&gt;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    getInfo () &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;获取信息！！&#x27;</span>)<span class="hljs-comment">//获取信息！！</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><hr><h3 id="button-组件中的-disabled-属性"><a href="#button-组件中的-disabled-属性" class="headerlink" title="button 组件中的 disabled 属性"></a>button 组件中的 disabled 属性</h3><p>和之前相似，只要父子组件传值并且动态获取这个值并且赋给 disabled 属性,并且设置一个 disabled 样式即可。</p><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">one-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;getInfo&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">one-button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one-button&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[`one-button-$&#123;type&#125;`,&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">    &#x27;is-plain&#x27;:plain,</span></span><br><span class="hljs-string"><span class="hljs-tag">    &#x27;is-round&#x27;:round,</span></span><br><span class="hljs-string"><span class="hljs-tag">    &#x27;is-circle&#x27;:circle,</span></span><br><span class="hljs-string"><span class="hljs-tag">    &#x27;is-disabled&#x27;:disabled</span></span><br><span class="hljs-string"><span class="hljs-tag">  &#125;]&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClick&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;`one-icon-$&#123;icon&#125;`&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;$slots.default&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>// props disabled: &#123; type: Boolean, default: false &#125; // css<br>.one-button.is-disabled&#123; cursor: no-drop; &#125;<br></code></pre></td></tr></table></figure><h2 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a><a href="https://so.csdn.net/so/search?q=axios&spm=1001.2101.3001.7020">axios</a>拦截器</h2><p>请求拦截器、响应拦截器</p><ol><li>请求拦截器 在请求发送前进行必要操作处理，例如添加统一 cookie、请求体加验证、设置请求头等，相当于是对每个接口里相同操作的一个封装；</li><li>响应拦截器 同理，响应拦截器也是如此功能，只是在请求得到响应之后，对响应体的一些处理，通常是数据统一处理等，也常来判断登录失效等。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6新增详解</title>
    <link href="/2022/08/29/ES%EF%BC%96%E6%96%B0%E5%A2%9E%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/08/29/ES%EF%BC%96%E6%96%B0%E5%A2%9E%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ES6-新增详解"><a href="#ES6-新增详解" class="headerlink" title="ES6 新增详解"></a>ES6 新增详解</h1><h2 id="let-声明变量和-const-声明常量，两个都有块级作用域"><a href="#let-声明变量和-const-声明常量，两个都有块级作用域" class="headerlink" title="let 声明变量和 const 声明常量，两个都有块级作用域"></a>let 声明变量和 const 声明常量，两个都有块级作用域</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">ES5中是没有块级作用域的，并且<span class="hljs-keyword">var</span>有变量提升，在<span class="hljs-keyword">let</span>中，使用的变量一定要进行声明<br></code></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">ES6</span>中的函数定义不再使用关键字<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)，而是利用了()=&gt;来进行定义<br><br>特点：箭头函数中的<span class="hljs-variable language_">this</span>始终指向箭头函数定义时的离<span class="hljs-variable language_">this</span>最近的一个函数，如果没有最近的函数就指向<span class="hljs-variable language_">window</span>。<br></code></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">模板字符串是增强版的字符串，用反引号（`）标识，可以当作普通字符串使用，也可以用来定义多行字符串<br></code></pre></td></tr></table></figure><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ES6</span> 允许按照一定模式，从数组和对象中提取值，对变量进行赋值<br></code></pre></td></tr></table></figure><h2 id="for-…-of…循环"><a href="#for-…-of…循环" class="headerlink" title="for … of…循环"></a>for … of…循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">for</span>…of循环可以遍历数组、Set和Map结构、某些类似数组的对象、对象，以及字符串<br>应用场景<br><span class="hljs-comment">//arguments是个类数组对象，通常先要将其转换为数组才能遍历，但for...of可以直接遍历</span><br></code></pre></td></tr></table></figure><h2 id="import、export-导入导出"><a href="#import、export-导入导出" class="headerlink" title="import、export 导入导出"></a>import、export 导入导出</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">ES6标准中，<span class="hljs-keyword">Js</span>原生支持模块(module)。将<span class="hljs-keyword">JS</span>代码分割成不同功能的小块进行模块化，将不同功能的代码分别写在不同文件中，各模块只需导出公共接口部分，然后通过模块的导入的方式可以在其他地方使用<br></code></pre></td></tr></table></figure><h3 id="set-数据结构"><a href="#set-数据结构" class="headerlink" title="set 数据结构"></a>set 数据结构</h3><ul><li><strong>方法：</strong>add()、delete()、has()、clear()</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">Set</span>数据结构，类似数组。所有的数据都是唯一的，没有重复的值。它本身是一个构造函数<br></code></pre></td></tr></table></figure><p>应用 【数组去重、并集（Union）、交集（Intersect）和差集（Difference】</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> unique = [...<span class="hljs-function"><span class="hljs-keyword">new</span> <span class="hljs-title">Set</span>(<span class="hljs-params">arr</span>)]</span>;<br><span class="hljs-comment">// [3, 5, 2]</span><br><br><span class="hljs-number">2</span>、并集（Union）、交集（Intersect）和差集（Difference）<br></code></pre></td></tr></table></figure><h2 id="…-展开运算符"><a href="#…-展开运算符" class="headerlink" title="… 展开运算符"></a>… 展开运算符</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">可以将数组或对象里面的值展开；还可以将多个值收集为一个变量<br></code></pre></td></tr></table></figure><h2 id="应用-【合并数组、浅拷贝数组、类数组转数组、使用-Math-函数判断最大最小】"><a href="#应用-【合并数组、浅拷贝数组、类数组转数组、使用-Math-函数判断最大最小】" class="headerlink" title="应用 【合并数组、浅拷贝数组、类数组转数组、使用 Math 函数判断最大最小】"></a>应用 【合并数组、浅拷贝数组、类数组转数组、使用 Math 函数判断最大最小】</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-number">1.</span> 合并数组<br><br>arr1.push(...arr2) <span class="hljs-comment">// 将arr2 追加到数组的末尾</span><br>arr1.unshift(...arr2) <span class="hljs-comment">// 将arr2 追加到数组的开头</span><br><br><span class="hljs-number">2.</span> 拷贝数组<br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> arr2 = [...arr]; <span class="hljs-comment">// 和arr.slice()差不多</span><br>arr2.push(<span class="hljs-number">4</span>)<br><span class="hljs-comment">//记住：数组中的对象依然是引用值，所以不是任何东西都“拷贝”过去了。</span><br><br><span class="hljs-number">3.</span>将arguments或者NodeList转换为Array<br><br><span class="hljs-keyword">var</span> myFn = <span class="hljs-keyword">function</span><span class="hljs-params">(<span class="hljs-rest_arg">...args</span>)</span> &#123;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h2 id="修饰器-【比如-vue-的事件修饰符-代替-v-on-】"><a href="#修饰器-【比如-vue-的事件修饰符-代替-v-on-】" class="headerlink" title="修饰器 @ 【比如 vue 的事件修饰符 代替 v-on:】"></a>修饰器 @ 【比如 vue 的事件修饰符 代替 v-on:】</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">decorator【待 科 <span class="hljs-built_in">ra</span> 腾】是一个函数，用来修改类甚至于是方法的行为。修饰器本质就是编译时执行的函数<br></code></pre></td></tr></table></figure><h2 id="class-类的继承"><a href="#class-类的继承" class="headerlink" title="class 类的继承"></a>class 类的继承</h2><h3 id="ES6-中不再像-ES5-一样使用原型链实现继承，而是引入-Class-这个概念-extends【继承】"><a href="#ES6-中不再像-ES5-一样使用原型链实现继承，而是引入-Class-这个概念-extends【继承】" class="headerlink" title="ES6 中不再像 ES5 一样使用原型链实现继承，而是引入 Class 这个概念 extends【继承】"></a>ES6 中不再像 ES5 一样使用原型链实现继承，而是引入 Class 这个概念 extends【继承】</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;&#125; 父类<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>constructor(name, age,job) &#123;<br>         <span class="hljs-keyword">super</span>(name, age);<br>          <span class="hljs-keyword">this</span>.job = job;<br>    &#125;<br>&#125;  子继承父类<br></code></pre></td></tr></table></figure><hr><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>Promise 是 ES6 提出的一种解决异步编程的方案，比传统的解决方案（回调函数和事件）更合理、强大</p><p>它有三种状态，分别是 pending-进行中、fulfilled-已完成、rejected-已失败。</p><p>【 可以链式调用解决回调地狱问题 】</p><p>Promise 的实例方法有 .then()/.catch() /finally() 三种，</p><p>静态方法有 all / race / allSettled [塞抖~] / any / resolve / reject 六种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Promise</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">then</span>()<br><span class="hljs-title class_">Promise</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">catch</span>()<br><span class="hljs-title class_">Promise</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">finally</span>() <span class="hljs-comment">// 不管 Promise 对象最后状态如何，都会执行的操作。</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>()  <span class="hljs-comment">// 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。所有参数数组 Promise 实例执行 resolve 回调后，新实例执行 resolve 回调；如果中间有任何一个 Promise 实例执行 reject 回调，那么新实例就直接执行 reject 回调了。</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-property">race</span>)  <span class="hljs-comment">//顾名思义，就是竞赛，返回最快完成那一个 Promise 实例。只要参数数组中有一个 Promise 实例执行 resolve 回调或 reject 回调后，新实例就直接返回结果。</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">allSettled</span>( ) <span class="hljs-comment">// 方法只有等到 参数 数组 的所有 Promise 实例都发生状态变更，返回的 Promise 实例才会发生状态变更，无论是执行 resolve 回调还是 reject 回调的状态。</span><br><span class="hljs-string">&#x27;有时候，我们不关心异步操作的结果，只关心这些操作有没有结束。这时，Promise.allSettled()方法就很有用。</span><br><span class="hljs-string">Promise.any()  // 返回任意一个最快执行 resolve 回调的 Promise 实例。</span><br><span class="hljs-string">Promise.resolve()  // 方法返回一个以给定值解析后的 Promise 实例。相当于执行 then 方法里面的 _resolvePromise。</span><br><span class="hljs-string">Promise.reject() // 方法返回一个带有拒绝原因的 Promise 实例。</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><hr><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>是一种基本类型。Symbol 通过调用 symbol 函数产生，它接收一个可选的名字参数，该函数返回的 symbol 是唯一的</p><ul><li>Symbol 的值是唯一的，常用来解决命名冲突问题。</li><li>Symbol 的值不能和其他数据进行运算。</li></ul><p>应用场景：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">应用场景<span class="hljs-number">1</span>：使用<span class="hljs-title class_">Symbol</span>来作为对象属性名(key)<br><br>应用场景<span class="hljs-number">2</span>：使用<span class="hljs-title class_">Symbol</span>来替代常量<br><br>应用场景<span class="hljs-number">3</span>：使用<span class="hljs-title class_">Symbol</span>定义类的私有属性/方法<br><br><span class="hljs-comment">//正常的 Symbol</span><br><span class="hljs-keyword">let</span> h1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;小宝&#x27;</span>)<br><span class="hljs-keyword">let</span> h2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;小宝&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(h1 === h2) <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">//相等的Symbol   ----使用 Symbol.for()</span><br><span class="hljs-keyword">let</span> h3 = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;小宝&#x27;</span>)<br><span class="hljs-keyword">let</span> h4 = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;小宝&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(h1 === h2) <span class="hljs-comment">// true</span><br><br></code></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><code>Map</code>类型是键值对的有序列表，而键和值都可以是任意类型</p><ul><li><strong>属性和方法：</strong>size()、set()、get()、has()、delete()、clear()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">// 声明Map</span><br>        <span class="hljs-keyword">let</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>​<br>        <span class="hljs-comment">// 1.添加元素(键值对)</span><br>        m.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;小宝&#x27;</span>)<br>        m.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-number">18</span>)<br>​<br>        <span class="hljs-comment">// 2.获取元素</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m.<span class="hljs-title function_">get</span>(name)) <span class="hljs-comment">//小宝</span><br>​<br>        <span class="hljs-comment">// 3.删除元素</span><br>        m.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;name&#x27;</span>)<br>​<br>        <span class="hljs-comment">// 4.获取元素个数</span><br>        <span class="hljs-keyword">let</span> size = m.<span class="hljs-property">size</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(size) <span class="hljs-comment">//1</span><br>​<br>        <span class="hljs-comment">// 5.检测是否包含某个元素</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;age&#x27;</span>)); <span class="hljs-comment">//true</span><br><br>        <span class="hljs-comment">// 6.清空Map</span><br>        m.<span class="hljs-title function_">clear</span>()<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m) <span class="hljs-comment">//0</span><br><br></code></pre></td></tr></table></figure><hr><h2 id="Proxy-代理"><a href="#Proxy-代理" class="headerlink" title="Proxy 代理"></a>Proxy 代理</h2><p>使用代理（Proxy）监听对象的操作，然后可以做一些相应事情</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-title class_">ES6</span>原生提供了<span class="hljs-title class_">Proxy</span>构造函数，用来生成<span class="hljs-title class_">Proxy</span>实例。<br><br><span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br><span class="hljs-title class_">Proxy</span>对象的所有用法，都是上面的这种形式。不同的只是handle参数的写法。其中<span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>用来生成<span class="hljs-title class_">Proxy</span>实例，target是表示所要拦截的对象，handle是用来定制拦截行为的对象。<br><br><span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123;<br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, property</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">35</span>;<br>  &#125;<br>&#125;);<br><br>proxy.<span class="hljs-property">time</span> <span class="hljs-comment">// 35</span><br>proxy.<span class="hljs-property">name</span> <span class="hljs-comment">// 35</span><br>proxy.<span class="hljs-property">title</span> <span class="hljs-comment">// 35</span><br>上面是一个拦截读取属性的行为的例子。要使<span class="hljs-title class_">Proxy</span>起作用，必须针对<span class="hljs-title class_">Proxy</span>实例进行操作，而不是针对目标对象（target）进行操作。<br><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6新增</title>
    <link href="/2022/08/29/ES6%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E5%A2%9E/"/>
    <url>/2022/08/29/ES6%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E5%A2%9E/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ES6-有哪些新增"><a href="#ES6-有哪些新增" class="headerlink" title="ES6 有哪些新增"></a>ES6 有哪些新增</h1><p>块作用域 (let 变量 const 常量)</p><p>类 （class)</p><p>箭头函数 ( ()=&gt;{} )</p><p>模板字符串(反引号 ``)</p><p>对象解构</p><p>Promise</p><p>模块化 ( import 导入 export 导出)</p><p>Symbol （独一无二的值）ES6 新引入的一种原始数据类型，表示独一无二的值。它是 js 第七种数据类型 是一种类似于字符串的数据类型。</p><p>代理（proxy）</p><p>Set （新的数据结构，里面的值都是唯一不重复的）（类数组，我们一般称为集合）</p><p>字典（Map）【 Map 类型是键值对的有序列表，而键和值都可以是任意类型 】</p><p>函数默认参数 （ function (name=’张三’){} ）</p><p>rest 用来代替 arguments，直接获取一个真数组，方便操作 (arguments 返回的是伪数组)（可以…rest 扩展）</p><p>扩展运算符（…能将「数组」转为逗号分隔的「参数序列] ,是 rest 的逆运算)</p><p>数组和对象的扩展</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端学习笔记</title>
    <link href="/2022/08/29/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/2022/08/29/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-KNSCAPeM" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="3535982902" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#3F51B5"    ></div><h2 id="html-部分"><a href="#html-部分" class="headerlink" title="html 部分"></a>html 部分</h2><h3 id="1-DOCTYPE-有什么作用？"><a href="#1-DOCTYPE-有什么作用？" class="headerlink" title="1. 　 DOCTYPE 　有什么作用？"></a>1. 　 DOCTYPE 　有什么作用？</h3><p><font color='orange'>告诉浏览器使用哪个版本的 <code>HTML</code> 规范来渲染文档。<code>DOCTYPE</code> 不存在或形式不正确会导致 HTML 文档以混杂模式呈现。</font></p><h3 id="2-页面导入样式时，使用-link-和-import-有什么区别？"><a href="#2-页面导入样式时，使用-link-和-import-有什么区别？" class="headerlink" title="2.页面导入样式时，使用 link 和 @import 有什么区别？"></a>2.页面导入样式时，使用 <code>link</code> 和 <code>@import</code> 有什么区别？</h3><p><font color='orange'><code>link</code> 引用 <code>CSS</code> 时候，页面载入时同时加载；</font></p><p><font color='orange'><code>@import</code> 需要在页面完全加载以后加载，而且<code>@import</code> 被引用的 <code>CSS</code> 会等到引用它的<code>CSS</code> 文件被加载完才加载</font></p><h3 id="3-请写出-HTML-块元素标签、行内元素标签、空-void-元素有那些？"><a href="#3-请写出-HTML-块元素标签、行内元素标签、空-void-元素有那些？" class="headerlink" title="3.请写出 HTML 块元素标签、行内元素标签、空(void)元素有那些？"></a>3.请写出 HTML 块元素标签、行内元素标签、空(void)元素有那些？</h3><ul><li><input disabled="" type="checkbox"> 块级元素标签： 　<font color='orange'> <code>div</code> <code>p</code> <code>ul</code> <code>li</code> <code>table</code> <code>h1</code> … <code>h6</code> <code>form</code></font> 等</li><li><input disabled="" type="checkbox"> 行内元素标签： 　<font color='orange'>span<code> </code>a<code> </code>i<code> </code>label<code> </code>img<code> </code>input<code> </code>button<code> </code>textarea<code> </code>select</font> 等</li><li><input disabled="" type="checkbox"> 空(<code>void</code>)元素： 　<font color='orange'>br<code> </code><hr><code> </code><link><code> </code><meta></font> 等</li></ul><h3 id="4-HTML5-的文件离线储存怎么使用？"><a href="#4-HTML5-的文件离线储存怎么使用？" class="headerlink" title="4.HTML5 的文件离线储存怎么使用？"></a>4.HTML5 的文件离线储存怎么使用？</h3><p>在页面头部加入 <code>manifest</code> 属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">manifest</span>=<span class="hljs-string">&quot;cache.manifest&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-SVG-与-Canvas"><a href="#5-SVG-与-Canvas" class="headerlink" title="5. SVG 与 Canvas"></a>5. SVG 与 Canvas</h3><p><strong>SVG 表示（scalable vector graphics）可缩放矢量图形。Canvas 画布</strong></p><p><font color='orange'><strong>SVG</strong>：通过使用 SVG 绘制的任意形状都可以被记住和操作，并且浏览器可以再次渲染它<br><strong>Canvas</strong>:画布则是绘制然后遗忘。一旦绘制完成，你就不能访问和处理像素。</font></p><h3 id="6-请用-html-知识解决-seo-优化问题？"><a href="#6-请用-html-知识解决-seo-优化问题？" class="headerlink" title="6.请用 html 知识解决 seo 优化问题？"></a>6.请用 html 知识解决 seo 优化问题？</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;html对SEO的优化&quot;</span> /&gt;</span>/*不推荐用这个*/<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;SEO,爬虫，搜索引擎、百度、html优化&quot;</span> /&gt;</span><br>增加关键词搜索<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;通过html标签及属性的使用提高网站被爬虫爬取的几率，使用户百度时网站尽量排在前面，提高用户的点击率&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br>添加描述<br></code></pre></td></tr></table></figure><h3 id="7-常用浏览器有哪些，内核都是什么，内核的理解？"><a href="#7-常用浏览器有哪些，内核都是什么，内核的理解？" class="headerlink" title="7.常用浏览器有哪些，内核都是什么，内核的理解？"></a>7.常用浏览器有哪些，内核都是什么，内核的理解？</h3><p>常用浏览器有 IE 火狐(firefox) chrome safari 360 搜狗 等</p><ul><li>IE 的是 Trident</li><li>火狐的是 Gecko</li><li><font color='orange'>chrome 和 safari 用的是 Webkit</font></li><li>360 和搜狗这些分极速模式和兼容模式，极速模式用的 Webkit 的内核，兼容模式用的 Trident 内核</li></ul><p><strong><font color='orange'>浏览器内核主要分成两部分：渲染引擎(<code>Layout Engine</code>或<code>Rendering Engine</code>) 和 JS 引擎。</font></strong></p><h3 id="8-渐进增强-progressive-enhancement-和优雅降级-graceful-degradation-的区别"><a href="#8-渐进增强-progressive-enhancement-和优雅降级-graceful-degradation-的区别" class="headerlink" title="8.渐进增强 (progressive enhancement) 和优雅降级 (graceful degradation) 的区别?"></a>8.渐进增强 (progressive enhancement) 和优雅降级 (graceful degradation) 的区别?</h3><ul><li>渐进增强: 先保证低版本浏览器的基本功能，再去兼容高版本浏览器效果和交互。</li><li>优雅降级: 先保证高版本浏览器的效果和交互等，再去兼容低版本的浏览器。</li></ul><h3 id="9-什么是-FOUC（文档样式短暂失效）"><a href="#9-什么是-FOUC（文档样式短暂失效）" class="headerlink" title="9.什么是 FOUC（文档样式短暂失效）?"></a>9.什么是 FOUC（文档样式短暂失效）?</h3><ul><li>原理：当样式表晚于结构性 html 加载，当加载到此样式表时，页面将停止之前的渲染。此样式表被下载和解析后，将重新渲染页面，也就出现了短暂的花屏现象。( <font color='orange'>使用<code>@import</code> 方法导入样式表</font>)</li><li>解决方法：使用 <code>link</code> 标签加载 CSS 样式文件。因为 <code>link</code> 是顺序加载的，这样页面会等到 CSS 下载完之后再下载 HTML 文件，这样先布局好，就不会出现 <code>FOUC</code> 问题。</li></ul><h3 id="10-Cookie，sessionStorage-和-localStorage-的区别？"><a href="#10-Cookie，sessionStorage-和-localStorage-的区别？" class="headerlink" title="10.Cookie，sessionStorage 和 localStorage 的区别？"></a>10.<code>Cookie</code>，<code>sessionStorage</code> 和 <code>localStorage</code> 的区别？</h3><p><font color='orange'>共同点：都是保存在浏览器端，且是同源的。</font></p><p><font color='orange'>存储位置不同：cookie 在浏览器和服务器间来回传递，而 <code>sessionStorage</code> 和 <code>localStorage</code> 不会自动把数据发给服务器，仅在本地保存。</font></p><p><font color='orange'>存储大小的限制不同：<code>cookie</code> 保存的数据很小，不能超过 4k，而 <code>sessionStorage</code> 和<code>localStorage</code> 保存的数据大，可达到 5M。</font></p><p><font color='orange'>数据的有效期不同：<code>cookie</code> 在设置的 <code>cookie</code> 过期时间之前一直有效，即使窗口或者浏览器关闭。<code>sessionStorage</code> 仅在浏览器窗口关闭之前有效。<code>localStorage</code> 始终有效，窗口和浏览器关闭也一直保存，用作长久数据保存。</font></p><p><font color='orange'>作用域不同：<code>cookie</code> 在所有的同源窗口都是共享；<code>sessionStorage</code> 不在不同的浏览器共享，即使同一页面；<code>localStorage</code> 在所有同源窗口都是共享。</font></p><h2 id="indexedDB-介绍"><a href="#indexedDB-介绍" class="headerlink" title="indexedDB 介绍"></a>indexedDB 介绍</h2><p><code>indexedDB</code> 是一个前端数据持久化解决方案（即前端缓存），由浏览器实现。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">1.存储量大，理论上不封顶<br>2.同源策略是一样的<br>3.多数api采用的都是异步的方式，防止数据量大的时候阻塞其他的一些操作<br>4.通过对象仓库存储的方式<br>5.存储的类型比较丰富<br>6.能够为数据建立索引，提供查找性能<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>对象仓库，在indexedDB中是没有表的概念的，而是objectStore，一个数据库中可以包含多个objectStore，它是一个灵活的数据结构可以存放多种类型数据，里面储存的每条数据都和一个键相关联。键值可以指定也可以用数字递增也可以不指定但存储的类型会有差异。<br><br><span class="hljs-number">2.</span>事务性， 每次操作数据库都必须创建一个事务，<span class="hljs-number">2</span>个参数（表名，是否可读写） db.<span class="hljs-title function_">transaction</span>(storeName, ‘readwrite’)<br><br><span class="hljs-number">3.</span>基于请求，异步，indexedDB打开数据库，新建表等都是基于请求的，是一种异步的处理方式，必须在他回调函数中处理<br></code></pre></td></tr></table></figure><h3 id="11-如何实现浏览器内多个标签页之间的通信"><a href="#11-如何实现浏览器内多个标签页之间的通信" class="headerlink" title="11.如何实现浏览器内多个标签页之间的通信?"></a>11.如何实现浏览器内多个标签页之间的通信?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> / <span class="hljs-title class_">WebSocket</span>、<span class="hljs-title class_">SharedWorker</span><br><br><span class="hljs-comment">//可以调用 localstorge、cookie 等本地存储方式。localstorge 在另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，我们通过监听事件，控制它的值来进行页面信息通信。</span><br></code></pre></td></tr></table></figure><h3 id="12-什么是渐进式渲染？"><a href="#12-什么是渐进式渲染？" class="headerlink" title="12.什么是渐进式渲染？"></a>12.什么是渐进式渲染？</h3><ul><li><p><font color='orange'>渐进式渲染是用于提高网页性能（尤其是提高用户感知的加载速度），以尽快呈现页面的技术。</font></p></li><li><p><font color='orange'>在以前互联网带宽较小的时期，这种技术更为普遍。如今，移动终端的盛行，而移动网络往往不稳定，渐进式渲染在现代前端开发中仍然有用武之地。</font></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">比如：<br><span class="hljs-comment">//（1）图片懒加载——页面上的图片不会一次性全部加载。当用户滚动页面到图片部分时，JavaScript将加载并显示图像。</span><br><span class="hljs-comment">//（2）确定显示内容的优先级（分层次渲染）——为了尽快将页面呈现给用户，页面只包含基本的最少量的CSS、脚本和内容，然后可以使用延迟加载脚本或监听DOMContentLoaded/load事件加载其他资源和内容。</span><br><span class="hljs-string">&#x27;（3）异步加载HTML片段——当页面通过后台渲染时，把HTML拆分，通过异步请求，分块发送给浏览器。</span><br></code></pre></td></tr></table></figure><h2 id="css3-部分"><a href="#css3-部分" class="headerlink" title="css3 部分"></a>css3 部分</h2><h3 id="1-CSS3-有哪些新特性？"><a href="#1-CSS3-有哪些新特性？" class="headerlink" title="1. CSS3 有哪些新特性？"></a>1. CSS3 有哪些新特性？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jade">RGBA 和 透明度<br>background-image background-origin(content-box/padding-box/border-box) background-size background-repeat<br>word-wrap（对长的不可分割单词换行）word-wrap：break-word<br>文字阴影：text-shadow： 5px 5px 5px #FF0000;（水平阴影，垂直阴影，模糊距离，阴影颜色）<br>font-face 属性：定义自己的字体<br>圆角（边框半径）：border-radius 属性用于创建圆角<br>边框图片：border-image: url(border.png) 30 30 round<br>盒阴影：box-shadow: 10px 10px 5px #888888<br>媒体查询：定义两套css，当浏览器的尺寸变化时会采用不同的属性<br></code></pre></td></tr></table></figure><h3 id="2-解释一下-Flexbox-弹性盒布局模型-？及适用场景？"><a href="#2-解释一下-Flexbox-弹性盒布局模型-？及适用场景？" class="headerlink" title="2.解释一下 Flexbox (弹性盒布局模型)？及适用场景？"></a>2.解释一下 <code>Flexbox</code> (弹性盒布局模型)？及适用场景？</h3><ul><li><font color='orange'>一个容器默认有两条轴，一个是水平的主轴，一个是与主轴垂直的交叉轴。</font></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">属性：<br><span class="hljs-attribute">flex-direction</span> 定义主轴的方向；<br><span class="hljs-attribute">flex-wrap</span> 定义是否换行；<br><span class="hljs-attribute">flex-flow</span> 上述<span class="hljs-number">2</span>个属性的简写；<br><span class="hljs-attribute">justify-content</span> 定义项目在主轴上的对齐方式；<br><span class="hljs-attribute">align-items</span> 定义项目在交叉轴上如何对齐；<br><span class="hljs-attribute">align-content</span> 定义多根轴线的对齐方式<br></code></pre></td></tr></table></figure><p><img src="C:\Users\LL\AppData\Roaming\Typora\typora-user-images\image-20220806111527552.png" alt="image-20220806111527552"></p><h3 id="3-CSS3-新增伪类有那些"><a href="#3-CSS3-新增伪类有那些" class="headerlink" title="3.CSS3 新增伪类有那些?"></a>3.CSS3 新增伪类有那些?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;p:first-of-type 选择属于其父元素的首个元素</span><br><span class="hljs-string">&#x27;</span><span class="hljs-attr">p</span>:last-<span class="hljs-keyword">of</span>-type 选择属于其父元素的最后元素<br><span class="hljs-string">&#x27;p:only-of-type 选择属于其父元素唯一的元素</span><br><span class="hljs-string">//p:only-child 选择属于其父元素的唯一子元素</span><br><span class="hljs-string">//p:nth-child(2) 选择属于其父元素的第二个子元素</span><br><span class="hljs-string">:enabled :disabled 表单控件的禁用状态。</span><br><span class="hljs-string">:checked 单选框或复选框被选中。</span><br></code></pre></td></tr></table></figure><h3 id="4-为什么要清除浮动？清除浮动的方式"><a href="#4-为什么要清除浮动？清除浮动的方式" class="headerlink" title="4.为什么要清除浮动？清除浮动的方式"></a>4.为什么要清除浮动？清除浮动的方式</h3><ul><li><font color='orange'>清除浮动是为了清除使用浮动元素产生的影响：浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。</font></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1</span><span class="hljs-comment">/* 万能清除浮动代码*/</span>  <span class="hljs-number">2</span> <span class="hljs-comment">/*在结尾处添加空div标签 clear:both*/</span>  <span class="hljs-number">3</span><span class="hljs-comment">/*父级div定义height*/</span> <span class="hljs-number">4</span> <span class="hljs-comment">/*父级div定义 overflow:hidden 或 overflow:auto*/</span><br><span class="hljs-comment">//.clearfloat:after&#123;</span><br><span class="hljs-attr">display</span>:block;<br><span class="hljs-attr">clear</span>:both;<br><span class="hljs-attr">content</span>:<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-attr">visibility</span>:hidden;<br><span class="hljs-attr">height</span>:<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//.clearfloat&#123;</span><br><span class="hljs-attr">zoom</span>:<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-before-和-after-中双冒号和单冒号有什么区别？解释一下这-2-个伪元素的作用"><a href="#5-before-和-after-中双冒号和单冒号有什么区别？解释一下这-2-个伪元素的作用" class="headerlink" title="5.::before 和 :after 中双冒号和单冒号有什么区别？解释一下这 2 个伪元素的作用"></a>5.<code>::before</code> 和 <code>:after</code> 中双冒号和单冒号有什么区别？解释一下这 2 个伪元素的作用</h3><ul><li><p>单冒号( <code>:</code> )用于 CSS3 伪类，双冒号( <code>::</code> )用于 CSS3 伪元素。</p></li><li><p><code>::before</code> 就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于<code>dom</code>之中，只存在于页面之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//:before 和 :after 这两个伪元素，是在 CSS2.1 里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为 ::before ::after。</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="6-让页面里的字体变清晰，变细用-CSS-怎么做？"><a href="#6-让页面里的字体变清晰，变细用-CSS-怎么做？" class="headerlink" title="6.让页面里的字体变清晰，变细用 CSS 怎么做？"></a>6.让页面里的字体变清晰，变细用 CSS 怎么做？</h3><ol><li><strong><code>-webkit-font-smoothing</code> 在 window 系统下没有起作用，但是在 IOS 设备上起作用</strong></li><li><strong><code>-webkit-font-smoothing：antialiased</code> 是最佳的，灰度平滑。</strong></li></ol><h3 id="7-如果需要手动写动画，你认为最小时间间隔是多久，为什么？"><a href="#7-如果需要手动写动画，你认为最小时间间隔是多久，为什么？" class="headerlink" title="7.如果需要手动写动画，你认为最小时间间隔是多久，为什么？"></a>7.如果需要手动写动画，你认为最小时间间隔是多久，为什么？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//多数显示器默认频率是 60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms。</span><br></code></pre></td></tr></table></figure><h3 id="8-什么是响应式设计？响应式设计的基本原理是什么？"><a href="#8-什么是响应式设计？响应式设计的基本原理是什么？" class="headerlink" title="8.什么是响应式设计？响应式设计的基本原理是什么？"></a>8.什么是响应式设计？响应式设计的基本原理是什么？</h3><p><font color='orange'>响应式网站设计(Responsive Web design)是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。</font></p><p><font color='orange'>基本原理是通过<strong>媒体查询 <code>@media</code> 检测不同的设备屏幕尺寸做处理</strong>。</font></p><p><img src="C:\Users\LL\AppData\Roaming\Typora\typora-user-images\image-20220806111425650.png" alt="image-20220806111425650"></p><h3 id="9-Sass、Less-是什么？大家为什么要使用他们？"><a href="#9-Sass、Less-是什么？大家为什么要使用他们？" class="headerlink" title="9.Sass、Less 是什么？大家为什么要使用他们？"></a><code>9.Sass</code>、<code>Less</code> 是什么？大家为什么要使用他们？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">/他们是<span class="hljs-variable constant_">CSS</span>预处理器。是<span class="hljs-variable constant_">CSS</span>上的一种抽象层。它们是一种特殊的语法、语言编译成<span class="hljs-variable constant_">CSS</span>。<br><br><span class="hljs-string">&#x27; Less 是一种动态样式语言。将CSS赋予了动态语言的特性，如变量，继承，运算，函数。Less即可以在客户端上运行（支持IE6+,Webkit,Firefox），也可以在服务端运行（借助Node.js）。</span><br><span class="hljs-string">//Sass 变量必须是 $ 开始，而 Less 变量必须使用 @ 符号开始。</span><br><span class="hljs-string">为什么要使用它们？</span><br><span class="hljs-string"></span><br><span class="hljs-string">//结构清晰，便于扩展。</span><br><span class="hljs-string">//可以方便地屏蔽浏览器私有语法差异。（这个不用多说，封装对浏览器语法差异的重复处理，减少无异议的机械劳动。）</span><br><span class="hljs-string">//可以轻松实现多重继承。</span><br><span class="hljs-string">//完全兼容CSS代码，可以方便地应用到老项目中。Less 只是在CSS语法上做了扩展，所以老的CSS代码也可以与 Less 代码一同编译。</span><br></code></pre></td></tr></table></figure><h3 id="10-display-inline-block-什么时候会显示间隙？"><a href="#10-display-inline-block-什么时候会显示间隙？" class="headerlink" title="10.display:inline-block 什么时候会显示间隙？"></a>10.<code>display:inline-block</code> 什么时候会显示间隙？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//有空格时候会有间隙——解决：移除空格</span><br><span class="hljs-comment">//margin 正值的时候——解决：margin使用负值</span><br><span class="hljs-comment">//使用 font-size 时候——解决：font-size:0、letter-spacing、word-spacing</span><br></code></pre></td></tr></table></figure><h3 id="11-浏览器是怎样解析-CSS-选择器的？"><a href="#11-浏览器是怎样解析-CSS-选择器的？" class="headerlink" title="11.浏览器是怎样解析 CSS 选择器的？"></a>11.浏览器是怎样解析 CSS 选择器的？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">/<span class="hljs-variable constant_">CSS</span>选择器的解析是从右向左解析的。<br><br><span class="hljs-string">&#x27;若从左向右的匹配，发现不符合规则，需要进行回溯，会损失很多性能。</span><br><span class="hljs-string">//若从右向左匹配，先找到所有的最右节点，对于每一个节点，向上寻找其父节点直到找到根元素或满足条件的匹配规则，则结束这个分支的遍历。</span><br><span class="hljs-string">&#x27;</span>两种匹配规则的性能差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点），而从左向右的匹配规则的性能都浪费在了失败的查找上面。<br><span class="hljs-comment">//而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。在建立 Render Tree 时（WebKit 中的Attachment过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 Render Tree。</span><br></code></pre></td></tr></table></figure><h3 id="12-CSS-优化、提高性能的方法有哪些？"><a href="#12-CSS-优化、提高性能的方法有哪些？" class="headerlink" title="12. CSS 优化、提高性能的方法有哪些？"></a>12. CSS 优化、提高性能的方法有哪些？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&#x27;避免过度约束</span><br><span class="hljs-string">&#x27;</span>避免后代选择符<br><span class="hljs-string">&#x27;避免链式选择符</span><br><span class="hljs-string">&#x27;</span>使用紧凑的语法<br><span class="hljs-string">&#x27;避免不必要的命名空间</span><br><span class="hljs-string">&#x27;</span>避免不必要的重复<br><span class="hljs-string">&#x27;最好使用表示语义的名字。一个好的类名应该是描述他是什么而不是像什么</span><br><span class="hljs-string">&#x27;</span>避免 !important，可以选择其他选择器<br><span class="hljs-string">&#x27;尽可能的精简规则，你可以合并不同类里的重复规则</span><br></code></pre></td></tr></table></figure><h3 id="13-阐述一下-CSS-Sprites（雪碧图）"><a href="#13-阐述一下-CSS-Sprites（雪碧图）" class="headerlink" title="13.阐述一下 CSS Sprites（雪碧图）"></a>13.阐述一下 CSS Sprites（雪碧图）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 background-image，background- repeat，background-position 的组合进行背景定位。</span><br><span class="hljs-comment">//利用CSS Sprites能很好地减少网页的http请求，从而大大的提高页面的性能；CSS Sprites能减少图片的字节。</span><br></code></pre></td></tr></table></figure><h3 id="14-移动端的布局用过媒体查询吗？"><a href="#14-移动端的布局用过媒体查询吗？" class="headerlink" title="14.移动端的布局用过媒体查询吗？"></a>14.移动端的布局用过媒体查询吗？</h3><p><strong>通过媒体查询可以为不同大小和尺寸的媒体定义不同的 css，适应相应的设备的显示</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  里边引入： <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">”stylesheet”</span> <span class="hljs-attr">type</span>=<span class="hljs-string">”text/css”</span> <span class="hljs-attr">href</span>=<span class="hljs-string">”xxx.css”</span> <span class="hljs-attr">media</span>=<span class="hljs-string">”only</span></span><br><span class="hljs-tag">  <span class="hljs-attr">screen</span> <span class="hljs-attr">and</span> (<span class="hljs-attr">max-device-width:480px</span>)”&gt;</span> 1 CSS中定义： @media only screen and<br>  (max-device-width:480px) &#123; /* css样式 */ &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="15-上下-margin-重合的问题"><a href="#15-上下-margin-重合的问题" class="headerlink" title="15.上下 margin 重合的问题?"></a>15.上下 <code>margin</code> 重合的问题?</h3><p><font color='orange'><strong>在重合元素外包裹一层容器，通过改变此<code>div</code>的属性使两个盒子分属于两个不同的<code>BFC</code>，以此来阻止<code>margin</code>重叠。</strong></font></p><p><img src="C:\Users\LL\AppData\Roaming\Typora\typora-user-images\image-20220806113745742.png" alt="image-20220806113745742"></p><h2 id="js-部分"><a href="#js-部分" class="headerlink" title="js 部分"></a>js 部分</h2><h3 id="1、0-1-0-2-0-3-？为什么？false"><a href="#1、0-1-0-2-0-3-？为什么？false" class="headerlink" title="1、0.1 + 0.2 === 0.3 ？为什么？false"></a>1、0.1 + 0.2 === 0.3 ？为什么？false</h3><p><font color='orae'><strong>精度丢失可能出现在进制转换和对阶运算中</strong></font></p><p><font color='orange'>在两数相加时，会先转换成二进制，0.1 和 0.2 转换成二进制的时候尾数会发生无限循环，然后进行对阶运算，JS 引擎对二进制进行截断，所以造成精度丢失。</font></p><h3 id="2、JS-数据类型"><a href="#2、JS-数据类型" class="headerlink" title="2、JS 数据类型"></a>2、JS 数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本类型：Number、Boolean、String、null、undefined、symbol（ES6 新增的），BigInt（ES2020）</span><br><br><span class="hljs-comment">//引用类型：Object，对象子类型（Array，Function）</span><br><br><span class="hljs-string">&#x27;扩展：symbol 有什么用处？</span><br><span class="hljs-string"></span><br><span class="hljs-string">//可以用来表示一个独一无二的变量防止命名冲突。</span><br><span class="hljs-string">还可以利用 symbol 不会被常规的方法（除了 Object.getOwnPropertySymbols 外）遍历到，所以可以用来模拟私有变量。</span><br><span class="hljs-string">//主要用来提供遍历接口，布置了 symbol.iterator 的对象才可以使用 for···of 循环，可以统一处理数据结构。调用之后回返回一个遍历器对象，包含有一个 next 方法，使用 next 方法后有两个返回值 value 和 done 分别表示函数当前执行位置的值和是否遍历完毕。</span><br><span class="hljs-string">Symbol.for() 可以在全局访问 symbol</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h3 id="3、如何判断-JS-数据类型"><a href="#3、如何判断-JS-数据类型" class="headerlink" title="3、如何判断 JS 数据类型"></a>3、如何判断 JS 数据类型</h3><p>一、<strong>typeof</strong> 【检测除 null 外的基本类型 返回字符串 】</p><p><font color='orange'> <strong>typeof  返回一个表示数据类型的字符串，返回结果包括：number、string、boolean、object、undefined、function。typeof 可以对基本类型 number、string、boolean、undefined 做出准确的判断（null 除外，typeof null === “object”）；而对于引用类型，除了 function 之外返回的都是 object。但当我们需要知道某个对象的具体类型时，typeof 就显得有些力不从心了。</strong></font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// number 有效</span><br><span class="hljs-keyword">typeof</span> ‘ ’;<span class="hljs-comment">// string 有效</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// boolean 有效</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// undefined 有效</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>; / object 无效<br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(); <span class="hljs-comment">// function 有效</span><br><span class="hljs-keyword">typeof</span> [] ; / object 无效<br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); / object 无效<br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(); / object 无效<br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">NaN</span>;  <span class="hljs-comment">// number Not a Number，表示非数字</span><br></code></pre></td></tr></table></figure><p>二、<strong>instanceof</strong> 【检测是否是某个构造函数的实例】</p><p><font color='orang'> 当我们需要知道某个对象的具体类型时，可以用运算符 <code>instanceof</code>，<code>instanceof</code> 操作符判断左操作数对象的原型链上是否有右边这个构造函数的 <code>prototype</code> 属性，也就是说指定对象是否是某个构造函数的实例，最后返回布尔值。</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//当 A 的 __proto__ 指向 B 的 prototype 时，就认为A就是B的实例</span><br><span class="hljs-keyword">instanceof</span> (A,B) = &#123;<br>    <span class="hljs-keyword">var</span> L = A.<span class="hljs-property">__proto__</span>; <span class="hljs-comment">// L是A的原型对象</span><br>    <span class="hljs-keyword">var</span> R = B.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">// R是B的原型对象</span><br>    <span class="hljs-keyword">if</span>(L === R) &#123;<br>        <span class="hljs-comment">// A的内部属性__proto__指向B的原型对象</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>; <span class="hljs-comment">// true</span><br>[] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>; <span class="hljs-comment">// true</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Date</span>; <span class="hljs-comment">// true</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>; <span class="hljs-comment">// true</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;&#125; <span class="hljs-comment">//创建 Person 构造函数</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>; <span class="hljs-comment">// true</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>三、constructor</strong> 【得知某个实例对象，到底是哪一个构造函数产生的】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//constructor 属性的作用是，可以得知某个实例对象，到底是哪一个构造函数产生的。</span><br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>();<br>f.<span class="hljs-property">constructor</span> === F;<span class="hljs-comment">// true</span><br><br>/但是 constructor 属性易变，不可信赖，这个主要体现在自定义对象上，当开发者重写 prototype 后，原有的 constructor 会丢失。<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;<br><span class="hljs-attr">_name</span>: <span class="hljs-string">&#x27;Eric&#x27;</span>,<br>&#125;;<br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>();<br>f.<span class="hljs-property">constructor</span> === F; <span class="hljs-comment">// false</span><br><span class="hljs-comment">//因此，为了规范，在重写对象原型时一般都需要重新给 constructor 赋值，以保证实例对象的类型不被改写。</span><br></code></pre></td></tr></table></figure><p><strong>四、<font color='orang'> Object.prototype.toString</font></strong> 【返回其调用者的具体类型 类型格式为<code>[object,xxx]</code>比较推荐】</p><p>toString 是 Object 原型对象上的一个方法，该方法默认返回其调用者的具体类型，更严格的讲，是 toString 运行时 this 指向的对象类型，返回的类型格式为[object,xxx]，xxx 是具体的数据类型，其中包括：<br>String，Number，Boolean，Undefined，Null，Function，Date，Array，RegExp，Error，HTMLDocument，… 基本上所有对象的类型都可以通过这个方法获取到。</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// [object String]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// [object Number]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// [object Boolean]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">// [object Undefined]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// [object Null]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>()); <span class="hljs-comment">// [object Function]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()); <span class="hljs-comment">// [object Date]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>([]); <span class="hljs-comment">// [object Array]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>()); <span class="hljs-comment">// [object RegExp]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>()); <span class="hljs-comment">// [object Error]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">document</span>); <span class="hljs-comment">// [object HTMLDocument]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">window</span>); <span class="hljs-comment">//[object Window]</span><br></code></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> 可以准确地判断出基本类型，但是对于引用类型除 <span class="hljs-keyword">function</span> 之外返回的都是 object；<br>已知是引用类型的情况可以选用 <span class="hljs-keyword">instanceof</span> 或 constructor 方法进行具体类型的判断：<br><span class="hljs-keyword">instanceof</span> 是基于原型链的；<br><span class="hljs-string">&#x27;constructor 属性易变，不可信赖，为了规范，在重写对象原型时一般都需要重新给 constructor 赋值，以保证实例对象的类型不被改写；</span><br><span class="hljs-string">//Object.prototype.toString.call() 通用但很繁琐。</span><br></code></pre></td></tr></table></figure><h3 id="4、事件如何实现的？事件流？"><a href="#4、事件如何实现的？事件流？" class="headerlink" title="4、事件如何实现的？事件流？"></a>4、事件如何实现的？事件流？</h3><p><strong>事件：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//基于发布订阅模式，就是在浏览器加载的时候会读取事件相关的代码，但是只有实际等到具体的事件触发的时候才会执行。</span><br><span class="hljs-comment">//比如点击按钮，这是个事件（Event），而负责处理事件的代码段通常被称为事件处理程序（Event Handler），也就是「启动对话框的显示」这个动作。</span><br></code></pre></td></tr></table></figure><p><strong>在 Web 端，我们常见的就是 DOM 事件：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//DOM0 级事件，直接在 html 元素上绑定 on-event，比如 onclick，取消的话，dom.onclick = null，同一个事件只能有一个处理程序，后面的会覆盖前面的。</span><br><span class="hljs-comment">//DOM2 级事件，通过 addEventListener 注册事件，通过 removeEventListener 来删除事件，一个事件可以有多个事件处理程序，按顺序执行，捕获事件和冒泡事件。</span><br><span class="hljs-comment">//DOM3 级事件，增加了事件类型，比如 UI 事件，焦点事件，鼠标事件等。</span><br></code></pre></td></tr></table></figure><p><strong>事件流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">事件流是网页元素接收事件的顺序，<span class="hljs-string">&quot;DOM2级事件&quot;</span>规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段。<span class="hljs-string">&#x27;首先发生的事件捕获&#x27;</span>，为截获事件提供机会。  然后是实际的<span class="hljs-string">&#x27;目标接受事件&#x27;</span>。最后一个阶段是<span class="hljs-string">&#x27;事件冒泡阶段&#x27;</span>，可以在这个阶段对事件做出响应。虽然捕获阶段在规范中规定不允许响应事件，但是实际上还是会执行，所以有两次机会获取到目标对象。<br></code></pre></td></tr></table></figure><h3 id="5、闭包"><a href="#5、闭包" class="headerlink" title="5、闭包"></a>5、闭包</h3><p>什么是闭包？ <font color='orang'>函数嵌套函数 能够读取其他函数内部变量的函数</font></p><p>优点： 1、使用闭包是不会污染全局环境，2、方便进行模块化开发，3、可以在内存中维护一个变量</p><p>缺点： 就是不恰当使用会造成内存泄漏 【解决方式：清除变量】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//闭包原理：定义在一个函数内部的函数(函数嵌套函数)，闭包就是将函数内部和函数外部连接起来的一座桥梁。</span><br><span class="hljs-comment">//打破了作用域链的规则 闭包就是能够读取其他函数内部变量的函数</span><br></code></pre></td></tr></table></figure><p><strong>闭包应用场景</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//原生的setTimeout传递的第一个函数不能带参数</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">param</span>) &#123;<br>  <span class="hljs-title function_">alert</span>(param);<br>&#125;, <span class="hljs-number">1000</span>);<br><span class="hljs-comment">//通过闭包可以实现传参效果</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">param</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(param);<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">var</span> f1 = <span class="hljs-title function_">func</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">setTimeout</span>(f1, <span class="hljs-number">1000</span>); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="5、call、apply、bind-的区别"><a href="#5、call、apply、bind-的区别" class="headerlink" title="5、call、apply、bind 的区别"></a>5、call、apply、bind 的区别</h3><p><strong>相同点：<code>call</code>、<code>apply</code>、<code>bind</code> 的共同点都是为了解决改变 <code>this</code> 的指向。作用都是相同的，只是传参的方式不同。</strong></p><p><strong>不同点：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//call() 和 apply() 是立即执行的，而 bind() 是返回一个函数。</span><br>call() <span class="hljs-string">&#x27;可以传递多个参数&#x27;</span>，第一个参数和 apply() 一样，是用来替换的对象，后面是参数列表。<br>apply() <span class="hljs-string">&#x27;最多只能有两个参数&#x27;</span> —— 新<span class="hljs-built_in">this</span>对象和一个<span class="hljs-string">&#x27;参数数组或类数组 argArray&#x27;</span><br>bind() 和其他两个方法的作用也是一致的，只是该方法会返回一个函数，并且可以<span class="hljs-string">&#x27;通过bind() 实现柯里化&#x27;</span>。<br></code></pre></td></tr></table></figure><h3 id="6、什么是-Promise？"><a href="#6、什么是-Promise？" class="headerlink" title="6、什么是 Promise？"></a>6、什么是 <a href="https://so.csdn.net/so/search?q=Promise&spm=1001.2101.3001.7020">Promise</a>？</h3><p><strong><code>Promise</code> 是目前 JS <a href="https://so.csdn.net/so/search?q=%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B&spm=1001.2101.3001.7020">异步编程</a>的一种解决方案</strong></p><ul><li>从语法上讲，<code>Promise</code> 是一个对象，从它可以获取异步操作的消息；</li><li>从本意上讲，它是承诺，承诺它过一段时间会给你一个结果。</li></ul><h4 id="Promise-原理简析-："><a href="#Promise-原理简析-：" class="headerlink" title="Promise 原理简析 ："></a>Promise 原理简析 ：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1</span>、<span class="hljs-title class_">Promise</span> 本身相当于一个状态机，拥有三种状态：<br><span class="hljs-string">&#x27;pending(等待态)</span><br><span class="hljs-string">&#x27;</span><span class="hljs-title function_">fulfiled</span>(成功态)<br><span class="hljs-string">&#x27;rejected(失败态)</span><br><span class="hljs-string">一个 Promise 对象初始化时的状态是 pending，调用了 resolve 后会将 Promise 的状态扭转为 fulfilled，调用 reject 后会将 Promise 的状态扭转为 rejected，这两种扭转一旦发生便不能再扭转该 Promise 到其他状态。</span><br><span class="hljs-string"></span><br><span class="hljs-string">2、Promise 对象原型上有一个 then 方法，then 方法会返回一个新的 Promise 对象，并且将回调函数 return&#x27;</span> 的结果作为该 <span class="hljs-title class_">Promise</span> resolve 的结果<span class="hljs-string">&#x27;，then 方法会在一个 Promise 状态被扭转为 fulfilled 或 rejected 时被调用。then 方法的&#x27;</span>参数为两个函数<span class="hljs-string">&#x27;，分别为 Promise 对象的状态被扭转为 fulfilled 和 rejected 对应的回调函数。</span><br></code></pre></td></tr></table></figure><p><strong>Promise 使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//构造一个 Promise 对象，并将要执行的异步函数传入到 Promise 的参数中执行，并且在异步执行结束后调用 resolve() 函数，就可以在 Promise 的 then 方法中获取到异步函数的执行结果</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>():<span class="hljs-title class_">Promise</span>.<span class="hljs-property">resolve</span> 返回一个 fulfilled 状态的 <span class="hljs-title class_">Promise</span><br><span class="hljs-string">&#x27;Promise.all([p1,pa,p3,...])</span><br><span class="hljs-string">//Promise.all 接收一个 Promise 对象数组作为参数，只有全部的 Promise 都已经变为 fulfilled 状态后才会继续后面的处理。Promise.all 本身返回的也是一个 Promise;</span><br><span class="hljs-string">&#x27;</span><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([p1,p1,p3,...])<br><span class="hljs-comment">//Promise.race 和 Promise.all 类似，只不过这个函数会在 Promise 中第一个 promise 的状态扭转后就开始后面的处理（fulfilled、rejected 均可）</span><br></code></pre></td></tr></table></figure><h3 id="7、js-脚本加载问题，async、defer"><a href="#7、js-脚本加载问题，async、defer" class="headerlink" title="7、js 脚本加载问题，async、defer"></a>7、js 脚本加载问题，async、defer</h3><ul><li><p><strong>正常加载模式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//这种情况下 JS 会阻塞浏览器，浏览器必须等待前面所有的 js 加载和执行完毕才能去做其它事情</span><br>&lt;script src=<span class="hljs-string">&quot;index.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>async(异步) 模式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//async 模式下，JS 不会阻塞浏览器做任何其它的事情。它的加载是异步的，当它加载结束，JS 脚本会立即执行</span><br>&lt;script <span class="hljs-keyword">async</span> src=<span class="hljs-string">&quot;index.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>defer(延缓) 模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//defer 模式下，JS 的加载是异步的，执行是被推迟的。等整个文档解析完成、DOMContentLoaded 事件即将被触发时，被标记了 defer 的 JS 文件才会开始依次执行。</span><br>&lt;script defer src=<span class="hljs-string">&quot;index.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>总结</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从应用的角度来说，一般当我们的脚本与 DOM 元素和其它脚本之间的依赖关系不强时，我们会选用 async；</span><br><span class="hljs-comment">//当脚本依赖于 DOM 元素和其它脚本的执行结果时，我们会选用 defer。</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="8、获取-url-的-search-部分-【obj-new-URL-str-obj2-new-URLSearchParams-str2-】"><a href="#8、获取-url-的-search-部分-【obj-new-URL-str-obj2-new-URLSearchParams-str2-】" class="headerlink" title="8、获取 url 的 search 部分 【obj = new URL(str) obj2 = new URLSearchParams(str2)】"></a>8、获取 url 的 search 部分 【obj = new URL(str) obj2 = new URLSearchParams(str2)】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">const</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span><br>  <span class="hljs-string">&quot;https://huodong.taobao.com/wow/a/act/tao/dailyact/4634/wupr?spm=a21bo.jianhua.201867-main.1.5af911d97F6TPV&amp;wh_pid=dailyAct-257518&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(str);<br>console.log(obj.searchParams.get(<span class="hljs-string">&quot;wh_pid&quot;</span>));<br><br><span class="hljs-type">const</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span><br>  <span class="hljs-string">&quot;?spm=a21bo.jianhua.201867-main.1.5af911d97F6TPV&amp;wh_pid=dailyAct-257518&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-variable">obj2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(str2);<br>console.log(obj2.get(<span class="hljs-string">&quot;wh_pid&quot;</span>));<br><br><span class="hljs-type">const</span> <span class="hljs-variable">obj3</span> <span class="hljs-operator">=</span> &#123;<br>  a: <span class="hljs-number">3</span>,<br>  b: <span class="hljs-number">4</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/29/hello-world/"/>
    <url>/2022/08/29/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div id="aplayer-zyAgIUjs" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"><pre class="aplayer-lrc-content">[00:00.00]lrc here</pre></div><script>var ap = new APlayer({element: document.getElementById("aplayer-zyAgIUjs"),narrow: false,autoplay: true,showlrc: 2,music: {title: "title",author: "author",url: "url",pic: "",}});window.aplayers || (window.aplayers = []);window.aplayers.push(ap);</script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
